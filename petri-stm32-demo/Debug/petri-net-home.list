
petri-net-home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800c3b0  0800c3b0  0001c3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d608  0800d608  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d608  0800d608  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d608  0800d608  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d608  0800d608  0001d608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d60c  0800d60c  0001d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001fc  0800d80c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800d80c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018135  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b3  00000000  00000000  00038359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0003ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d08b  00000000  00000000  0003e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d5e  00000000  00000000  0005b43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2aa9  00000000  00000000  00073199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  00115c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c394 	.word	0x0800c394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	0800c394 	.word	0x0800c394

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f000 ffcb 	bl	80013ec <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 ff15 	bl	8001290 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffbd 	bl	80013ec <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffb3 	bl	80013ec <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff37 	bl	8001308 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ff2d 	bl	8001308 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_lmul>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	0415      	lsls	r5, r2, #16
 80004c0:	0c2d      	lsrs	r5, r5, #16
 80004c2:	000f      	movs	r7, r1
 80004c4:	0001      	movs	r1, r0
 80004c6:	002e      	movs	r6, r5
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4684      	mov	ip, r0
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	0c14      	lsrs	r4, r2, #16
 80004d0:	0c00      	lsrs	r0, r0, #16
 80004d2:	0c09      	lsrs	r1, r1, #16
 80004d4:	4346      	muls	r6, r0
 80004d6:	434d      	muls	r5, r1
 80004d8:	4360      	muls	r0, r4
 80004da:	4361      	muls	r1, r4
 80004dc:	1940      	adds	r0, r0, r5
 80004de:	0c34      	lsrs	r4, r6, #16
 80004e0:	1824      	adds	r4, r4, r0
 80004e2:	b500      	push	{lr}
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	d903      	bls.n	80004f0 <__aeabi_lmul+0x34>
 80004e8:	2080      	movs	r0, #128	; 0x80
 80004ea:	0240      	lsls	r0, r0, #9
 80004ec:	4680      	mov	r8, r0
 80004ee:	4441      	add	r1, r8
 80004f0:	0c25      	lsrs	r5, r4, #16
 80004f2:	186d      	adds	r5, r5, r1
 80004f4:	4661      	mov	r1, ip
 80004f6:	4359      	muls	r1, r3
 80004f8:	437a      	muls	r2, r7
 80004fa:	0430      	lsls	r0, r6, #16
 80004fc:	1949      	adds	r1, r1, r5
 80004fe:	0424      	lsls	r4, r4, #16
 8000500:	0c00      	lsrs	r0, r0, #16
 8000502:	1820      	adds	r0, r4, r0
 8000504:	1889      	adds	r1, r1, r2
 8000506:	bc80      	pop	{r7}
 8000508:	46b8      	mov	r8, r7
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800050c <__aeabi_d2uiz>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	2200      	movs	r2, #0
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <__aeabi_d2uiz+0x38>)
 8000512:	0004      	movs	r4, r0
 8000514:	000d      	movs	r5, r1
 8000516:	f7ff ffc7 	bl	80004a8 <__aeabi_dcmpge>
 800051a:	2800      	cmp	r0, #0
 800051c:	d104      	bne.n	8000528 <__aeabi_d2uiz+0x1c>
 800051e:	0020      	movs	r0, r4
 8000520:	0029      	movs	r1, r5
 8000522:	f001 fdd1 	bl	80020c8 <__aeabi_d2iz>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <__aeabi_d2uiz+0x38>)
 800052a:	2200      	movs	r2, #0
 800052c:	0020      	movs	r0, r4
 800052e:	0029      	movs	r1, r5
 8000530:	f001 fa38 	bl	80019a4 <__aeabi_dsub>
 8000534:	f001 fdc8 	bl	80020c8 <__aeabi_d2iz>
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	061b      	lsls	r3, r3, #24
 800053c:	469c      	mov	ip, r3
 800053e:	4460      	add	r0, ip
 8000540:	e7f1      	b.n	8000526 <__aeabi_d2uiz+0x1a>
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	41e00000 	.word	0x41e00000

08000548 <__aeabi_d2lz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	0005      	movs	r5, r0
 800054c:	000c      	movs	r4, r1
 800054e:	2200      	movs	r2, #0
 8000550:	2300      	movs	r3, #0
 8000552:	0028      	movs	r0, r5
 8000554:	0021      	movs	r1, r4
 8000556:	f7ff ff89 	bl	800046c <__aeabi_dcmplt>
 800055a:	2800      	cmp	r0, #0
 800055c:	d108      	bne.n	8000570 <__aeabi_d2lz+0x28>
 800055e:	0028      	movs	r0, r5
 8000560:	0021      	movs	r1, r4
 8000562:	f000 f80f 	bl	8000584 <__aeabi_d2ulz>
 8000566:	0002      	movs	r2, r0
 8000568:	000b      	movs	r3, r1
 800056a:	0010      	movs	r0, r2
 800056c:	0019      	movs	r1, r3
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	18e1      	adds	r1, r4, r3
 8000576:	0028      	movs	r0, r5
 8000578:	f000 f804 	bl	8000584 <__aeabi_d2ulz>
 800057c:	2300      	movs	r3, #0
 800057e:	4242      	negs	r2, r0
 8000580:	418b      	sbcs	r3, r1
 8000582:	e7f2      	b.n	800056a <__aeabi_d2lz+0x22>

08000584 <__aeabi_d2ulz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2200      	movs	r2, #0
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <__aeabi_d2ulz+0x34>)
 800058a:	000d      	movs	r5, r1
 800058c:	0004      	movs	r4, r0
 800058e:	f000 ff9d 	bl	80014cc <__aeabi_dmul>
 8000592:	f7ff ffbb 	bl	800050c <__aeabi_d2uiz>
 8000596:	0006      	movs	r6, r0
 8000598:	f001 fdfc 	bl	8002194 <__aeabi_ui2d>
 800059c:	2200      	movs	r2, #0
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <__aeabi_d2ulz+0x38>)
 80005a0:	f000 ff94 	bl	80014cc <__aeabi_dmul>
 80005a4:	0002      	movs	r2, r0
 80005a6:	000b      	movs	r3, r1
 80005a8:	0020      	movs	r0, r4
 80005aa:	0029      	movs	r1, r5
 80005ac:	f001 f9fa 	bl	80019a4 <__aeabi_dsub>
 80005b0:	f7ff ffac 	bl	800050c <__aeabi_d2uiz>
 80005b4:	0031      	movs	r1, r6
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	3df00000 	.word	0x3df00000
 80005bc:	41f00000 	.word	0x41f00000

080005c0 <__aeabi_l2d>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	0006      	movs	r6, r0
 80005c4:	0008      	movs	r0, r1
 80005c6:	f001 fdb5 	bl	8002134 <__aeabi_i2d>
 80005ca:	2200      	movs	r2, #0
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <__aeabi_l2d+0x28>)
 80005ce:	f000 ff7d 	bl	80014cc <__aeabi_dmul>
 80005d2:	000d      	movs	r5, r1
 80005d4:	0004      	movs	r4, r0
 80005d6:	0030      	movs	r0, r6
 80005d8:	f001 fddc 	bl	8002194 <__aeabi_ui2d>
 80005dc:	002b      	movs	r3, r5
 80005de:	0022      	movs	r2, r4
 80005e0:	f000 f804 	bl	80005ec <__aeabi_dadd>
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	41f00000 	.word	0x41f00000

080005ec <__aeabi_dadd>:
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	464f      	mov	r7, r9
 80005f0:	46d6      	mov	lr, sl
 80005f2:	4646      	mov	r6, r8
 80005f4:	000d      	movs	r5, r1
 80005f6:	0001      	movs	r1, r0
 80005f8:	0018      	movs	r0, r3
 80005fa:	b5c0      	push	{r6, r7, lr}
 80005fc:	0017      	movs	r7, r2
 80005fe:	032b      	lsls	r3, r5, #12
 8000600:	0a5a      	lsrs	r2, r3, #9
 8000602:	0f4b      	lsrs	r3, r1, #29
 8000604:	4313      	orrs	r3, r2
 8000606:	00ca      	lsls	r2, r1, #3
 8000608:	4691      	mov	r9, r2
 800060a:	0302      	lsls	r2, r0, #12
 800060c:	006e      	lsls	r6, r5, #1
 800060e:	0041      	lsls	r1, r0, #1
 8000610:	0a52      	lsrs	r2, r2, #9
 8000612:	0fec      	lsrs	r4, r5, #31
 8000614:	0f7d      	lsrs	r5, r7, #29
 8000616:	4315      	orrs	r5, r2
 8000618:	0d76      	lsrs	r6, r6, #21
 800061a:	0d49      	lsrs	r1, r1, #21
 800061c:	0fc0      	lsrs	r0, r0, #31
 800061e:	4682      	mov	sl, r0
 8000620:	46ac      	mov	ip, r5
 8000622:	00ff      	lsls	r7, r7, #3
 8000624:	1a72      	subs	r2, r6, r1
 8000626:	4284      	cmp	r4, r0
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x40>
 800062a:	e098      	b.n	800075e <__aeabi_dadd+0x172>
 800062c:	2a00      	cmp	r2, #0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_dadd+0x46>
 8000630:	e081      	b.n	8000736 <__aeabi_dadd+0x14a>
 8000632:	2900      	cmp	r1, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x4c>
 8000636:	e0b6      	b.n	80007a6 <__aeabi_dadd+0x1ba>
 8000638:	49c9      	ldr	r1, [pc, #804]	; (8000960 <__aeabi_dadd+0x374>)
 800063a:	428e      	cmp	r6, r1
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x54>
 800063e:	e172      	b.n	8000926 <__aeabi_dadd+0x33a>
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0028      	movs	r0, r5
 8000644:	0409      	lsls	r1, r1, #16
 8000646:	4308      	orrs	r0, r1
 8000648:	4684      	mov	ip, r0
 800064a:	2a38      	cmp	r2, #56	; 0x38
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0x64>
 800064e:	e15e      	b.n	800090e <__aeabi_dadd+0x322>
 8000650:	2a1f      	cmp	r2, #31
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0x6a>
 8000654:	e1ee      	b.n	8000a34 <__aeabi_dadd+0x448>
 8000656:	2020      	movs	r0, #32
 8000658:	0039      	movs	r1, r7
 800065a:	4665      	mov	r5, ip
 800065c:	1a80      	subs	r0, r0, r2
 800065e:	4087      	lsls	r7, r0
 8000660:	40d1      	lsrs	r1, r2
 8000662:	4085      	lsls	r5, r0
 8000664:	430d      	orrs	r5, r1
 8000666:	0039      	movs	r1, r7
 8000668:	1e4f      	subs	r7, r1, #1
 800066a:	41b9      	sbcs	r1, r7
 800066c:	4667      	mov	r7, ip
 800066e:	40d7      	lsrs	r7, r2
 8000670:	4329      	orrs	r1, r5
 8000672:	1bdb      	subs	r3, r3, r7
 8000674:	464a      	mov	r2, r9
 8000676:	1a55      	subs	r5, r2, r1
 8000678:	45a9      	cmp	r9, r5
 800067a:	4189      	sbcs	r1, r1
 800067c:	4249      	negs	r1, r1
 800067e:	1a5b      	subs	r3, r3, r1
 8000680:	4698      	mov	r8, r3
 8000682:	4643      	mov	r3, r8
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	d400      	bmi.n	800068a <__aeabi_dadd+0x9e>
 8000688:	e0cc      	b.n	8000824 <__aeabi_dadd+0x238>
 800068a:	4643      	mov	r3, r8
 800068c:	025b      	lsls	r3, r3, #9
 800068e:	0a5b      	lsrs	r3, r3, #9
 8000690:	4698      	mov	r8, r3
 8000692:	4643      	mov	r3, r8
 8000694:	2b00      	cmp	r3, #0
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0xae>
 8000698:	e12c      	b.n	80008f4 <__aeabi_dadd+0x308>
 800069a:	4640      	mov	r0, r8
 800069c:	f001 fda0 	bl	80021e0 <__clzsi2>
 80006a0:	0001      	movs	r1, r0
 80006a2:	3908      	subs	r1, #8
 80006a4:	2220      	movs	r2, #32
 80006a6:	0028      	movs	r0, r5
 80006a8:	4643      	mov	r3, r8
 80006aa:	1a52      	subs	r2, r2, r1
 80006ac:	408b      	lsls	r3, r1
 80006ae:	40d0      	lsrs	r0, r2
 80006b0:	408d      	lsls	r5, r1
 80006b2:	4303      	orrs	r3, r0
 80006b4:	428e      	cmp	r6, r1
 80006b6:	dd00      	ble.n	80006ba <__aeabi_dadd+0xce>
 80006b8:	e117      	b.n	80008ea <__aeabi_dadd+0x2fe>
 80006ba:	1b8e      	subs	r6, r1, r6
 80006bc:	1c72      	adds	r2, r6, #1
 80006be:	2a1f      	cmp	r2, #31
 80006c0:	dd00      	ble.n	80006c4 <__aeabi_dadd+0xd8>
 80006c2:	e1a7      	b.n	8000a14 <__aeabi_dadd+0x428>
 80006c4:	2120      	movs	r1, #32
 80006c6:	0018      	movs	r0, r3
 80006c8:	002e      	movs	r6, r5
 80006ca:	1a89      	subs	r1, r1, r2
 80006cc:	408d      	lsls	r5, r1
 80006ce:	4088      	lsls	r0, r1
 80006d0:	40d6      	lsrs	r6, r2
 80006d2:	40d3      	lsrs	r3, r2
 80006d4:	1e69      	subs	r1, r5, #1
 80006d6:	418d      	sbcs	r5, r1
 80006d8:	4330      	orrs	r0, r6
 80006da:	4698      	mov	r8, r3
 80006dc:	2600      	movs	r6, #0
 80006de:	4305      	orrs	r5, r0
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d009      	beq.n	80006f8 <__aeabi_dadd+0x10c>
 80006e4:	230f      	movs	r3, #15
 80006e6:	402b      	ands	r3, r5
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d005      	beq.n	80006f8 <__aeabi_dadd+0x10c>
 80006ec:	1d2b      	adds	r3, r5, #4
 80006ee:	42ab      	cmp	r3, r5
 80006f0:	41ad      	sbcs	r5, r5
 80006f2:	426d      	negs	r5, r5
 80006f4:	44a8      	add	r8, r5
 80006f6:	001d      	movs	r5, r3
 80006f8:	4643      	mov	r3, r8
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0x114>
 80006fe:	e094      	b.n	800082a <__aeabi_dadd+0x23e>
 8000700:	4b97      	ldr	r3, [pc, #604]	; (8000960 <__aeabi_dadd+0x374>)
 8000702:	1c72      	adds	r2, r6, #1
 8000704:	429a      	cmp	r2, r3
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x11e>
 8000708:	e09d      	b.n	8000846 <__aeabi_dadd+0x25a>
 800070a:	4641      	mov	r1, r8
 800070c:	4b95      	ldr	r3, [pc, #596]	; (8000964 <__aeabi_dadd+0x378>)
 800070e:	08ed      	lsrs	r5, r5, #3
 8000710:	4019      	ands	r1, r3
 8000712:	000b      	movs	r3, r1
 8000714:	0552      	lsls	r2, r2, #21
 8000716:	0749      	lsls	r1, r1, #29
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	4329      	orrs	r1, r5
 800071c:	0b1b      	lsrs	r3, r3, #12
 800071e:	0d52      	lsrs	r2, r2, #21
 8000720:	0512      	lsls	r2, r2, #20
 8000722:	4313      	orrs	r3, r2
 8000724:	07e4      	lsls	r4, r4, #31
 8000726:	4323      	orrs	r3, r4
 8000728:	0008      	movs	r0, r1
 800072a:	0019      	movs	r1, r3
 800072c:	bce0      	pop	{r5, r6, r7}
 800072e:	46ba      	mov	sl, r7
 8000730:	46b1      	mov	r9, r6
 8000732:	46a8      	mov	r8, r5
 8000734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000736:	2a00      	cmp	r2, #0
 8000738:	d043      	beq.n	80007c2 <__aeabi_dadd+0x1d6>
 800073a:	1b8a      	subs	r2, r1, r6
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_dadd+0x156>
 8000740:	e12a      	b.n	8000998 <__aeabi_dadd+0x3ac>
 8000742:	464c      	mov	r4, r9
 8000744:	431c      	orrs	r4, r3
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x15e>
 8000748:	e1d1      	b.n	8000aee <__aeabi_dadd+0x502>
 800074a:	1e54      	subs	r4, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x166>
 8000750:	e21f      	b.n	8000b92 <__aeabi_dadd+0x5a6>
 8000752:	4d83      	ldr	r5, [pc, #524]	; (8000960 <__aeabi_dadd+0x374>)
 8000754:	42aa      	cmp	r2, r5
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x16e>
 8000758:	e272      	b.n	8000c40 <__aeabi_dadd+0x654>
 800075a:	0022      	movs	r2, r4
 800075c:	e123      	b.n	80009a6 <__aeabi_dadd+0x3ba>
 800075e:	2a00      	cmp	r2, #0
 8000760:	dc00      	bgt.n	8000764 <__aeabi_dadd+0x178>
 8000762:	e098      	b.n	8000896 <__aeabi_dadd+0x2aa>
 8000764:	2900      	cmp	r1, #0
 8000766:	d042      	beq.n	80007ee <__aeabi_dadd+0x202>
 8000768:	497d      	ldr	r1, [pc, #500]	; (8000960 <__aeabi_dadd+0x374>)
 800076a:	428e      	cmp	r6, r1
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x184>
 800076e:	e0da      	b.n	8000926 <__aeabi_dadd+0x33a>
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0028      	movs	r0, r5
 8000774:	0409      	lsls	r1, r1, #16
 8000776:	4308      	orrs	r0, r1
 8000778:	4684      	mov	ip, r0
 800077a:	2a38      	cmp	r2, #56	; 0x38
 800077c:	dd00      	ble.n	8000780 <__aeabi_dadd+0x194>
 800077e:	e129      	b.n	80009d4 <__aeabi_dadd+0x3e8>
 8000780:	2a1f      	cmp	r2, #31
 8000782:	dc00      	bgt.n	8000786 <__aeabi_dadd+0x19a>
 8000784:	e187      	b.n	8000a96 <__aeabi_dadd+0x4aa>
 8000786:	0011      	movs	r1, r2
 8000788:	4665      	mov	r5, ip
 800078a:	3920      	subs	r1, #32
 800078c:	40cd      	lsrs	r5, r1
 800078e:	2a20      	cmp	r2, #32
 8000790:	d004      	beq.n	800079c <__aeabi_dadd+0x1b0>
 8000792:	2040      	movs	r0, #64	; 0x40
 8000794:	4661      	mov	r1, ip
 8000796:	1a82      	subs	r2, r0, r2
 8000798:	4091      	lsls	r1, r2
 800079a:	430f      	orrs	r7, r1
 800079c:	0039      	movs	r1, r7
 800079e:	1e4f      	subs	r7, r1, #1
 80007a0:	41b9      	sbcs	r1, r7
 80007a2:	430d      	orrs	r5, r1
 80007a4:	e11b      	b.n	80009de <__aeabi_dadd+0x3f2>
 80007a6:	0029      	movs	r1, r5
 80007a8:	4339      	orrs	r1, r7
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x1c2>
 80007ac:	e0b5      	b.n	800091a <__aeabi_dadd+0x32e>
 80007ae:	1e51      	subs	r1, r2, #1
 80007b0:	2a01      	cmp	r2, #1
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x1ca>
 80007b4:	e1ab      	b.n	8000b0e <__aeabi_dadd+0x522>
 80007b6:	486a      	ldr	r0, [pc, #424]	; (8000960 <__aeabi_dadd+0x374>)
 80007b8:	4282      	cmp	r2, r0
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x1d2>
 80007bc:	e1b2      	b.n	8000b24 <__aeabi_dadd+0x538>
 80007be:	000a      	movs	r2, r1
 80007c0:	e743      	b.n	800064a <__aeabi_dadd+0x5e>
 80007c2:	4969      	ldr	r1, [pc, #420]	; (8000968 <__aeabi_dadd+0x37c>)
 80007c4:	1c75      	adds	r5, r6, #1
 80007c6:	420d      	tst	r5, r1
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x1e0>
 80007ca:	e0cf      	b.n	800096c <__aeabi_dadd+0x380>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x1e6>
 80007d0:	e193      	b.n	8000afa <__aeabi_dadd+0x50e>
 80007d2:	4649      	mov	r1, r9
 80007d4:	4319      	orrs	r1, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x1ee>
 80007d8:	e1d1      	b.n	8000b7e <__aeabi_dadd+0x592>
 80007da:	4661      	mov	r1, ip
 80007dc:	4339      	orrs	r1, r7
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x1f6>
 80007e0:	e1e3      	b.n	8000baa <__aeabi_dadd+0x5be>
 80007e2:	4649      	mov	r1, r9
 80007e4:	0758      	lsls	r0, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4301      	orrs	r1, r0
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e026      	b.n	800083c <__aeabi_dadd+0x250>
 80007ee:	0029      	movs	r1, r5
 80007f0:	4339      	orrs	r1, r7
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x20a>
 80007f4:	e091      	b.n	800091a <__aeabi_dadd+0x32e>
 80007f6:	1e51      	subs	r1, r2, #1
 80007f8:	2a01      	cmp	r2, #1
 80007fa:	d005      	beq.n	8000808 <__aeabi_dadd+0x21c>
 80007fc:	4858      	ldr	r0, [pc, #352]	; (8000960 <__aeabi_dadd+0x374>)
 80007fe:	4282      	cmp	r2, r0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x218>
 8000802:	e18f      	b.n	8000b24 <__aeabi_dadd+0x538>
 8000804:	000a      	movs	r2, r1
 8000806:	e7b8      	b.n	800077a <__aeabi_dadd+0x18e>
 8000808:	003d      	movs	r5, r7
 800080a:	444d      	add	r5, r9
 800080c:	454d      	cmp	r5, r9
 800080e:	4189      	sbcs	r1, r1
 8000810:	4463      	add	r3, ip
 8000812:	4698      	mov	r8, r3
 8000814:	4249      	negs	r1, r1
 8000816:	4488      	add	r8, r1
 8000818:	4643      	mov	r3, r8
 800081a:	2602      	movs	r6, #2
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	d500      	bpl.n	8000822 <__aeabi_dadd+0x236>
 8000820:	e0eb      	b.n	80009fa <__aeabi_dadd+0x40e>
 8000822:	3e01      	subs	r6, #1
 8000824:	076b      	lsls	r3, r5, #29
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x23e>
 8000828:	e75c      	b.n	80006e4 <__aeabi_dadd+0xf8>
 800082a:	4643      	mov	r3, r8
 800082c:	08e9      	lsrs	r1, r5, #3
 800082e:	075a      	lsls	r2, r3, #29
 8000830:	4311      	orrs	r1, r2
 8000832:	0032      	movs	r2, r6
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <__aeabi_dadd+0x374>)
 8000838:	4282      	cmp	r2, r0
 800083a:	d021      	beq.n	8000880 <__aeabi_dadd+0x294>
 800083c:	031b      	lsls	r3, r3, #12
 800083e:	0552      	lsls	r2, r2, #21
 8000840:	0b1b      	lsrs	r3, r3, #12
 8000842:	0d52      	lsrs	r2, r2, #21
 8000844:	e76c      	b.n	8000720 <__aeabi_dadd+0x134>
 8000846:	2300      	movs	r3, #0
 8000848:	2100      	movs	r1, #0
 800084a:	e769      	b.n	8000720 <__aeabi_dadd+0x134>
 800084c:	002a      	movs	r2, r5
 800084e:	433a      	orrs	r2, r7
 8000850:	d069      	beq.n	8000926 <__aeabi_dadd+0x33a>
 8000852:	464a      	mov	r2, r9
 8000854:	0758      	lsls	r0, r3, #29
 8000856:	08d1      	lsrs	r1, r2, #3
 8000858:	08da      	lsrs	r2, r3, #3
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	031b      	lsls	r3, r3, #12
 800085e:	4308      	orrs	r0, r1
 8000860:	421a      	tst	r2, r3
 8000862:	d007      	beq.n	8000874 <__aeabi_dadd+0x288>
 8000864:	0029      	movs	r1, r5
 8000866:	08ed      	lsrs	r5, r5, #3
 8000868:	421d      	tst	r5, r3
 800086a:	d103      	bne.n	8000874 <__aeabi_dadd+0x288>
 800086c:	002a      	movs	r2, r5
 800086e:	08ff      	lsrs	r7, r7, #3
 8000870:	0748      	lsls	r0, r1, #29
 8000872:	4338      	orrs	r0, r7
 8000874:	0f43      	lsrs	r3, r0, #29
 8000876:	00c1      	lsls	r1, r0, #3
 8000878:	075b      	lsls	r3, r3, #29
 800087a:	08c9      	lsrs	r1, r1, #3
 800087c:	4319      	orrs	r1, r3
 800087e:	0013      	movs	r3, r2
 8000880:	000a      	movs	r2, r1
 8000882:	431a      	orrs	r2, r3
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x29c>
 8000886:	e213      	b.n	8000cb0 <__aeabi_dadd+0x6c4>
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0312      	lsls	r2, r2, #12
 800088c:	4313      	orrs	r3, r2
 800088e:	031b      	lsls	r3, r3, #12
 8000890:	4a33      	ldr	r2, [pc, #204]	; (8000960 <__aeabi_dadd+0x374>)
 8000892:	0b1b      	lsrs	r3, r3, #12
 8000894:	e744      	b.n	8000720 <__aeabi_dadd+0x134>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d04b      	beq.n	8000932 <__aeabi_dadd+0x346>
 800089a:	1b8a      	subs	r2, r1, r6
 800089c:	2e00      	cmp	r6, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x2b6>
 80008a0:	e0e7      	b.n	8000a72 <__aeabi_dadd+0x486>
 80008a2:	482f      	ldr	r0, [pc, #188]	; (8000960 <__aeabi_dadd+0x374>)
 80008a4:	4281      	cmp	r1, r0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x2be>
 80008a8:	e195      	b.n	8000bd6 <__aeabi_dadd+0x5ea>
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	0400      	lsls	r0, r0, #16
 80008ae:	4303      	orrs	r3, r0
 80008b0:	2a38      	cmp	r2, #56	; 0x38
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dadd+0x2ca>
 80008b4:	e143      	b.n	8000b3e <__aeabi_dadd+0x552>
 80008b6:	2a1f      	cmp	r2, #31
 80008b8:	dd00      	ble.n	80008bc <__aeabi_dadd+0x2d0>
 80008ba:	e1db      	b.n	8000c74 <__aeabi_dadd+0x688>
 80008bc:	2020      	movs	r0, #32
 80008be:	001d      	movs	r5, r3
 80008c0:	464e      	mov	r6, r9
 80008c2:	1a80      	subs	r0, r0, r2
 80008c4:	4085      	lsls	r5, r0
 80008c6:	40d6      	lsrs	r6, r2
 80008c8:	4335      	orrs	r5, r6
 80008ca:	464e      	mov	r6, r9
 80008cc:	4086      	lsls	r6, r0
 80008ce:	0030      	movs	r0, r6
 80008d0:	40d3      	lsrs	r3, r2
 80008d2:	1e46      	subs	r6, r0, #1
 80008d4:	41b0      	sbcs	r0, r6
 80008d6:	449c      	add	ip, r3
 80008d8:	4305      	orrs	r5, r0
 80008da:	19ed      	adds	r5, r5, r7
 80008dc:	42bd      	cmp	r5, r7
 80008de:	419b      	sbcs	r3, r3
 80008e0:	425b      	negs	r3, r3
 80008e2:	4463      	add	r3, ip
 80008e4:	4698      	mov	r8, r3
 80008e6:	000e      	movs	r6, r1
 80008e8:	e07f      	b.n	80009ea <__aeabi_dadd+0x3fe>
 80008ea:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <__aeabi_dadd+0x378>)
 80008ec:	1a76      	subs	r6, r6, r1
 80008ee:	4013      	ands	r3, r2
 80008f0:	4698      	mov	r8, r3
 80008f2:	e6f5      	b.n	80006e0 <__aeabi_dadd+0xf4>
 80008f4:	0028      	movs	r0, r5
 80008f6:	f001 fc73 	bl	80021e0 <__clzsi2>
 80008fa:	0001      	movs	r1, r0
 80008fc:	3118      	adds	r1, #24
 80008fe:	291f      	cmp	r1, #31
 8000900:	dc00      	bgt.n	8000904 <__aeabi_dadd+0x318>
 8000902:	e6cf      	b.n	80006a4 <__aeabi_dadd+0xb8>
 8000904:	002b      	movs	r3, r5
 8000906:	3808      	subs	r0, #8
 8000908:	4083      	lsls	r3, r0
 800090a:	2500      	movs	r5, #0
 800090c:	e6d2      	b.n	80006b4 <__aeabi_dadd+0xc8>
 800090e:	4662      	mov	r2, ip
 8000910:	433a      	orrs	r2, r7
 8000912:	0011      	movs	r1, r2
 8000914:	1e4f      	subs	r7, r1, #1
 8000916:	41b9      	sbcs	r1, r7
 8000918:	e6ac      	b.n	8000674 <__aeabi_dadd+0x88>
 800091a:	4649      	mov	r1, r9
 800091c:	0758      	lsls	r0, r3, #29
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	4301      	orrs	r1, r0
 8000922:	08db      	lsrs	r3, r3, #3
 8000924:	e787      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000926:	4649      	mov	r1, r9
 8000928:	075a      	lsls	r2, r3, #29
 800092a:	08c9      	lsrs	r1, r1, #3
 800092c:	4311      	orrs	r1, r2
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	e7a6      	b.n	8000880 <__aeabi_dadd+0x294>
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <__aeabi_dadd+0x37c>)
 8000934:	1c70      	adds	r0, r6, #1
 8000936:	4208      	tst	r0, r1
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x350>
 800093a:	e0bb      	b.n	8000ab4 <__aeabi_dadd+0x4c8>
 800093c:	2e00      	cmp	r6, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x356>
 8000940:	e114      	b.n	8000b6c <__aeabi_dadd+0x580>
 8000942:	4649      	mov	r1, r9
 8000944:	4319      	orrs	r1, r3
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x35e>
 8000948:	e175      	b.n	8000c36 <__aeabi_dadd+0x64a>
 800094a:	0029      	movs	r1, r5
 800094c:	4339      	orrs	r1, r7
 800094e:	d000      	beq.n	8000952 <__aeabi_dadd+0x366>
 8000950:	e17e      	b.n	8000c50 <__aeabi_dadd+0x664>
 8000952:	4649      	mov	r1, r9
 8000954:	0758      	lsls	r0, r3, #29
 8000956:	08c9      	lsrs	r1, r1, #3
 8000958:	4301      	orrs	r1, r0
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e76e      	b.n	800083c <__aeabi_dadd+0x250>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	000007ff 	.word	0x000007ff
 8000964:	ff7fffff 	.word	0xff7fffff
 8000968:	000007fe 	.word	0x000007fe
 800096c:	4649      	mov	r1, r9
 800096e:	1bcd      	subs	r5, r1, r7
 8000970:	4661      	mov	r1, ip
 8000972:	1a58      	subs	r0, r3, r1
 8000974:	45a9      	cmp	r9, r5
 8000976:	4189      	sbcs	r1, r1
 8000978:	4249      	negs	r1, r1
 800097a:	4688      	mov	r8, r1
 800097c:	0001      	movs	r1, r0
 800097e:	4640      	mov	r0, r8
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	4688      	mov	r8, r1
 8000984:	0209      	lsls	r1, r1, #8
 8000986:	d500      	bpl.n	800098a <__aeabi_dadd+0x39e>
 8000988:	e0a6      	b.n	8000ad8 <__aeabi_dadd+0x4ec>
 800098a:	4641      	mov	r1, r8
 800098c:	4329      	orrs	r1, r5
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x3a6>
 8000990:	e67f      	b.n	8000692 <__aeabi_dadd+0xa6>
 8000992:	2300      	movs	r3, #0
 8000994:	2400      	movs	r4, #0
 8000996:	e751      	b.n	800083c <__aeabi_dadd+0x250>
 8000998:	4cc7      	ldr	r4, [pc, #796]	; (8000cb8 <__aeabi_dadd+0x6cc>)
 800099a:	42a1      	cmp	r1, r4
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x3b4>
 800099e:	e0c7      	b.n	8000b30 <__aeabi_dadd+0x544>
 80009a0:	2480      	movs	r4, #128	; 0x80
 80009a2:	0424      	lsls	r4, r4, #16
 80009a4:	4323      	orrs	r3, r4
 80009a6:	2a38      	cmp	r2, #56	; 0x38
 80009a8:	dc54      	bgt.n	8000a54 <__aeabi_dadd+0x468>
 80009aa:	2a1f      	cmp	r2, #31
 80009ac:	dd00      	ble.n	80009b0 <__aeabi_dadd+0x3c4>
 80009ae:	e0cc      	b.n	8000b4a <__aeabi_dadd+0x55e>
 80009b0:	2420      	movs	r4, #32
 80009b2:	4648      	mov	r0, r9
 80009b4:	1aa4      	subs	r4, r4, r2
 80009b6:	001d      	movs	r5, r3
 80009b8:	464e      	mov	r6, r9
 80009ba:	40a0      	lsls	r0, r4
 80009bc:	40d6      	lsrs	r6, r2
 80009be:	40a5      	lsls	r5, r4
 80009c0:	0004      	movs	r4, r0
 80009c2:	40d3      	lsrs	r3, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	4335      	orrs	r5, r6
 80009c8:	1e66      	subs	r6, r4, #1
 80009ca:	41b4      	sbcs	r4, r6
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	469c      	mov	ip, r3
 80009d0:	4325      	orrs	r5, r4
 80009d2:	e044      	b.n	8000a5e <__aeabi_dadd+0x472>
 80009d4:	4662      	mov	r2, ip
 80009d6:	433a      	orrs	r2, r7
 80009d8:	0015      	movs	r5, r2
 80009da:	1e6f      	subs	r7, r5, #1
 80009dc:	41bd      	sbcs	r5, r7
 80009de:	444d      	add	r5, r9
 80009e0:	454d      	cmp	r5, r9
 80009e2:	4189      	sbcs	r1, r1
 80009e4:	4249      	negs	r1, r1
 80009e6:	4688      	mov	r8, r1
 80009e8:	4498      	add	r8, r3
 80009ea:	4643      	mov	r3, r8
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_dadd+0x406>
 80009f0:	e718      	b.n	8000824 <__aeabi_dadd+0x238>
 80009f2:	4bb1      	ldr	r3, [pc, #708]	; (8000cb8 <__aeabi_dadd+0x6cc>)
 80009f4:	3601      	adds	r6, #1
 80009f6:	429e      	cmp	r6, r3
 80009f8:	d049      	beq.n	8000a8e <__aeabi_dadd+0x4a2>
 80009fa:	4642      	mov	r2, r8
 80009fc:	4baf      	ldr	r3, [pc, #700]	; (8000cbc <__aeabi_dadd+0x6d0>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	401a      	ands	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	086a      	lsrs	r2, r5, #1
 8000a06:	400d      	ands	r5, r1
 8000a08:	4315      	orrs	r5, r2
 8000a0a:	07d9      	lsls	r1, r3, #31
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	4698      	mov	r8, r3
 8000a10:	430d      	orrs	r5, r1
 8000a12:	e665      	b.n	80006e0 <__aeabi_dadd+0xf4>
 8000a14:	0018      	movs	r0, r3
 8000a16:	3e1f      	subs	r6, #31
 8000a18:	40f0      	lsrs	r0, r6
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d003      	beq.n	8000a26 <__aeabi_dadd+0x43a>
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	1a8a      	subs	r2, r1, r2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	431d      	orrs	r5, r3
 8000a26:	1e69      	subs	r1, r5, #1
 8000a28:	418d      	sbcs	r5, r1
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	4698      	mov	r8, r3
 8000a30:	4305      	orrs	r5, r0
 8000a32:	e6f7      	b.n	8000824 <__aeabi_dadd+0x238>
 8000a34:	0011      	movs	r1, r2
 8000a36:	4665      	mov	r5, ip
 8000a38:	3920      	subs	r1, #32
 8000a3a:	40cd      	lsrs	r5, r1
 8000a3c:	2a20      	cmp	r2, #32
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_dadd+0x45e>
 8000a40:	2040      	movs	r0, #64	; 0x40
 8000a42:	4661      	mov	r1, ip
 8000a44:	1a82      	subs	r2, r0, r2
 8000a46:	4091      	lsls	r1, r2
 8000a48:	430f      	orrs	r7, r1
 8000a4a:	0039      	movs	r1, r7
 8000a4c:	1e4f      	subs	r7, r1, #1
 8000a4e:	41b9      	sbcs	r1, r7
 8000a50:	4329      	orrs	r1, r5
 8000a52:	e60f      	b.n	8000674 <__aeabi_dadd+0x88>
 8000a54:	464a      	mov	r2, r9
 8000a56:	4313      	orrs	r3, r2
 8000a58:	001d      	movs	r5, r3
 8000a5a:	1e6b      	subs	r3, r5, #1
 8000a5c:	419d      	sbcs	r5, r3
 8000a5e:	1b7d      	subs	r5, r7, r5
 8000a60:	42af      	cmp	r7, r5
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4662      	mov	r2, ip
 8000a66:	425b      	negs	r3, r3
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	4654      	mov	r4, sl
 8000a6e:	000e      	movs	r6, r1
 8000a70:	e607      	b.n	8000682 <__aeabi_dadd+0x96>
 8000a72:	4648      	mov	r0, r9
 8000a74:	4318      	orrs	r0, r3
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x48e>
 8000a78:	e0b3      	b.n	8000be2 <__aeabi_dadd+0x5f6>
 8000a7a:	1e50      	subs	r0, r2, #1
 8000a7c:	2a01      	cmp	r2, #1
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x496>
 8000a80:	e10d      	b.n	8000c9e <__aeabi_dadd+0x6b2>
 8000a82:	4d8d      	ldr	r5, [pc, #564]	; (8000cb8 <__aeabi_dadd+0x6cc>)
 8000a84:	42aa      	cmp	r2, r5
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x49e>
 8000a88:	e0a5      	b.n	8000bd6 <__aeabi_dadd+0x5ea>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	e710      	b.n	80008b0 <__aeabi_dadd+0x2c4>
 8000a8e:	0032      	movs	r2, r6
 8000a90:	2300      	movs	r3, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	e644      	b.n	8000720 <__aeabi_dadd+0x134>
 8000a96:	2120      	movs	r1, #32
 8000a98:	0038      	movs	r0, r7
 8000a9a:	1a89      	subs	r1, r1, r2
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	408f      	lsls	r7, r1
 8000aa0:	408d      	lsls	r5, r1
 8000aa2:	40d0      	lsrs	r0, r2
 8000aa4:	1e79      	subs	r1, r7, #1
 8000aa6:	418f      	sbcs	r7, r1
 8000aa8:	4305      	orrs	r5, r0
 8000aaa:	433d      	orrs	r5, r7
 8000aac:	4667      	mov	r7, ip
 8000aae:	40d7      	lsrs	r7, r2
 8000ab0:	19db      	adds	r3, r3, r7
 8000ab2:	e794      	b.n	80009de <__aeabi_dadd+0x3f2>
 8000ab4:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <__aeabi_dadd+0x6cc>)
 8000ab6:	4290      	cmp	r0, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x4d0>
 8000aba:	e0ec      	b.n	8000c96 <__aeabi_dadd+0x6aa>
 8000abc:	0039      	movs	r1, r7
 8000abe:	4449      	add	r1, r9
 8000ac0:	4549      	cmp	r1, r9
 8000ac2:	4192      	sbcs	r2, r2
 8000ac4:	4463      	add	r3, ip
 8000ac6:	4252      	negs	r2, r2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	07dd      	lsls	r5, r3, #31
 8000acc:	0849      	lsrs	r1, r1, #1
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	4698      	mov	r8, r3
 8000ad2:	0006      	movs	r6, r0
 8000ad4:	430d      	orrs	r5, r1
 8000ad6:	e6a5      	b.n	8000824 <__aeabi_dadd+0x238>
 8000ad8:	464a      	mov	r2, r9
 8000ada:	1abd      	subs	r5, r7, r2
 8000adc:	42af      	cmp	r7, r5
 8000ade:	4189      	sbcs	r1, r1
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	1a5b      	subs	r3, r3, r1
 8000ae8:	4698      	mov	r8, r3
 8000aea:	4654      	mov	r4, sl
 8000aec:	e5d1      	b.n	8000692 <__aeabi_dadd+0xa6>
 8000aee:	076c      	lsls	r4, r5, #29
 8000af0:	08f9      	lsrs	r1, r7, #3
 8000af2:	4321      	orrs	r1, r4
 8000af4:	08eb      	lsrs	r3, r5, #3
 8000af6:	0004      	movs	r4, r0
 8000af8:	e69d      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000afa:	464a      	mov	r2, r9
 8000afc:	431a      	orrs	r2, r3
 8000afe:	d175      	bne.n	8000bec <__aeabi_dadd+0x600>
 8000b00:	4661      	mov	r1, ip
 8000b02:	4339      	orrs	r1, r7
 8000b04:	d114      	bne.n	8000b30 <__aeabi_dadd+0x544>
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	2400      	movs	r4, #0
 8000b0a:	031b      	lsls	r3, r3, #12
 8000b0c:	e6bc      	b.n	8000888 <__aeabi_dadd+0x29c>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	1bd5      	subs	r5, r2, r7
 8000b12:	45a9      	cmp	r9, r5
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4662      	mov	r2, ip
 8000b18:	4249      	negs	r1, r1
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	4698      	mov	r8, r3
 8000b20:	2601      	movs	r6, #1
 8000b22:	e5ae      	b.n	8000682 <__aeabi_dadd+0x96>
 8000b24:	464a      	mov	r2, r9
 8000b26:	08d1      	lsrs	r1, r2, #3
 8000b28:	075a      	lsls	r2, r3, #29
 8000b2a:	4311      	orrs	r1, r2
 8000b2c:	08db      	lsrs	r3, r3, #3
 8000b2e:	e6a7      	b.n	8000880 <__aeabi_dadd+0x294>
 8000b30:	4663      	mov	r3, ip
 8000b32:	08f9      	lsrs	r1, r7, #3
 8000b34:	075a      	lsls	r2, r3, #29
 8000b36:	4654      	mov	r4, sl
 8000b38:	4311      	orrs	r1, r2
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	e6a0      	b.n	8000880 <__aeabi_dadd+0x294>
 8000b3e:	464a      	mov	r2, r9
 8000b40:	4313      	orrs	r3, r2
 8000b42:	001d      	movs	r5, r3
 8000b44:	1e6b      	subs	r3, r5, #1
 8000b46:	419d      	sbcs	r5, r3
 8000b48:	e6c7      	b.n	80008da <__aeabi_dadd+0x2ee>
 8000b4a:	0014      	movs	r4, r2
 8000b4c:	001e      	movs	r6, r3
 8000b4e:	3c20      	subs	r4, #32
 8000b50:	40e6      	lsrs	r6, r4
 8000b52:	2a20      	cmp	r2, #32
 8000b54:	d005      	beq.n	8000b62 <__aeabi_dadd+0x576>
 8000b56:	2440      	movs	r4, #64	; 0x40
 8000b58:	1aa2      	subs	r2, r4, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4691      	mov	r9, r2
 8000b62:	464d      	mov	r5, r9
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	4335      	orrs	r5, r6
 8000b6a:	e778      	b.n	8000a5e <__aeabi_dadd+0x472>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	d000      	beq.n	8000b74 <__aeabi_dadd+0x588>
 8000b72:	e66b      	b.n	800084c <__aeabi_dadd+0x260>
 8000b74:	076b      	lsls	r3, r5, #29
 8000b76:	08f9      	lsrs	r1, r7, #3
 8000b78:	4319      	orrs	r1, r3
 8000b7a:	08eb      	lsrs	r3, r5, #3
 8000b7c:	e680      	b.n	8000880 <__aeabi_dadd+0x294>
 8000b7e:	4661      	mov	r1, ip
 8000b80:	4339      	orrs	r1, r7
 8000b82:	d054      	beq.n	8000c2e <__aeabi_dadd+0x642>
 8000b84:	4663      	mov	r3, ip
 8000b86:	08f9      	lsrs	r1, r7, #3
 8000b88:	075c      	lsls	r4, r3, #29
 8000b8a:	4321      	orrs	r1, r4
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	0004      	movs	r4, r0
 8000b90:	e654      	b.n	800083c <__aeabi_dadd+0x250>
 8000b92:	464a      	mov	r2, r9
 8000b94:	1abd      	subs	r5, r7, r2
 8000b96:	42af      	cmp	r7, r5
 8000b98:	4189      	sbcs	r1, r1
 8000b9a:	4662      	mov	r2, ip
 8000b9c:	4249      	negs	r1, r1
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	0004      	movs	r4, r0
 8000ba6:	2601      	movs	r6, #1
 8000ba8:	e56b      	b.n	8000682 <__aeabi_dadd+0x96>
 8000baa:	464a      	mov	r2, r9
 8000bac:	1bd5      	subs	r5, r2, r7
 8000bae:	45a9      	cmp	r9, r5
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4662      	mov	r2, ip
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1a9a      	subs	r2, r3, r2
 8000bb8:	1a52      	subs	r2, r2, r1
 8000bba:	4690      	mov	r8, r2
 8000bbc:	0212      	lsls	r2, r2, #8
 8000bbe:	d532      	bpl.n	8000c26 <__aeabi_dadd+0x63a>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	1abd      	subs	r5, r7, r2
 8000bc4:	42af      	cmp	r7, r5
 8000bc6:	4189      	sbcs	r1, r1
 8000bc8:	4662      	mov	r2, ip
 8000bca:	4249      	negs	r1, r1
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	0004      	movs	r4, r0
 8000bd4:	e584      	b.n	80006e0 <__aeabi_dadd+0xf4>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	08f9      	lsrs	r1, r7, #3
 8000bda:	075a      	lsls	r2, r3, #29
 8000bdc:	4311      	orrs	r1, r2
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	e64e      	b.n	8000880 <__aeabi_dadd+0x294>
 8000be2:	08f9      	lsrs	r1, r7, #3
 8000be4:	0768      	lsls	r0, r5, #29
 8000be6:	4301      	orrs	r1, r0
 8000be8:	08eb      	lsrs	r3, r5, #3
 8000bea:	e624      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000bec:	4662      	mov	r2, ip
 8000bee:	433a      	orrs	r2, r7
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x608>
 8000bf2:	e698      	b.n	8000926 <__aeabi_dadd+0x33a>
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	08d1      	lsrs	r1, r2, #3
 8000bf8:	075a      	lsls	r2, r3, #29
 8000bfa:	4311      	orrs	r1, r2
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	031b      	lsls	r3, r3, #12
 8000c02:	421a      	tst	r2, r3
 8000c04:	d008      	beq.n	8000c18 <__aeabi_dadd+0x62c>
 8000c06:	4660      	mov	r0, ip
 8000c08:	08c5      	lsrs	r5, r0, #3
 8000c0a:	421d      	tst	r5, r3
 8000c0c:	d104      	bne.n	8000c18 <__aeabi_dadd+0x62c>
 8000c0e:	4654      	mov	r4, sl
 8000c10:	002a      	movs	r2, r5
 8000c12:	08f9      	lsrs	r1, r7, #3
 8000c14:	0743      	lsls	r3, r0, #29
 8000c16:	4319      	orrs	r1, r3
 8000c18:	0f4b      	lsrs	r3, r1, #29
 8000c1a:	00c9      	lsls	r1, r1, #3
 8000c1c:	075b      	lsls	r3, r3, #29
 8000c1e:	08c9      	lsrs	r1, r1, #3
 8000c20:	4319      	orrs	r1, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	e62c      	b.n	8000880 <__aeabi_dadd+0x294>
 8000c26:	4641      	mov	r1, r8
 8000c28:	4329      	orrs	r1, r5
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x642>
 8000c2c:	e5fa      	b.n	8000824 <__aeabi_dadd+0x238>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	000a      	movs	r2, r1
 8000c32:	2400      	movs	r4, #0
 8000c34:	e602      	b.n	800083c <__aeabi_dadd+0x250>
 8000c36:	076b      	lsls	r3, r5, #29
 8000c38:	08f9      	lsrs	r1, r7, #3
 8000c3a:	4319      	orrs	r1, r3
 8000c3c:	08eb      	lsrs	r3, r5, #3
 8000c3e:	e5fd      	b.n	800083c <__aeabi_dadd+0x250>
 8000c40:	4663      	mov	r3, ip
 8000c42:	08f9      	lsrs	r1, r7, #3
 8000c44:	075b      	lsls	r3, r3, #29
 8000c46:	4319      	orrs	r1, r3
 8000c48:	4663      	mov	r3, ip
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	e617      	b.n	8000880 <__aeabi_dadd+0x294>
 8000c50:	003d      	movs	r5, r7
 8000c52:	444d      	add	r5, r9
 8000c54:	4463      	add	r3, ip
 8000c56:	454d      	cmp	r5, r9
 8000c58:	4189      	sbcs	r1, r1
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	4488      	add	r8, r1
 8000c60:	4643      	mov	r3, r8
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_dadd+0x67c>
 8000c66:	e5dd      	b.n	8000824 <__aeabi_dadd+0x238>
 8000c68:	4642      	mov	r2, r8
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <__aeabi_dadd+0x6d0>)
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	401a      	ands	r2, r3
 8000c70:	4690      	mov	r8, r2
 8000c72:	e5d7      	b.n	8000824 <__aeabi_dadd+0x238>
 8000c74:	0010      	movs	r0, r2
 8000c76:	001e      	movs	r6, r3
 8000c78:	3820      	subs	r0, #32
 8000c7a:	40c6      	lsrs	r6, r0
 8000c7c:	2a20      	cmp	r2, #32
 8000c7e:	d005      	beq.n	8000c8c <__aeabi_dadd+0x6a0>
 8000c80:	2040      	movs	r0, #64	; 0x40
 8000c82:	1a82      	subs	r2, r0, r2
 8000c84:	4093      	lsls	r3, r2
 8000c86:	464a      	mov	r2, r9
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	4691      	mov	r9, r2
 8000c8c:	464d      	mov	r5, r9
 8000c8e:	1e6b      	subs	r3, r5, #1
 8000c90:	419d      	sbcs	r5, r3
 8000c92:	4335      	orrs	r5, r6
 8000c94:	e621      	b.n	80008da <__aeabi_dadd+0x2ee>
 8000c96:	0002      	movs	r2, r0
 8000c98:	2300      	movs	r3, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e540      	b.n	8000720 <__aeabi_dadd+0x134>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	19d5      	adds	r5, r2, r7
 8000ca2:	42bd      	cmp	r5, r7
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4463      	add	r3, ip
 8000ca8:	4698      	mov	r8, r3
 8000caa:	4249      	negs	r1, r1
 8000cac:	4488      	add	r8, r1
 8000cae:	e5b3      	b.n	8000818 <__aeabi_dadd+0x22c>
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4a01      	ldr	r2, [pc, #4]	; (8000cb8 <__aeabi_dadd+0x6cc>)
 8000cb4:	000b      	movs	r3, r1
 8000cb6:	e533      	b.n	8000720 <__aeabi_dadd+0x134>
 8000cb8:	000007ff 	.word	0x000007ff
 8000cbc:	ff7fffff 	.word	0xff7fffff

08000cc0 <__aeabi_ddiv>:
 8000cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc2:	4657      	mov	r7, sl
 8000cc4:	464e      	mov	r6, r9
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	46de      	mov	lr, fp
 8000cca:	b5e0      	push	{r5, r6, r7, lr}
 8000ccc:	4681      	mov	r9, r0
 8000cce:	0005      	movs	r5, r0
 8000cd0:	030c      	lsls	r4, r1, #12
 8000cd2:	0048      	lsls	r0, r1, #1
 8000cd4:	4692      	mov	sl, r2
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	b085      	sub	sp, #20
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	0d40      	lsrs	r0, r0, #21
 8000cde:	0fce      	lsrs	r6, r1, #31
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d059      	beq.n	8000d98 <__aeabi_ddiv+0xd8>
 8000ce4:	4b87      	ldr	r3, [pc, #540]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x2c>
 8000cea:	e098      	b.n	8000e1e <__aeabi_ddiv+0x15e>
 8000cec:	0f6b      	lsrs	r3, r5, #29
 8000cee:	00e4      	lsls	r4, r4, #3
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	4b83      	ldr	r3, [pc, #524]	; (8000f08 <__aeabi_ddiv+0x248>)
 8000cfc:	00ed      	lsls	r5, r5, #3
 8000cfe:	469b      	mov	fp, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	4699      	mov	r9, r3
 8000d04:	4483      	add	fp, r0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	033c      	lsls	r4, r7, #12
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d5b      	lsrs	r3, r3, #21
 8000d12:	0fff      	lsrs	r7, r7, #31
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d067      	beq.n	8000de8 <__aeabi_ddiv+0x128>
 8000d18:	4a7a      	ldr	r2, [pc, #488]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d018      	beq.n	8000d50 <__aeabi_ddiv+0x90>
 8000d1e:	497a      	ldr	r1, [pc, #488]	; (8000f08 <__aeabi_ddiv+0x248>)
 8000d20:	0f42      	lsrs	r2, r0, #29
 8000d22:	468c      	mov	ip, r1
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	4659      	mov	r1, fp
 8000d28:	4314      	orrs	r4, r2
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	4463      	add	r3, ip
 8000d2e:	0412      	lsls	r2, r2, #16
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	4314      	orrs	r4, r2
 8000d34:	469b      	mov	fp, r3
 8000d36:	00c2      	lsls	r2, r0, #3
 8000d38:	2000      	movs	r0, #0
 8000d3a:	0033      	movs	r3, r6
 8000d3c:	407b      	eors	r3, r7
 8000d3e:	469a      	mov	sl, r3
 8000d40:	464b      	mov	r3, r9
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x88>
 8000d46:	e0ef      	b.n	8000f28 <__aeabi_ddiv+0x268>
 8000d48:	4970      	ldr	r1, [pc, #448]	; (8000f0c <__aeabi_ddiv+0x24c>)
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	58cb      	ldr	r3, [r1, r3]
 8000d4e:	469f      	mov	pc, r3
 8000d50:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <__aeabi_ddiv+0x250>)
 8000d52:	4652      	mov	r2, sl
 8000d54:	469c      	mov	ip, r3
 8000d56:	4322      	orrs	r2, r4
 8000d58:	44e3      	add	fp, ip
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_ddiv+0xa0>
 8000d5e:	e095      	b.n	8000e8c <__aeabi_ddiv+0x1cc>
 8000d60:	4649      	mov	r1, r9
 8000d62:	2302      	movs	r3, #2
 8000d64:	4319      	orrs	r1, r3
 8000d66:	4689      	mov	r9, r1
 8000d68:	2400      	movs	r4, #0
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	e7e5      	b.n	8000d3a <__aeabi_ddiv+0x7a>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	2500      	movs	r5, #0
 8000d74:	4652      	mov	r2, sl
 8000d76:	051b      	lsls	r3, r3, #20
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	07d2      	lsls	r2, r2, #31
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	0028      	movs	r0, r5
 8000d80:	0019      	movs	r1, r3
 8000d82:	b005      	add	sp, #20
 8000d84:	bcf0      	pop	{r4, r5, r6, r7}
 8000d86:	46bb      	mov	fp, r7
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	46a9      	mov	r9, r5
 8000d8c:	46a0      	mov	r8, r4
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d90:	2400      	movs	r4, #0
 8000d92:	2500      	movs	r5, #0
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000d96:	e7ed      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8000d98:	464b      	mov	r3, r9
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_ddiv+0xe2>
 8000da0:	e089      	b.n	8000eb6 <__aeabi_ddiv+0x1f6>
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0xe8>
 8000da6:	e1e0      	b.n	800116a <__aeabi_ddiv+0x4aa>
 8000da8:	0020      	movs	r0, r4
 8000daa:	f001 fa19 	bl	80021e0 <__clzsi2>
 8000dae:	0001      	movs	r1, r0
 8000db0:	0002      	movs	r2, r0
 8000db2:	390b      	subs	r1, #11
 8000db4:	231d      	movs	r3, #29
 8000db6:	1a5b      	subs	r3, r3, r1
 8000db8:	4649      	mov	r1, r9
 8000dba:	0010      	movs	r0, r2
 8000dbc:	40d9      	lsrs	r1, r3
 8000dbe:	3808      	subs	r0, #8
 8000dc0:	4084      	lsls	r4, r0
 8000dc2:	000b      	movs	r3, r1
 8000dc4:	464d      	mov	r5, r9
 8000dc6:	4323      	orrs	r3, r4
 8000dc8:	4698      	mov	r8, r3
 8000dca:	4085      	lsls	r5, r0
 8000dcc:	4851      	ldr	r0, [pc, #324]	; (8000f14 <__aeabi_ddiv+0x254>)
 8000dce:	033c      	lsls	r4, r7, #12
 8000dd0:	1a83      	subs	r3, r0, r2
 8000dd2:	469b      	mov	fp, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	007b      	lsls	r3, r7, #1
 8000ddc:	4650      	mov	r0, sl
 8000dde:	0b24      	lsrs	r4, r4, #12
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	0fff      	lsrs	r7, r7, #31
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d197      	bne.n	8000d18 <__aeabi_ddiv+0x58>
 8000de8:	4652      	mov	r2, sl
 8000dea:	4322      	orrs	r2, r4
 8000dec:	d055      	beq.n	8000e9a <__aeabi_ddiv+0x1da>
 8000dee:	2c00      	cmp	r4, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x134>
 8000df2:	e1ca      	b.n	800118a <__aeabi_ddiv+0x4ca>
 8000df4:	0020      	movs	r0, r4
 8000df6:	f001 f9f3 	bl	80021e0 <__clzsi2>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	3a0b      	subs	r2, #11
 8000dfe:	231d      	movs	r3, #29
 8000e00:	0001      	movs	r1, r0
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	4652      	mov	r2, sl
 8000e06:	3908      	subs	r1, #8
 8000e08:	40da      	lsrs	r2, r3
 8000e0a:	408c      	lsls	r4, r1
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	4652      	mov	r2, sl
 8000e10:	408a      	lsls	r2, r1
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <__aeabi_ddiv+0x258>)
 8000e14:	4458      	add	r0, fp
 8000e16:	469b      	mov	fp, r3
 8000e18:	4483      	add	fp, r0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e78d      	b.n	8000d3a <__aeabi_ddiv+0x7a>
 8000e1e:	464b      	mov	r3, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	d140      	bne.n	8000ea8 <__aeabi_ddiv+0x1e8>
 8000e26:	2308      	movs	r3, #8
 8000e28:	4699      	mov	r9, r3
 8000e2a:	3b06      	subs	r3, #6
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	4683      	mov	fp, r0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e769      	b.n	8000d08 <__aeabi_ddiv+0x48>
 8000e34:	46b2      	mov	sl, r6
 8000e36:	9b00      	ldr	r3, [sp, #0]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d0a9      	beq.n	8000d90 <__aeabi_ddiv+0xd0>
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x182>
 8000e40:	e211      	b.n	8001266 <__aeabi_ddiv+0x5a6>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d093      	beq.n	8000d6e <__aeabi_ddiv+0xae>
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <__aeabi_ddiv+0x25c>)
 8000e48:	445a      	add	r2, fp
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	dc00      	bgt.n	8000e50 <__aeabi_ddiv+0x190>
 8000e4e:	e13c      	b.n	80010ca <__aeabi_ddiv+0x40a>
 8000e50:	076b      	lsls	r3, r5, #29
 8000e52:	d000      	beq.n	8000e56 <__aeabi_ddiv+0x196>
 8000e54:	e1a7      	b.n	80011a6 <__aeabi_ddiv+0x4e6>
 8000e56:	08ed      	lsrs	r5, r5, #3
 8000e58:	4643      	mov	r3, r8
 8000e5a:	01db      	lsls	r3, r3, #7
 8000e5c:	d506      	bpl.n	8000e6c <__aeabi_ddiv+0x1ac>
 8000e5e:	4642      	mov	r2, r8
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <__aeabi_ddiv+0x260>)
 8000e62:	401a      	ands	r2, r3
 8000e64:	4690      	mov	r8, r2
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	445a      	add	r2, fp
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <__aeabi_ddiv+0x264>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dc8e      	bgt.n	8000d90 <__aeabi_ddiv+0xd0>
 8000e72:	4643      	mov	r3, r8
 8000e74:	0552      	lsls	r2, r2, #21
 8000e76:	0758      	lsls	r0, r3, #29
 8000e78:	025c      	lsls	r4, r3, #9
 8000e7a:	4305      	orrs	r5, r0
 8000e7c:	0b24      	lsrs	r4, r4, #12
 8000e7e:	0d53      	lsrs	r3, r2, #21
 8000e80:	e778      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8000e82:	46ba      	mov	sl, r7
 8000e84:	46a0      	mov	r8, r4
 8000e86:	0015      	movs	r5, r2
 8000e88:	9000      	str	r0, [sp, #0]
 8000e8a:	e7d4      	b.n	8000e36 <__aeabi_ddiv+0x176>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	2303      	movs	r3, #3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	4691      	mov	r9, r2
 8000e94:	2003      	movs	r0, #3
 8000e96:	4652      	mov	r2, sl
 8000e98:	e74f      	b.n	8000d3a <__aeabi_ddiv+0x7a>
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	4319      	orrs	r1, r3
 8000ea0:	4689      	mov	r9, r1
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e748      	b.n	8000d3a <__aeabi_ddiv+0x7a>
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	4699      	mov	r9, r3
 8000eac:	3b09      	subs	r3, #9
 8000eae:	46a0      	mov	r8, r4
 8000eb0:	4683      	mov	fp, r0
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	e728      	b.n	8000d08 <__aeabi_ddiv+0x48>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	4699      	mov	r9, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	469b      	mov	fp, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e720      	b.n	8000d08 <__aeabi_ddiv+0x48>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2480      	movs	r4, #128	; 0x80
 8000eca:	469a      	mov	sl, r3
 8000ecc:	2500      	movs	r5, #0
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000ed0:	0324      	lsls	r4, r4, #12
 8000ed2:	e74f      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	031b      	lsls	r3, r3, #12
 8000eda:	4219      	tst	r1, r3
 8000edc:	d008      	beq.n	8000ef0 <__aeabi_ddiv+0x230>
 8000ede:	421c      	tst	r4, r3
 8000ee0:	d106      	bne.n	8000ef0 <__aeabi_ddiv+0x230>
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	0324      	lsls	r4, r4, #12
 8000ee6:	46ba      	mov	sl, r7
 8000ee8:	0015      	movs	r5, r2
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000eec:	0b24      	lsrs	r4, r4, #12
 8000eee:	e741      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8000ef0:	2480      	movs	r4, #128	; 0x80
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	0324      	lsls	r4, r4, #12
 8000ef6:	431c      	orrs	r4, r3
 8000ef8:	0324      	lsls	r4, r4, #12
 8000efa:	46b2      	mov	sl, r6
 8000efc:	4b01      	ldr	r3, [pc, #4]	; (8000f04 <__aeabi_ddiv+0x244>)
 8000efe:	0b24      	lsrs	r4, r4, #12
 8000f00:	e738      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000007ff 	.word	0x000007ff
 8000f08:	fffffc01 	.word	0xfffffc01
 8000f0c:	0800d008 	.word	0x0800d008
 8000f10:	fffff801 	.word	0xfffff801
 8000f14:	fffffc0d 	.word	0xfffffc0d
 8000f18:	000003f3 	.word	0x000003f3
 8000f1c:	000003ff 	.word	0x000003ff
 8000f20:	feffffff 	.word	0xfeffffff
 8000f24:	000007fe 	.word	0x000007fe
 8000f28:	4544      	cmp	r4, r8
 8000f2a:	d200      	bcs.n	8000f2e <__aeabi_ddiv+0x26e>
 8000f2c:	e116      	b.n	800115c <__aeabi_ddiv+0x49c>
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0x272>
 8000f30:	e111      	b.n	8001156 <__aeabi_ddiv+0x496>
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
 8000f36:	469c      	mov	ip, r3
 8000f38:	002e      	movs	r6, r5
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	44e3      	add	fp, ip
 8000f40:	0223      	lsls	r3, r4, #8
 8000f42:	0e14      	lsrs	r4, r2, #24
 8000f44:	431c      	orrs	r4, r3
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	4699      	mov	r9, r3
 8000f4a:	0423      	lsls	r3, r4, #16
 8000f4c:	0c1f      	lsrs	r7, r3, #16
 8000f4e:	0212      	lsls	r2, r2, #8
 8000f50:	4649      	mov	r1, r9
 8000f52:	9200      	str	r2, [sp, #0]
 8000f54:	9701      	str	r7, [sp, #4]
 8000f56:	f7ff f983 	bl	8000260 <__aeabi_uidivmod>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	437a      	muls	r2, r7
 8000f5e:	040b      	lsls	r3, r1, #16
 8000f60:	0c31      	lsrs	r1, r6, #16
 8000f62:	4680      	mov	r8, r0
 8000f64:	4319      	orrs	r1, r3
 8000f66:	428a      	cmp	r2, r1
 8000f68:	d90b      	bls.n	8000f82 <__aeabi_ddiv+0x2c2>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	469c      	mov	ip, r3
 8000f70:	1909      	adds	r1, r1, r4
 8000f72:	44e0      	add	r8, ip
 8000f74:	428c      	cmp	r4, r1
 8000f76:	d804      	bhi.n	8000f82 <__aeabi_ddiv+0x2c2>
 8000f78:	428a      	cmp	r2, r1
 8000f7a:	d902      	bls.n	8000f82 <__aeabi_ddiv+0x2c2>
 8000f7c:	1e83      	subs	r3, r0, #2
 8000f7e:	4698      	mov	r8, r3
 8000f80:	1909      	adds	r1, r1, r4
 8000f82:	1a88      	subs	r0, r1, r2
 8000f84:	4649      	mov	r1, r9
 8000f86:	f7ff f96b 	bl	8000260 <__aeabi_uidivmod>
 8000f8a:	0409      	lsls	r1, r1, #16
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	0431      	lsls	r1, r6, #16
 8000f90:	4666      	mov	r6, ip
 8000f92:	9a01      	ldr	r2, [sp, #4]
 8000f94:	0c09      	lsrs	r1, r1, #16
 8000f96:	4342      	muls	r2, r0
 8000f98:	0003      	movs	r3, r0
 8000f9a:	4331      	orrs	r1, r6
 8000f9c:	428a      	cmp	r2, r1
 8000f9e:	d904      	bls.n	8000faa <__aeabi_ddiv+0x2ea>
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x2ea>
 8000fa8:	e111      	b.n	80011ce <__aeabi_ddiv+0x50e>
 8000faa:	1a89      	subs	r1, r1, r2
 8000fac:	4642      	mov	r2, r8
 8000fae:	9e00      	ldr	r6, [sp, #0]
 8000fb0:	0412      	lsls	r2, r2, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	0c33      	lsrs	r3, r6, #16
 8000fb6:	001f      	movs	r7, r3
 8000fb8:	0c10      	lsrs	r0, r2, #16
 8000fba:	4690      	mov	r8, r2
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	0413      	lsls	r3, r2, #16
 8000fc0:	0432      	lsls	r2, r6, #16
 8000fc2:	0c16      	lsrs	r6, r2, #16
 8000fc4:	0032      	movs	r2, r6
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	435a      	muls	r2, r3
 8000fca:	9603      	str	r6, [sp, #12]
 8000fcc:	437b      	muls	r3, r7
 8000fce:	4346      	muls	r6, r0
 8000fd0:	4378      	muls	r0, r7
 8000fd2:	0c17      	lsrs	r7, r2, #16
 8000fd4:	46bc      	mov	ip, r7
 8000fd6:	199b      	adds	r3, r3, r6
 8000fd8:	4463      	add	r3, ip
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	d903      	bls.n	8000fe6 <__aeabi_ddiv+0x326>
 8000fde:	2680      	movs	r6, #128	; 0x80
 8000fe0:	0276      	lsls	r6, r6, #9
 8000fe2:	46b4      	mov	ip, r6
 8000fe4:	4460      	add	r0, ip
 8000fe6:	0c1e      	lsrs	r6, r3, #16
 8000fe8:	1830      	adds	r0, r6, r0
 8000fea:	0416      	lsls	r6, r2, #16
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c36      	lsrs	r6, r6, #16
 8000ff0:	199e      	adds	r6, r3, r6
 8000ff2:	4281      	cmp	r1, r0
 8000ff4:	d200      	bcs.n	8000ff8 <__aeabi_ddiv+0x338>
 8000ff6:	e09c      	b.n	8001132 <__aeabi_ddiv+0x472>
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_ddiv+0x33c>
 8000ffa:	e097      	b.n	800112c <__aeabi_ddiv+0x46c>
 8000ffc:	1bae      	subs	r6, r5, r6
 8000ffe:	1a09      	subs	r1, r1, r0
 8001000:	42b5      	cmp	r5, r6
 8001002:	4180      	sbcs	r0, r0
 8001004:	4240      	negs	r0, r0
 8001006:	1a08      	subs	r0, r1, r0
 8001008:	4284      	cmp	r4, r0
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x34e>
 800100c:	e111      	b.n	8001232 <__aeabi_ddiv+0x572>
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f926 	bl	8000260 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	040b      	lsls	r3, r1, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0c31      	lsrs	r1, r6, #16
 800101c:	0005      	movs	r5, r0
 800101e:	4319      	orrs	r1, r3
 8001020:	428a      	cmp	r2, r1
 8001022:	d907      	bls.n	8001034 <__aeabi_ddiv+0x374>
 8001024:	1909      	adds	r1, r1, r4
 8001026:	3d01      	subs	r5, #1
 8001028:	428c      	cmp	r4, r1
 800102a:	d803      	bhi.n	8001034 <__aeabi_ddiv+0x374>
 800102c:	428a      	cmp	r2, r1
 800102e:	d901      	bls.n	8001034 <__aeabi_ddiv+0x374>
 8001030:	1e85      	subs	r5, r0, #2
 8001032:	1909      	adds	r1, r1, r4
 8001034:	1a88      	subs	r0, r1, r2
 8001036:	4649      	mov	r1, r9
 8001038:	f7ff f912 	bl	8000260 <__aeabi_uidivmod>
 800103c:	0409      	lsls	r1, r1, #16
 800103e:	468c      	mov	ip, r1
 8001040:	0431      	lsls	r1, r6, #16
 8001042:	4666      	mov	r6, ip
 8001044:	9a01      	ldr	r2, [sp, #4]
 8001046:	0c09      	lsrs	r1, r1, #16
 8001048:	4342      	muls	r2, r0
 800104a:	0003      	movs	r3, r0
 800104c:	4331      	orrs	r1, r6
 800104e:	428a      	cmp	r2, r1
 8001050:	d907      	bls.n	8001062 <__aeabi_ddiv+0x3a2>
 8001052:	1909      	adds	r1, r1, r4
 8001054:	3b01      	subs	r3, #1
 8001056:	428c      	cmp	r4, r1
 8001058:	d803      	bhi.n	8001062 <__aeabi_ddiv+0x3a2>
 800105a:	428a      	cmp	r2, r1
 800105c:	d901      	bls.n	8001062 <__aeabi_ddiv+0x3a2>
 800105e:	1e83      	subs	r3, r0, #2
 8001060:	1909      	adds	r1, r1, r4
 8001062:	9e03      	ldr	r6, [sp, #12]
 8001064:	1a89      	subs	r1, r1, r2
 8001066:	0032      	movs	r2, r6
 8001068:	042d      	lsls	r5, r5, #16
 800106a:	431d      	orrs	r5, r3
 800106c:	9f02      	ldr	r7, [sp, #8]
 800106e:	042b      	lsls	r3, r5, #16
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	435a      	muls	r2, r3
 8001074:	437b      	muls	r3, r7
 8001076:	469c      	mov	ip, r3
 8001078:	0c28      	lsrs	r0, r5, #16
 800107a:	4346      	muls	r6, r0
 800107c:	0c13      	lsrs	r3, r2, #16
 800107e:	44b4      	add	ip, r6
 8001080:	4463      	add	r3, ip
 8001082:	4378      	muls	r0, r7
 8001084:	429e      	cmp	r6, r3
 8001086:	d903      	bls.n	8001090 <__aeabi_ddiv+0x3d0>
 8001088:	2680      	movs	r6, #128	; 0x80
 800108a:	0276      	lsls	r6, r6, #9
 800108c:	46b4      	mov	ip, r6
 800108e:	4460      	add	r0, ip
 8001090:	0c1e      	lsrs	r6, r3, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	0c12      	lsrs	r2, r2, #16
 8001098:	1830      	adds	r0, r6, r0
 800109a:	189b      	adds	r3, r3, r2
 800109c:	4281      	cmp	r1, r0
 800109e:	d306      	bcc.n	80010ae <__aeabi_ddiv+0x3ee>
 80010a0:	d002      	beq.n	80010a8 <__aeabi_ddiv+0x3e8>
 80010a2:	2301      	movs	r3, #1
 80010a4:	431d      	orrs	r5, r3
 80010a6:	e6ce      	b.n	8000e46 <__aeabi_ddiv+0x186>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x3ee>
 80010ac:	e6cb      	b.n	8000e46 <__aeabi_ddiv+0x186>
 80010ae:	1861      	adds	r1, r4, r1
 80010b0:	1e6e      	subs	r6, r5, #1
 80010b2:	42a1      	cmp	r1, r4
 80010b4:	d200      	bcs.n	80010b8 <__aeabi_ddiv+0x3f8>
 80010b6:	e0a4      	b.n	8001202 <__aeabi_ddiv+0x542>
 80010b8:	4281      	cmp	r1, r0
 80010ba:	d200      	bcs.n	80010be <__aeabi_ddiv+0x3fe>
 80010bc:	e0c9      	b.n	8001252 <__aeabi_ddiv+0x592>
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x402>
 80010c0:	e0d9      	b.n	8001276 <__aeabi_ddiv+0x5b6>
 80010c2:	0035      	movs	r5, r6
 80010c4:	e7ed      	b.n	80010a2 <__aeabi_ddiv+0x3e2>
 80010c6:	2501      	movs	r5, #1
 80010c8:	426d      	negs	r5, r5
 80010ca:	2101      	movs	r1, #1
 80010cc:	1a89      	subs	r1, r1, r2
 80010ce:	2938      	cmp	r1, #56	; 0x38
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_ddiv+0x414>
 80010d2:	e64c      	b.n	8000d6e <__aeabi_ddiv+0xae>
 80010d4:	291f      	cmp	r1, #31
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x41a>
 80010d8:	e07f      	b.n	80011da <__aeabi_ddiv+0x51a>
 80010da:	231f      	movs	r3, #31
 80010dc:	425b      	negs	r3, r3
 80010de:	1a9a      	subs	r2, r3, r2
 80010e0:	4643      	mov	r3, r8
 80010e2:	40d3      	lsrs	r3, r2
 80010e4:	2920      	cmp	r1, #32
 80010e6:	d004      	beq.n	80010f2 <__aeabi_ddiv+0x432>
 80010e8:	4644      	mov	r4, r8
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <__aeabi_ddiv+0x5c0>)
 80010ec:	445a      	add	r2, fp
 80010ee:	4094      	lsls	r4, r2
 80010f0:	4325      	orrs	r5, r4
 80010f2:	1e6a      	subs	r2, r5, #1
 80010f4:	4195      	sbcs	r5, r2
 80010f6:	2207      	movs	r2, #7
 80010f8:	432b      	orrs	r3, r5
 80010fa:	0015      	movs	r5, r2
 80010fc:	2400      	movs	r4, #0
 80010fe:	401d      	ands	r5, r3
 8001100:	421a      	tst	r2, r3
 8001102:	d100      	bne.n	8001106 <__aeabi_ddiv+0x446>
 8001104:	e0a1      	b.n	800124a <__aeabi_ddiv+0x58a>
 8001106:	220f      	movs	r2, #15
 8001108:	2400      	movs	r4, #0
 800110a:	401a      	ands	r2, r3
 800110c:	2a04      	cmp	r2, #4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x452>
 8001110:	e098      	b.n	8001244 <__aeabi_ddiv+0x584>
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	429a      	cmp	r2, r3
 8001116:	419b      	sbcs	r3, r3
 8001118:	425b      	negs	r3, r3
 800111a:	18e4      	adds	r4, r4, r3
 800111c:	0013      	movs	r3, r2
 800111e:	0222      	lsls	r2, r4, #8
 8001120:	d400      	bmi.n	8001124 <__aeabi_ddiv+0x464>
 8001122:	e08f      	b.n	8001244 <__aeabi_ddiv+0x584>
 8001124:	2301      	movs	r3, #1
 8001126:	2400      	movs	r4, #0
 8001128:	2500      	movs	r5, #0
 800112a:	e623      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 800112c:	42b5      	cmp	r5, r6
 800112e:	d300      	bcc.n	8001132 <__aeabi_ddiv+0x472>
 8001130:	e764      	b.n	8000ffc <__aeabi_ddiv+0x33c>
 8001132:	4643      	mov	r3, r8
 8001134:	1e5a      	subs	r2, r3, #1
 8001136:	9b00      	ldr	r3, [sp, #0]
 8001138:	469c      	mov	ip, r3
 800113a:	4465      	add	r5, ip
 800113c:	001f      	movs	r7, r3
 800113e:	429d      	cmp	r5, r3
 8001140:	419b      	sbcs	r3, r3
 8001142:	425b      	negs	r3, r3
 8001144:	191b      	adds	r3, r3, r4
 8001146:	18c9      	adds	r1, r1, r3
 8001148:	428c      	cmp	r4, r1
 800114a:	d23a      	bcs.n	80011c2 <__aeabi_ddiv+0x502>
 800114c:	4288      	cmp	r0, r1
 800114e:	d863      	bhi.n	8001218 <__aeabi_ddiv+0x558>
 8001150:	d060      	beq.n	8001214 <__aeabi_ddiv+0x554>
 8001152:	4690      	mov	r8, r2
 8001154:	e752      	b.n	8000ffc <__aeabi_ddiv+0x33c>
 8001156:	42aa      	cmp	r2, r5
 8001158:	d900      	bls.n	800115c <__aeabi_ddiv+0x49c>
 800115a:	e6ea      	b.n	8000f32 <__aeabi_ddiv+0x272>
 800115c:	4643      	mov	r3, r8
 800115e:	07de      	lsls	r6, r3, #31
 8001160:	0858      	lsrs	r0, r3, #1
 8001162:	086b      	lsrs	r3, r5, #1
 8001164:	431e      	orrs	r6, r3
 8001166:	07ed      	lsls	r5, r5, #31
 8001168:	e6ea      	b.n	8000f40 <__aeabi_ddiv+0x280>
 800116a:	4648      	mov	r0, r9
 800116c:	f001 f838 	bl	80021e0 <__clzsi2>
 8001170:	0001      	movs	r1, r0
 8001172:	0002      	movs	r2, r0
 8001174:	3115      	adds	r1, #21
 8001176:	3220      	adds	r2, #32
 8001178:	291c      	cmp	r1, #28
 800117a:	dc00      	bgt.n	800117e <__aeabi_ddiv+0x4be>
 800117c:	e61a      	b.n	8000db4 <__aeabi_ddiv+0xf4>
 800117e:	464b      	mov	r3, r9
 8001180:	3808      	subs	r0, #8
 8001182:	4083      	lsls	r3, r0
 8001184:	2500      	movs	r5, #0
 8001186:	4698      	mov	r8, r3
 8001188:	e620      	b.n	8000dcc <__aeabi_ddiv+0x10c>
 800118a:	f001 f829 	bl	80021e0 <__clzsi2>
 800118e:	0003      	movs	r3, r0
 8001190:	001a      	movs	r2, r3
 8001192:	3215      	adds	r2, #21
 8001194:	3020      	adds	r0, #32
 8001196:	2a1c      	cmp	r2, #28
 8001198:	dc00      	bgt.n	800119c <__aeabi_ddiv+0x4dc>
 800119a:	e630      	b.n	8000dfe <__aeabi_ddiv+0x13e>
 800119c:	4654      	mov	r4, sl
 800119e:	3b08      	subs	r3, #8
 80011a0:	2200      	movs	r2, #0
 80011a2:	409c      	lsls	r4, r3
 80011a4:	e635      	b.n	8000e12 <__aeabi_ddiv+0x152>
 80011a6:	230f      	movs	r3, #15
 80011a8:	402b      	ands	r3, r5
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x4f0>
 80011ae:	e652      	b.n	8000e56 <__aeabi_ddiv+0x196>
 80011b0:	2305      	movs	r3, #5
 80011b2:	425b      	negs	r3, r3
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	419b      	sbcs	r3, r3
 80011b8:	3504      	adds	r5, #4
 80011ba:	425b      	negs	r3, r3
 80011bc:	08ed      	lsrs	r5, r5, #3
 80011be:	4498      	add	r8, r3
 80011c0:	e64a      	b.n	8000e58 <__aeabi_ddiv+0x198>
 80011c2:	428c      	cmp	r4, r1
 80011c4:	d1c5      	bne.n	8001152 <__aeabi_ddiv+0x492>
 80011c6:	42af      	cmp	r7, r5
 80011c8:	d9c0      	bls.n	800114c <__aeabi_ddiv+0x48c>
 80011ca:	4690      	mov	r8, r2
 80011cc:	e716      	b.n	8000ffc <__aeabi_ddiv+0x33c>
 80011ce:	428a      	cmp	r2, r1
 80011d0:	d800      	bhi.n	80011d4 <__aeabi_ddiv+0x514>
 80011d2:	e6ea      	b.n	8000faa <__aeabi_ddiv+0x2ea>
 80011d4:	1e83      	subs	r3, r0, #2
 80011d6:	1909      	adds	r1, r1, r4
 80011d8:	e6e7      	b.n	8000faa <__aeabi_ddiv+0x2ea>
 80011da:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <__aeabi_ddiv+0x5c4>)
 80011dc:	0028      	movs	r0, r5
 80011de:	445a      	add	r2, fp
 80011e0:	4643      	mov	r3, r8
 80011e2:	4095      	lsls	r5, r2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	40c8      	lsrs	r0, r1
 80011e8:	1e6a      	subs	r2, r5, #1
 80011ea:	4195      	sbcs	r5, r2
 80011ec:	4644      	mov	r4, r8
 80011ee:	4303      	orrs	r3, r0
 80011f0:	432b      	orrs	r3, r5
 80011f2:	40cc      	lsrs	r4, r1
 80011f4:	075a      	lsls	r2, r3, #29
 80011f6:	d092      	beq.n	800111e <__aeabi_ddiv+0x45e>
 80011f8:	220f      	movs	r2, #15
 80011fa:	401a      	ands	r2, r3
 80011fc:	2a04      	cmp	r2, #4
 80011fe:	d188      	bne.n	8001112 <__aeabi_ddiv+0x452>
 8001200:	e78d      	b.n	800111e <__aeabi_ddiv+0x45e>
 8001202:	0035      	movs	r5, r6
 8001204:	4281      	cmp	r1, r0
 8001206:	d000      	beq.n	800120a <__aeabi_ddiv+0x54a>
 8001208:	e74b      	b.n	80010a2 <__aeabi_ddiv+0x3e2>
 800120a:	9a00      	ldr	r2, [sp, #0]
 800120c:	4293      	cmp	r3, r2
 800120e:	d000      	beq.n	8001212 <__aeabi_ddiv+0x552>
 8001210:	e747      	b.n	80010a2 <__aeabi_ddiv+0x3e2>
 8001212:	e618      	b.n	8000e46 <__aeabi_ddiv+0x186>
 8001214:	42ae      	cmp	r6, r5
 8001216:	d99c      	bls.n	8001152 <__aeabi_ddiv+0x492>
 8001218:	2302      	movs	r3, #2
 800121a:	425b      	negs	r3, r3
 800121c:	469c      	mov	ip, r3
 800121e:	9b00      	ldr	r3, [sp, #0]
 8001220:	44e0      	add	r8, ip
 8001222:	469c      	mov	ip, r3
 8001224:	4465      	add	r5, ip
 8001226:	429d      	cmp	r5, r3
 8001228:	419b      	sbcs	r3, r3
 800122a:	425b      	negs	r3, r3
 800122c:	191b      	adds	r3, r3, r4
 800122e:	18c9      	adds	r1, r1, r3
 8001230:	e6e4      	b.n	8000ffc <__aeabi_ddiv+0x33c>
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <__aeabi_ddiv+0x5c8>)
 8001234:	445a      	add	r2, fp
 8001236:	2a00      	cmp	r2, #0
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x57c>
 800123a:	e744      	b.n	80010c6 <__aeabi_ddiv+0x406>
 800123c:	2301      	movs	r3, #1
 800123e:	2500      	movs	r5, #0
 8001240:	4498      	add	r8, r3
 8001242:	e609      	b.n	8000e58 <__aeabi_ddiv+0x198>
 8001244:	0765      	lsls	r5, r4, #29
 8001246:	0264      	lsls	r4, r4, #9
 8001248:	0b24      	lsrs	r4, r4, #12
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	431d      	orrs	r5, r3
 800124e:	2300      	movs	r3, #0
 8001250:	e590      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8001252:	9e00      	ldr	r6, [sp, #0]
 8001254:	3d02      	subs	r5, #2
 8001256:	0072      	lsls	r2, r6, #1
 8001258:	42b2      	cmp	r2, r6
 800125a:	41bf      	sbcs	r7, r7
 800125c:	427f      	negs	r7, r7
 800125e:	193c      	adds	r4, r7, r4
 8001260:	1909      	adds	r1, r1, r4
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	e7ce      	b.n	8001204 <__aeabi_ddiv+0x544>
 8001266:	2480      	movs	r4, #128	; 0x80
 8001268:	4643      	mov	r3, r8
 800126a:	0324      	lsls	r4, r4, #12
 800126c:	431c      	orrs	r4, r3
 800126e:	0324      	lsls	r4, r4, #12
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <__aeabi_ddiv+0x5cc>)
 8001272:	0b24      	lsrs	r4, r4, #12
 8001274:	e57e      	b.n	8000d74 <__aeabi_ddiv+0xb4>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3ea      	bcc.n	8001252 <__aeabi_ddiv+0x592>
 800127c:	0035      	movs	r5, r6
 800127e:	e7c4      	b.n	800120a <__aeabi_ddiv+0x54a>
 8001280:	0000043e 	.word	0x0000043e
 8001284:	0000041e 	.word	0x0000041e
 8001288:	000003ff 	.word	0x000003ff
 800128c:	000007ff 	.word	0x000007ff

08001290 <__eqdf2>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	464f      	mov	r7, r9
 8001294:	4646      	mov	r6, r8
 8001296:	46d6      	mov	lr, sl
 8001298:	4694      	mov	ip, r2
 800129a:	4691      	mov	r9, r2
 800129c:	031a      	lsls	r2, r3, #12
 800129e:	0b12      	lsrs	r2, r2, #12
 80012a0:	4d18      	ldr	r5, [pc, #96]	; (8001304 <__eqdf2+0x74>)
 80012a2:	b5c0      	push	{r6, r7, lr}
 80012a4:	004c      	lsls	r4, r1, #1
 80012a6:	030f      	lsls	r7, r1, #12
 80012a8:	4692      	mov	sl, r2
 80012aa:	005a      	lsls	r2, r3, #1
 80012ac:	0006      	movs	r6, r0
 80012ae:	4680      	mov	r8, r0
 80012b0:	0b3f      	lsrs	r7, r7, #12
 80012b2:	2001      	movs	r0, #1
 80012b4:	0d64      	lsrs	r4, r4, #21
 80012b6:	0fc9      	lsrs	r1, r1, #31
 80012b8:	0d52      	lsrs	r2, r2, #21
 80012ba:	0fdb      	lsrs	r3, r3, #31
 80012bc:	42ac      	cmp	r4, r5
 80012be:	d00a      	beq.n	80012d6 <__eqdf2+0x46>
 80012c0:	42aa      	cmp	r2, r5
 80012c2:	d003      	beq.n	80012cc <__eqdf2+0x3c>
 80012c4:	4294      	cmp	r4, r2
 80012c6:	d101      	bne.n	80012cc <__eqdf2+0x3c>
 80012c8:	4557      	cmp	r7, sl
 80012ca:	d00d      	beq.n	80012e8 <__eqdf2+0x58>
 80012cc:	bce0      	pop	{r5, r6, r7}
 80012ce:	46ba      	mov	sl, r7
 80012d0:	46b1      	mov	r9, r6
 80012d2:	46a8      	mov	r8, r5
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	003d      	movs	r5, r7
 80012d8:	4335      	orrs	r5, r6
 80012da:	d1f7      	bne.n	80012cc <__eqdf2+0x3c>
 80012dc:	42a2      	cmp	r2, r4
 80012de:	d1f5      	bne.n	80012cc <__eqdf2+0x3c>
 80012e0:	4652      	mov	r2, sl
 80012e2:	4665      	mov	r5, ip
 80012e4:	432a      	orrs	r2, r5
 80012e6:	d1f1      	bne.n	80012cc <__eqdf2+0x3c>
 80012e8:	2001      	movs	r0, #1
 80012ea:	45c8      	cmp	r8, r9
 80012ec:	d1ee      	bne.n	80012cc <__eqdf2+0x3c>
 80012ee:	4299      	cmp	r1, r3
 80012f0:	d006      	beq.n	8001300 <__eqdf2+0x70>
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d1ea      	bne.n	80012cc <__eqdf2+0x3c>
 80012f6:	433e      	orrs	r6, r7
 80012f8:	0030      	movs	r0, r6
 80012fa:	1e46      	subs	r6, r0, #1
 80012fc:	41b0      	sbcs	r0, r6
 80012fe:	e7e5      	b.n	80012cc <__eqdf2+0x3c>
 8001300:	2000      	movs	r0, #0
 8001302:	e7e3      	b.n	80012cc <__eqdf2+0x3c>
 8001304:	000007ff 	.word	0x000007ff

08001308 <__gedf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	464e      	mov	r6, r9
 800130c:	4645      	mov	r5, r8
 800130e:	4657      	mov	r7, sl
 8001310:	46de      	mov	lr, fp
 8001312:	0004      	movs	r4, r0
 8001314:	0018      	movs	r0, r3
 8001316:	b5e0      	push	{r5, r6, r7, lr}
 8001318:	0016      	movs	r6, r2
 800131a:	031b      	lsls	r3, r3, #12
 800131c:	0b1b      	lsrs	r3, r3, #12
 800131e:	4d32      	ldr	r5, [pc, #200]	; (80013e8 <__gedf2+0xe0>)
 8001320:	030f      	lsls	r7, r1, #12
 8001322:	004a      	lsls	r2, r1, #1
 8001324:	4699      	mov	r9, r3
 8001326:	0043      	lsls	r3, r0, #1
 8001328:	46a4      	mov	ip, r4
 800132a:	46b0      	mov	r8, r6
 800132c:	0b3f      	lsrs	r7, r7, #12
 800132e:	0d52      	lsrs	r2, r2, #21
 8001330:	0fc9      	lsrs	r1, r1, #31
 8001332:	0d5b      	lsrs	r3, r3, #21
 8001334:	0fc0      	lsrs	r0, r0, #31
 8001336:	42aa      	cmp	r2, r5
 8001338:	d029      	beq.n	800138e <__gedf2+0x86>
 800133a:	42ab      	cmp	r3, r5
 800133c:	d018      	beq.n	8001370 <__gedf2+0x68>
 800133e:	2a00      	cmp	r2, #0
 8001340:	d12a      	bne.n	8001398 <__gedf2+0x90>
 8001342:	433c      	orrs	r4, r7
 8001344:	46a3      	mov	fp, r4
 8001346:	4265      	negs	r5, r4
 8001348:	4165      	adcs	r5, r4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <__gedf2+0x4c>
 800134e:	464c      	mov	r4, r9
 8001350:	4326      	orrs	r6, r4
 8001352:	d027      	beq.n	80013a4 <__gedf2+0x9c>
 8001354:	2d00      	cmp	r5, #0
 8001356:	d115      	bne.n	8001384 <__gedf2+0x7c>
 8001358:	4281      	cmp	r1, r0
 800135a:	d028      	beq.n	80013ae <__gedf2+0xa6>
 800135c:	2002      	movs	r0, #2
 800135e:	3901      	subs	r1, #1
 8001360:	4008      	ands	r0, r1
 8001362:	3801      	subs	r0, #1
 8001364:	bcf0      	pop	{r4, r5, r6, r7}
 8001366:	46bb      	mov	fp, r7
 8001368:	46b2      	mov	sl, r6
 800136a:	46a9      	mov	r9, r5
 800136c:	46a0      	mov	r8, r4
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	464d      	mov	r5, r9
 8001372:	432e      	orrs	r6, r5
 8001374:	d12f      	bne.n	80013d6 <__gedf2+0xce>
 8001376:	2a00      	cmp	r2, #0
 8001378:	d1ee      	bne.n	8001358 <__gedf2+0x50>
 800137a:	433c      	orrs	r4, r7
 800137c:	4265      	negs	r5, r4
 800137e:	4165      	adcs	r5, r4
 8001380:	2d00      	cmp	r5, #0
 8001382:	d0e9      	beq.n	8001358 <__gedf2+0x50>
 8001384:	2800      	cmp	r0, #0
 8001386:	d1ed      	bne.n	8001364 <__gedf2+0x5c>
 8001388:	2001      	movs	r0, #1
 800138a:	4240      	negs	r0, r0
 800138c:	e7ea      	b.n	8001364 <__gedf2+0x5c>
 800138e:	003d      	movs	r5, r7
 8001390:	4325      	orrs	r5, r4
 8001392:	d120      	bne.n	80013d6 <__gedf2+0xce>
 8001394:	4293      	cmp	r3, r2
 8001396:	d0eb      	beq.n	8001370 <__gedf2+0x68>
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1dd      	bne.n	8001358 <__gedf2+0x50>
 800139c:	464c      	mov	r4, r9
 800139e:	4326      	orrs	r6, r4
 80013a0:	d1da      	bne.n	8001358 <__gedf2+0x50>
 80013a2:	e7db      	b.n	800135c <__gedf2+0x54>
 80013a4:	465b      	mov	r3, fp
 80013a6:	2000      	movs	r0, #0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0db      	beq.n	8001364 <__gedf2+0x5c>
 80013ac:	e7d6      	b.n	800135c <__gedf2+0x54>
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc0a      	bgt.n	80013c8 <__gedf2+0xc0>
 80013b2:	dbe7      	blt.n	8001384 <__gedf2+0x7c>
 80013b4:	454f      	cmp	r7, r9
 80013b6:	d8d1      	bhi.n	800135c <__gedf2+0x54>
 80013b8:	d010      	beq.n	80013dc <__gedf2+0xd4>
 80013ba:	2000      	movs	r0, #0
 80013bc:	454f      	cmp	r7, r9
 80013be:	d2d1      	bcs.n	8001364 <__gedf2+0x5c>
 80013c0:	2900      	cmp	r1, #0
 80013c2:	d0e1      	beq.n	8001388 <__gedf2+0x80>
 80013c4:	0008      	movs	r0, r1
 80013c6:	e7cd      	b.n	8001364 <__gedf2+0x5c>
 80013c8:	4243      	negs	r3, r0
 80013ca:	4158      	adcs	r0, r3
 80013cc:	2302      	movs	r3, #2
 80013ce:	4240      	negs	r0, r0
 80013d0:	4018      	ands	r0, r3
 80013d2:	3801      	subs	r0, #1
 80013d4:	e7c6      	b.n	8001364 <__gedf2+0x5c>
 80013d6:	2002      	movs	r0, #2
 80013d8:	4240      	negs	r0, r0
 80013da:	e7c3      	b.n	8001364 <__gedf2+0x5c>
 80013dc:	45c4      	cmp	ip, r8
 80013de:	d8bd      	bhi.n	800135c <__gedf2+0x54>
 80013e0:	2000      	movs	r0, #0
 80013e2:	45c4      	cmp	ip, r8
 80013e4:	d2be      	bcs.n	8001364 <__gedf2+0x5c>
 80013e6:	e7eb      	b.n	80013c0 <__gedf2+0xb8>
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__ledf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	464e      	mov	r6, r9
 80013f0:	4645      	mov	r5, r8
 80013f2:	4657      	mov	r7, sl
 80013f4:	46de      	mov	lr, fp
 80013f6:	0004      	movs	r4, r0
 80013f8:	0018      	movs	r0, r3
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	0016      	movs	r6, r2
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	4d31      	ldr	r5, [pc, #196]	; (80014c8 <__ledf2+0xdc>)
 8001404:	030f      	lsls	r7, r1, #12
 8001406:	004a      	lsls	r2, r1, #1
 8001408:	4699      	mov	r9, r3
 800140a:	0043      	lsls	r3, r0, #1
 800140c:	46a4      	mov	ip, r4
 800140e:	46b0      	mov	r8, r6
 8001410:	0b3f      	lsrs	r7, r7, #12
 8001412:	0d52      	lsrs	r2, r2, #21
 8001414:	0fc9      	lsrs	r1, r1, #31
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	0fc0      	lsrs	r0, r0, #31
 800141a:	42aa      	cmp	r2, r5
 800141c:	d011      	beq.n	8001442 <__ledf2+0x56>
 800141e:	42ab      	cmp	r3, r5
 8001420:	d014      	beq.n	800144c <__ledf2+0x60>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d12f      	bne.n	8001486 <__ledf2+0x9a>
 8001426:	433c      	orrs	r4, r7
 8001428:	46a3      	mov	fp, r4
 800142a:	4265      	negs	r5, r4
 800142c:	4165      	adcs	r5, r4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d114      	bne.n	800145c <__ledf2+0x70>
 8001432:	464c      	mov	r4, r9
 8001434:	4326      	orrs	r6, r4
 8001436:	d111      	bne.n	800145c <__ledf2+0x70>
 8001438:	465b      	mov	r3, fp
 800143a:	2000      	movs	r0, #0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d017      	beq.n	8001470 <__ledf2+0x84>
 8001440:	e010      	b.n	8001464 <__ledf2+0x78>
 8001442:	003d      	movs	r5, r7
 8001444:	4325      	orrs	r5, r4
 8001446:	d112      	bne.n	800146e <__ledf2+0x82>
 8001448:	4293      	cmp	r3, r2
 800144a:	d11c      	bne.n	8001486 <__ledf2+0x9a>
 800144c:	464d      	mov	r5, r9
 800144e:	432e      	orrs	r6, r5
 8001450:	d10d      	bne.n	800146e <__ledf2+0x82>
 8001452:	2a00      	cmp	r2, #0
 8001454:	d104      	bne.n	8001460 <__ledf2+0x74>
 8001456:	433c      	orrs	r4, r7
 8001458:	4265      	negs	r5, r4
 800145a:	4165      	adcs	r5, r4
 800145c:	2d00      	cmp	r5, #0
 800145e:	d10d      	bne.n	800147c <__ledf2+0x90>
 8001460:	4281      	cmp	r1, r0
 8001462:	d016      	beq.n	8001492 <__ledf2+0xa6>
 8001464:	2002      	movs	r0, #2
 8001466:	3901      	subs	r1, #1
 8001468:	4008      	ands	r0, r1
 800146a:	3801      	subs	r0, #1
 800146c:	e000      	b.n	8001470 <__ledf2+0x84>
 800146e:	2002      	movs	r0, #2
 8001470:	bcf0      	pop	{r4, r5, r6, r7}
 8001472:	46bb      	mov	fp, r7
 8001474:	46b2      	mov	sl, r6
 8001476:	46a9      	mov	r9, r5
 8001478:	46a0      	mov	r8, r4
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147c:	2800      	cmp	r0, #0
 800147e:	d1f7      	bne.n	8001470 <__ledf2+0x84>
 8001480:	2001      	movs	r0, #1
 8001482:	4240      	negs	r0, r0
 8001484:	e7f4      	b.n	8001470 <__ledf2+0x84>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ea      	bne.n	8001460 <__ledf2+0x74>
 800148a:	464c      	mov	r4, r9
 800148c:	4326      	orrs	r6, r4
 800148e:	d1e7      	bne.n	8001460 <__ledf2+0x74>
 8001490:	e7e8      	b.n	8001464 <__ledf2+0x78>
 8001492:	429a      	cmp	r2, r3
 8001494:	dd06      	ble.n	80014a4 <__ledf2+0xb8>
 8001496:	4243      	negs	r3, r0
 8001498:	4158      	adcs	r0, r3
 800149a:	2302      	movs	r3, #2
 800149c:	4240      	negs	r0, r0
 800149e:	4018      	ands	r0, r3
 80014a0:	3801      	subs	r0, #1
 80014a2:	e7e5      	b.n	8001470 <__ledf2+0x84>
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbe9      	blt.n	800147c <__ledf2+0x90>
 80014a8:	454f      	cmp	r7, r9
 80014aa:	d8db      	bhi.n	8001464 <__ledf2+0x78>
 80014ac:	d006      	beq.n	80014bc <__ledf2+0xd0>
 80014ae:	2000      	movs	r0, #0
 80014b0:	454f      	cmp	r7, r9
 80014b2:	d2dd      	bcs.n	8001470 <__ledf2+0x84>
 80014b4:	2900      	cmp	r1, #0
 80014b6:	d0e3      	beq.n	8001480 <__ledf2+0x94>
 80014b8:	0008      	movs	r0, r1
 80014ba:	e7d9      	b.n	8001470 <__ledf2+0x84>
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d8d1      	bhi.n	8001464 <__ledf2+0x78>
 80014c0:	2000      	movs	r0, #0
 80014c2:	45c4      	cmp	ip, r8
 80014c4:	d2d4      	bcs.n	8001470 <__ledf2+0x84>
 80014c6:	e7f5      	b.n	80014b4 <__ledf2+0xc8>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__aeabi_dmul>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	4657      	mov	r7, sl
 80014d0:	464e      	mov	r6, r9
 80014d2:	4645      	mov	r5, r8
 80014d4:	46de      	mov	lr, fp
 80014d6:	b5e0      	push	{r5, r6, r7, lr}
 80014d8:	4698      	mov	r8, r3
 80014da:	030c      	lsls	r4, r1, #12
 80014dc:	004b      	lsls	r3, r1, #1
 80014de:	0006      	movs	r6, r0
 80014e0:	4692      	mov	sl, r2
 80014e2:	b087      	sub	sp, #28
 80014e4:	0b24      	lsrs	r4, r4, #12
 80014e6:	0d5b      	lsrs	r3, r3, #21
 80014e8:	0fcf      	lsrs	r7, r1, #31
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <__aeabi_dmul+0xfc>
 80014ee:	4add      	ldr	r2, [pc, #884]	; (8001864 <__aeabi_dmul+0x398>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dmul+0x2a>
 80014f4:	e086      	b.n	8001604 <__aeabi_dmul+0x138>
 80014f6:	0f42      	lsrs	r2, r0, #29
 80014f8:	00e4      	lsls	r4, r4, #3
 80014fa:	4314      	orrs	r4, r2
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0412      	lsls	r2, r2, #16
 8001500:	4314      	orrs	r4, r2
 8001502:	4ad9      	ldr	r2, [pc, #868]	; (8001868 <__aeabi_dmul+0x39c>)
 8001504:	00c5      	lsls	r5, r0, #3
 8001506:	4694      	mov	ip, r2
 8001508:	4463      	add	r3, ip
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	4699      	mov	r9, r3
 8001510:	469b      	mov	fp, r3
 8001512:	4643      	mov	r3, r8
 8001514:	4642      	mov	r2, r8
 8001516:	031e      	lsls	r6, r3, #12
 8001518:	0fd2      	lsrs	r2, r2, #31
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4650      	mov	r0, sl
 800151e:	4690      	mov	r8, r2
 8001520:	0b36      	lsrs	r6, r6, #12
 8001522:	0d5b      	lsrs	r3, r3, #21
 8001524:	d100      	bne.n	8001528 <__aeabi_dmul+0x5c>
 8001526:	e078      	b.n	800161a <__aeabi_dmul+0x14e>
 8001528:	4ace      	ldr	r2, [pc, #824]	; (8001864 <__aeabi_dmul+0x398>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01d      	beq.n	800156a <__aeabi_dmul+0x9e>
 800152e:	49ce      	ldr	r1, [pc, #824]	; (8001868 <__aeabi_dmul+0x39c>)
 8001530:	0f42      	lsrs	r2, r0, #29
 8001532:	468c      	mov	ip, r1
 8001534:	9900      	ldr	r1, [sp, #0]
 8001536:	4463      	add	r3, ip
 8001538:	00f6      	lsls	r6, r6, #3
 800153a:	468c      	mov	ip, r1
 800153c:	4316      	orrs	r6, r2
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	449c      	add	ip, r3
 8001542:	0412      	lsls	r2, r2, #16
 8001544:	4663      	mov	r3, ip
 8001546:	4316      	orrs	r6, r2
 8001548:	00c2      	lsls	r2, r0, #3
 800154a:	2000      	movs	r0, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	9900      	ldr	r1, [sp, #0]
 8001550:	4643      	mov	r3, r8
 8001552:	3101      	adds	r1, #1
 8001554:	468c      	mov	ip, r1
 8001556:	4649      	mov	r1, r9
 8001558:	407b      	eors	r3, r7
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	290f      	cmp	r1, #15
 800155e:	d900      	bls.n	8001562 <__aeabi_dmul+0x96>
 8001560:	e07e      	b.n	8001660 <__aeabi_dmul+0x194>
 8001562:	4bc2      	ldr	r3, [pc, #776]	; (800186c <__aeabi_dmul+0x3a0>)
 8001564:	0089      	lsls	r1, r1, #2
 8001566:	5859      	ldr	r1, [r3, r1]
 8001568:	468f      	mov	pc, r1
 800156a:	4652      	mov	r2, sl
 800156c:	9b00      	ldr	r3, [sp, #0]
 800156e:	4332      	orrs	r2, r6
 8001570:	d000      	beq.n	8001574 <__aeabi_dmul+0xa8>
 8001572:	e156      	b.n	8001822 <__aeabi_dmul+0x356>
 8001574:	49bb      	ldr	r1, [pc, #748]	; (8001864 <__aeabi_dmul+0x398>)
 8001576:	2600      	movs	r6, #0
 8001578:	468c      	mov	ip, r1
 800157a:	4463      	add	r3, ip
 800157c:	4649      	mov	r1, r9
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	4319      	orrs	r1, r3
 8001584:	4689      	mov	r9, r1
 8001586:	2002      	movs	r0, #2
 8001588:	e7e1      	b.n	800154e <__aeabi_dmul+0x82>
 800158a:	4643      	mov	r3, r8
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	0034      	movs	r4, r6
 8001590:	0015      	movs	r5, r2
 8001592:	4683      	mov	fp, r0
 8001594:	465b      	mov	r3, fp
 8001596:	2b02      	cmp	r3, #2
 8001598:	d05e      	beq.n	8001658 <__aeabi_dmul+0x18c>
 800159a:	2b03      	cmp	r3, #3
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0xd4>
 800159e:	e1f3      	b.n	8001988 <__aeabi_dmul+0x4bc>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dmul+0xda>
 80015a4:	e118      	b.n	80017d8 <__aeabi_dmul+0x30c>
 80015a6:	2200      	movs	r2, #0
 80015a8:	2400      	movs	r4, #0
 80015aa:	2500      	movs	r5, #0
 80015ac:	9b01      	ldr	r3, [sp, #4]
 80015ae:	0512      	lsls	r2, r2, #20
 80015b0:	4322      	orrs	r2, r4
 80015b2:	07db      	lsls	r3, r3, #31
 80015b4:	431a      	orrs	r2, r3
 80015b6:	0028      	movs	r0, r5
 80015b8:	0011      	movs	r1, r2
 80015ba:	b007      	add	sp, #28
 80015bc:	bcf0      	pop	{r4, r5, r6, r7}
 80015be:	46bb      	mov	fp, r7
 80015c0:	46b2      	mov	sl, r6
 80015c2:	46a9      	mov	r9, r5
 80015c4:	46a0      	mov	r8, r4
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	0025      	movs	r5, r4
 80015ca:	4305      	orrs	r5, r0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dmul+0x104>
 80015ce:	e141      	b.n	8001854 <__aeabi_dmul+0x388>
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dmul+0x10a>
 80015d4:	e1ad      	b.n	8001932 <__aeabi_dmul+0x466>
 80015d6:	0020      	movs	r0, r4
 80015d8:	f000 fe02 	bl	80021e0 <__clzsi2>
 80015dc:	0001      	movs	r1, r0
 80015de:	0002      	movs	r2, r0
 80015e0:	390b      	subs	r1, #11
 80015e2:	231d      	movs	r3, #29
 80015e4:	0010      	movs	r0, r2
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	0031      	movs	r1, r6
 80015ea:	0035      	movs	r5, r6
 80015ec:	3808      	subs	r0, #8
 80015ee:	4084      	lsls	r4, r0
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	4085      	lsls	r5, r0
 80015f4:	430c      	orrs	r4, r1
 80015f6:	489e      	ldr	r0, [pc, #632]	; (8001870 <__aeabi_dmul+0x3a4>)
 80015f8:	1a83      	subs	r3, r0, r2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	4699      	mov	r9, r3
 8001600:	469b      	mov	fp, r3
 8001602:	e786      	b.n	8001512 <__aeabi_dmul+0x46>
 8001604:	0005      	movs	r5, r0
 8001606:	4325      	orrs	r5, r4
 8001608:	d000      	beq.n	800160c <__aeabi_dmul+0x140>
 800160a:	e11c      	b.n	8001846 <__aeabi_dmul+0x37a>
 800160c:	2208      	movs	r2, #8
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	2400      	movs	r4, #0
 8001614:	4691      	mov	r9, r2
 8001616:	469b      	mov	fp, r3
 8001618:	e77b      	b.n	8001512 <__aeabi_dmul+0x46>
 800161a:	4652      	mov	r2, sl
 800161c:	4332      	orrs	r2, r6
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0x156>
 8001620:	e10a      	b.n	8001838 <__aeabi_dmul+0x36c>
 8001622:	2e00      	cmp	r6, #0
 8001624:	d100      	bne.n	8001628 <__aeabi_dmul+0x15c>
 8001626:	e176      	b.n	8001916 <__aeabi_dmul+0x44a>
 8001628:	0030      	movs	r0, r6
 800162a:	f000 fdd9 	bl	80021e0 <__clzsi2>
 800162e:	0002      	movs	r2, r0
 8001630:	3a0b      	subs	r2, #11
 8001632:	231d      	movs	r3, #29
 8001634:	0001      	movs	r1, r0
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	4652      	mov	r2, sl
 800163a:	3908      	subs	r1, #8
 800163c:	40da      	lsrs	r2, r3
 800163e:	408e      	lsls	r6, r1
 8001640:	4316      	orrs	r6, r2
 8001642:	4652      	mov	r2, sl
 8001644:	408a      	lsls	r2, r1
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	4989      	ldr	r1, [pc, #548]	; (8001870 <__aeabi_dmul+0x3a4>)
 800164a:	1a18      	subs	r0, r3, r0
 800164c:	0003      	movs	r3, r0
 800164e:	468c      	mov	ip, r1
 8001650:	4463      	add	r3, ip
 8001652:	2000      	movs	r0, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	e77a      	b.n	800154e <__aeabi_dmul+0x82>
 8001658:	2400      	movs	r4, #0
 800165a:	2500      	movs	r5, #0
 800165c:	4a81      	ldr	r2, [pc, #516]	; (8001864 <__aeabi_dmul+0x398>)
 800165e:	e7a5      	b.n	80015ac <__aeabi_dmul+0xe0>
 8001660:	0c2f      	lsrs	r7, r5, #16
 8001662:	042d      	lsls	r5, r5, #16
 8001664:	0c2d      	lsrs	r5, r5, #16
 8001666:	002b      	movs	r3, r5
 8001668:	0c11      	lsrs	r1, r2, #16
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	4353      	muls	r3, r2
 8001670:	4698      	mov	r8, r3
 8001672:	0013      	movs	r3, r2
 8001674:	0028      	movs	r0, r5
 8001676:	437b      	muls	r3, r7
 8001678:	4699      	mov	r9, r3
 800167a:	4348      	muls	r0, r1
 800167c:	4448      	add	r0, r9
 800167e:	4683      	mov	fp, r0
 8001680:	4640      	mov	r0, r8
 8001682:	000b      	movs	r3, r1
 8001684:	0c00      	lsrs	r0, r0, #16
 8001686:	4682      	mov	sl, r0
 8001688:	4658      	mov	r0, fp
 800168a:	437b      	muls	r3, r7
 800168c:	4450      	add	r0, sl
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	4581      	cmp	r9, r0
 8001692:	d906      	bls.n	80016a2 <__aeabi_dmul+0x1d6>
 8001694:	469a      	mov	sl, r3
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4699      	mov	r9, r3
 800169c:	44ca      	add	sl, r9
 800169e:	4653      	mov	r3, sl
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	0c03      	lsrs	r3, r0, #16
 80016a4:	469b      	mov	fp, r3
 80016a6:	4643      	mov	r3, r8
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	0400      	lsls	r0, r0, #16
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	4698      	mov	r8, r3
 80016b0:	0003      	movs	r3, r0
 80016b2:	4443      	add	r3, r8
 80016b4:	9304      	str	r3, [sp, #16]
 80016b6:	0c33      	lsrs	r3, r6, #16
 80016b8:	4699      	mov	r9, r3
 80016ba:	002b      	movs	r3, r5
 80016bc:	0436      	lsls	r6, r6, #16
 80016be:	0c36      	lsrs	r6, r6, #16
 80016c0:	4373      	muls	r3, r6
 80016c2:	4698      	mov	r8, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	437b      	muls	r3, r7
 80016c8:	469a      	mov	sl, r3
 80016ca:	464b      	mov	r3, r9
 80016cc:	435d      	muls	r5, r3
 80016ce:	435f      	muls	r7, r3
 80016d0:	4643      	mov	r3, r8
 80016d2:	4455      	add	r5, sl
 80016d4:	0c18      	lsrs	r0, r3, #16
 80016d6:	1940      	adds	r0, r0, r5
 80016d8:	4582      	cmp	sl, r0
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x218>
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	469a      	mov	sl, r3
 80016e2:	4457      	add	r7, sl
 80016e4:	0c05      	lsrs	r5, r0, #16
 80016e6:	19eb      	adds	r3, r5, r7
 80016e8:	9305      	str	r3, [sp, #20]
 80016ea:	4643      	mov	r3, r8
 80016ec:	041d      	lsls	r5, r3, #16
 80016ee:	0c2d      	lsrs	r5, r5, #16
 80016f0:	0400      	lsls	r0, r0, #16
 80016f2:	1940      	adds	r0, r0, r5
 80016f4:	0c25      	lsrs	r5, r4, #16
 80016f6:	0424      	lsls	r4, r4, #16
 80016f8:	0c24      	lsrs	r4, r4, #16
 80016fa:	0027      	movs	r7, r4
 80016fc:	4357      	muls	r7, r2
 80016fe:	436a      	muls	r2, r5
 8001700:	4690      	mov	r8, r2
 8001702:	002a      	movs	r2, r5
 8001704:	0c3b      	lsrs	r3, r7, #16
 8001706:	469a      	mov	sl, r3
 8001708:	434a      	muls	r2, r1
 800170a:	4361      	muls	r1, r4
 800170c:	4441      	add	r1, r8
 800170e:	4451      	add	r1, sl
 8001710:	4483      	add	fp, r0
 8001712:	4588      	cmp	r8, r1
 8001714:	d903      	bls.n	800171e <__aeabi_dmul+0x252>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4698      	mov	r8, r3
 800171c:	4442      	add	r2, r8
 800171e:	043f      	lsls	r7, r7, #16
 8001720:	0c0b      	lsrs	r3, r1, #16
 8001722:	0c3f      	lsrs	r7, r7, #16
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	19c9      	adds	r1, r1, r7
 8001728:	0027      	movs	r7, r4
 800172a:	4698      	mov	r8, r3
 800172c:	464b      	mov	r3, r9
 800172e:	4377      	muls	r7, r6
 8001730:	435c      	muls	r4, r3
 8001732:	436e      	muls	r6, r5
 8001734:	435d      	muls	r5, r3
 8001736:	0c3b      	lsrs	r3, r7, #16
 8001738:	4699      	mov	r9, r3
 800173a:	19a4      	adds	r4, r4, r6
 800173c:	444c      	add	r4, r9
 800173e:	4442      	add	r2, r8
 8001740:	9503      	str	r5, [sp, #12]
 8001742:	42a6      	cmp	r6, r4
 8001744:	d904      	bls.n	8001750 <__aeabi_dmul+0x284>
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	4698      	mov	r8, r3
 800174c:	4445      	add	r5, r8
 800174e:	9503      	str	r5, [sp, #12]
 8001750:	9b02      	ldr	r3, [sp, #8]
 8001752:	043f      	lsls	r7, r7, #16
 8001754:	445b      	add	r3, fp
 8001756:	001e      	movs	r6, r3
 8001758:	4283      	cmp	r3, r0
 800175a:	4180      	sbcs	r0, r0
 800175c:	0423      	lsls	r3, r4, #16
 800175e:	4698      	mov	r8, r3
 8001760:	9b05      	ldr	r3, [sp, #20]
 8001762:	0c3f      	lsrs	r7, r7, #16
 8001764:	4447      	add	r7, r8
 8001766:	4698      	mov	r8, r3
 8001768:	1876      	adds	r6, r6, r1
 800176a:	428e      	cmp	r6, r1
 800176c:	4189      	sbcs	r1, r1
 800176e:	4447      	add	r7, r8
 8001770:	4240      	negs	r0, r0
 8001772:	183d      	adds	r5, r7, r0
 8001774:	46a8      	mov	r8, r5
 8001776:	4693      	mov	fp, r2
 8001778:	4249      	negs	r1, r1
 800177a:	468a      	mov	sl, r1
 800177c:	44c3      	add	fp, r8
 800177e:	429f      	cmp	r7, r3
 8001780:	41bf      	sbcs	r7, r7
 8001782:	4580      	cmp	r8, r0
 8001784:	4180      	sbcs	r0, r0
 8001786:	9b03      	ldr	r3, [sp, #12]
 8001788:	44da      	add	sl, fp
 800178a:	4698      	mov	r8, r3
 800178c:	4653      	mov	r3, sl
 800178e:	4240      	negs	r0, r0
 8001790:	427f      	negs	r7, r7
 8001792:	4307      	orrs	r7, r0
 8001794:	0c24      	lsrs	r4, r4, #16
 8001796:	4593      	cmp	fp, r2
 8001798:	4192      	sbcs	r2, r2
 800179a:	458a      	cmp	sl, r1
 800179c:	4189      	sbcs	r1, r1
 800179e:	193f      	adds	r7, r7, r4
 80017a0:	0ddc      	lsrs	r4, r3, #23
 80017a2:	9b04      	ldr	r3, [sp, #16]
 80017a4:	0275      	lsls	r5, r6, #9
 80017a6:	431d      	orrs	r5, r3
 80017a8:	1e68      	subs	r0, r5, #1
 80017aa:	4185      	sbcs	r5, r0
 80017ac:	4653      	mov	r3, sl
 80017ae:	4252      	negs	r2, r2
 80017b0:	4249      	negs	r1, r1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	18bf      	adds	r7, r7, r2
 80017b6:	4447      	add	r7, r8
 80017b8:	0df6      	lsrs	r6, r6, #23
 80017ba:	027f      	lsls	r7, r7, #9
 80017bc:	4335      	orrs	r5, r6
 80017be:	025a      	lsls	r2, r3, #9
 80017c0:	433c      	orrs	r4, r7
 80017c2:	4315      	orrs	r5, r2
 80017c4:	01fb      	lsls	r3, r7, #7
 80017c6:	d400      	bmi.n	80017ca <__aeabi_dmul+0x2fe>
 80017c8:	e0c1      	b.n	800194e <__aeabi_dmul+0x482>
 80017ca:	2101      	movs	r1, #1
 80017cc:	086a      	lsrs	r2, r5, #1
 80017ce:	400d      	ands	r5, r1
 80017d0:	4315      	orrs	r5, r2
 80017d2:	07e2      	lsls	r2, r4, #31
 80017d4:	4315      	orrs	r5, r2
 80017d6:	0864      	lsrs	r4, r4, #1
 80017d8:	4926      	ldr	r1, [pc, #152]	; (8001874 <__aeabi_dmul+0x3a8>)
 80017da:	4461      	add	r1, ip
 80017dc:	2900      	cmp	r1, #0
 80017de:	dd56      	ble.n	800188e <__aeabi_dmul+0x3c2>
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dmul+0x32c>
 80017e4:	220f      	movs	r2, #15
 80017e6:	402a      	ands	r2, r5
 80017e8:	2a04      	cmp	r2, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dmul+0x32c>
 80017ec:	1d2a      	adds	r2, r5, #4
 80017ee:	42aa      	cmp	r2, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	0015      	movs	r5, r2
 80017f8:	01e3      	lsls	r3, r4, #7
 80017fa:	d504      	bpl.n	8001806 <__aeabi_dmul+0x33a>
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <__aeabi_dmul+0x3ac>)
 8001800:	00c9      	lsls	r1, r1, #3
 8001802:	4014      	ands	r4, r2
 8001804:	4461      	add	r1, ip
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <__aeabi_dmul+0x3b0>)
 8001808:	4291      	cmp	r1, r2
 800180a:	dd00      	ble.n	800180e <__aeabi_dmul+0x342>
 800180c:	e724      	b.n	8001658 <__aeabi_dmul+0x18c>
 800180e:	0762      	lsls	r2, r4, #29
 8001810:	08ed      	lsrs	r5, r5, #3
 8001812:	0264      	lsls	r4, r4, #9
 8001814:	0549      	lsls	r1, r1, #21
 8001816:	4315      	orrs	r5, r2
 8001818:	0b24      	lsrs	r4, r4, #12
 800181a:	0d4a      	lsrs	r2, r1, #21
 800181c:	e6c6      	b.n	80015ac <__aeabi_dmul+0xe0>
 800181e:	9701      	str	r7, [sp, #4]
 8001820:	e6b8      	b.n	8001594 <__aeabi_dmul+0xc8>
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <__aeabi_dmul+0x398>)
 8001824:	2003      	movs	r0, #3
 8001826:	4694      	mov	ip, r2
 8001828:	4463      	add	r3, ip
 800182a:	464a      	mov	r2, r9
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2303      	movs	r3, #3
 8001830:	431a      	orrs	r2, r3
 8001832:	4691      	mov	r9, r2
 8001834:	4652      	mov	r2, sl
 8001836:	e68a      	b.n	800154e <__aeabi_dmul+0x82>
 8001838:	4649      	mov	r1, r9
 800183a:	2301      	movs	r3, #1
 800183c:	4319      	orrs	r1, r3
 800183e:	4689      	mov	r9, r1
 8001840:	2600      	movs	r6, #0
 8001842:	2001      	movs	r0, #1
 8001844:	e683      	b.n	800154e <__aeabi_dmul+0x82>
 8001846:	220c      	movs	r2, #12
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2303      	movs	r3, #3
 800184c:	0005      	movs	r5, r0
 800184e:	4691      	mov	r9, r2
 8001850:	469b      	mov	fp, r3
 8001852:	e65e      	b.n	8001512 <__aeabi_dmul+0x46>
 8001854:	2304      	movs	r3, #4
 8001856:	4699      	mov	r9, r3
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	2400      	movs	r4, #0
 8001860:	469b      	mov	fp, r3
 8001862:	e656      	b.n	8001512 <__aeabi_dmul+0x46>
 8001864:	000007ff 	.word	0x000007ff
 8001868:	fffffc01 	.word	0xfffffc01
 800186c:	0800d048 	.word	0x0800d048
 8001870:	fffffc0d 	.word	0xfffffc0d
 8001874:	000003ff 	.word	0x000003ff
 8001878:	feffffff 	.word	0xfeffffff
 800187c:	000007fe 	.word	0x000007fe
 8001880:	2300      	movs	r3, #0
 8001882:	2480      	movs	r4, #128	; 0x80
 8001884:	2500      	movs	r5, #0
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	0324      	lsls	r4, r4, #12
 800188c:	e68e      	b.n	80015ac <__aeabi_dmul+0xe0>
 800188e:	2001      	movs	r0, #1
 8001890:	1a40      	subs	r0, r0, r1
 8001892:	2838      	cmp	r0, #56	; 0x38
 8001894:	dd00      	ble.n	8001898 <__aeabi_dmul+0x3cc>
 8001896:	e686      	b.n	80015a6 <__aeabi_dmul+0xda>
 8001898:	281f      	cmp	r0, #31
 800189a:	dd5b      	ble.n	8001954 <__aeabi_dmul+0x488>
 800189c:	221f      	movs	r2, #31
 800189e:	0023      	movs	r3, r4
 80018a0:	4252      	negs	r2, r2
 80018a2:	1a51      	subs	r1, r2, r1
 80018a4:	40cb      	lsrs	r3, r1
 80018a6:	0019      	movs	r1, r3
 80018a8:	2820      	cmp	r0, #32
 80018aa:	d003      	beq.n	80018b4 <__aeabi_dmul+0x3e8>
 80018ac:	4a3b      	ldr	r2, [pc, #236]	; (800199c <__aeabi_dmul+0x4d0>)
 80018ae:	4462      	add	r2, ip
 80018b0:	4094      	lsls	r4, r2
 80018b2:	4325      	orrs	r5, r4
 80018b4:	1e6a      	subs	r2, r5, #1
 80018b6:	4195      	sbcs	r5, r2
 80018b8:	002a      	movs	r2, r5
 80018ba:	430a      	orrs	r2, r1
 80018bc:	2107      	movs	r1, #7
 80018be:	000d      	movs	r5, r1
 80018c0:	2400      	movs	r4, #0
 80018c2:	4015      	ands	r5, r2
 80018c4:	4211      	tst	r1, r2
 80018c6:	d05b      	beq.n	8001980 <__aeabi_dmul+0x4b4>
 80018c8:	210f      	movs	r1, #15
 80018ca:	2400      	movs	r4, #0
 80018cc:	4011      	ands	r1, r2
 80018ce:	2904      	cmp	r1, #4
 80018d0:	d053      	beq.n	800197a <__aeabi_dmul+0x4ae>
 80018d2:	1d11      	adds	r1, r2, #4
 80018d4:	4291      	cmp	r1, r2
 80018d6:	4192      	sbcs	r2, r2
 80018d8:	4252      	negs	r2, r2
 80018da:	18a4      	adds	r4, r4, r2
 80018dc:	000a      	movs	r2, r1
 80018de:	0223      	lsls	r3, r4, #8
 80018e0:	d54b      	bpl.n	800197a <__aeabi_dmul+0x4ae>
 80018e2:	2201      	movs	r2, #1
 80018e4:	2400      	movs	r4, #0
 80018e6:	2500      	movs	r5, #0
 80018e8:	e660      	b.n	80015ac <__aeabi_dmul+0xe0>
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	031b      	lsls	r3, r3, #12
 80018ee:	421c      	tst	r4, r3
 80018f0:	d009      	beq.n	8001906 <__aeabi_dmul+0x43a>
 80018f2:	421e      	tst	r6, r3
 80018f4:	d107      	bne.n	8001906 <__aeabi_dmul+0x43a>
 80018f6:	4333      	orrs	r3, r6
 80018f8:	031c      	lsls	r4, r3, #12
 80018fa:	4643      	mov	r3, r8
 80018fc:	0015      	movs	r5, r2
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	4a25      	ldr	r2, [pc, #148]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	e652      	b.n	80015ac <__aeabi_dmul+0xe0>
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	0312      	lsls	r2, r2, #12
 800190a:	4314      	orrs	r4, r2
 800190c:	0324      	lsls	r4, r4, #12
 800190e:	4a22      	ldr	r2, [pc, #136]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001910:	0b24      	lsrs	r4, r4, #12
 8001912:	9701      	str	r7, [sp, #4]
 8001914:	e64a      	b.n	80015ac <__aeabi_dmul+0xe0>
 8001916:	f000 fc63 	bl	80021e0 <__clzsi2>
 800191a:	0003      	movs	r3, r0
 800191c:	001a      	movs	r2, r3
 800191e:	3215      	adds	r2, #21
 8001920:	3020      	adds	r0, #32
 8001922:	2a1c      	cmp	r2, #28
 8001924:	dc00      	bgt.n	8001928 <__aeabi_dmul+0x45c>
 8001926:	e684      	b.n	8001632 <__aeabi_dmul+0x166>
 8001928:	4656      	mov	r6, sl
 800192a:	3b08      	subs	r3, #8
 800192c:	2200      	movs	r2, #0
 800192e:	409e      	lsls	r6, r3
 8001930:	e689      	b.n	8001646 <__aeabi_dmul+0x17a>
 8001932:	f000 fc55 	bl	80021e0 <__clzsi2>
 8001936:	0001      	movs	r1, r0
 8001938:	0002      	movs	r2, r0
 800193a:	3115      	adds	r1, #21
 800193c:	3220      	adds	r2, #32
 800193e:	291c      	cmp	r1, #28
 8001940:	dc00      	bgt.n	8001944 <__aeabi_dmul+0x478>
 8001942:	e64e      	b.n	80015e2 <__aeabi_dmul+0x116>
 8001944:	0034      	movs	r4, r6
 8001946:	3808      	subs	r0, #8
 8001948:	2500      	movs	r5, #0
 800194a:	4084      	lsls	r4, r0
 800194c:	e653      	b.n	80015f6 <__aeabi_dmul+0x12a>
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	469c      	mov	ip, r3
 8001952:	e741      	b.n	80017d8 <__aeabi_dmul+0x30c>
 8001954:	4912      	ldr	r1, [pc, #72]	; (80019a0 <__aeabi_dmul+0x4d4>)
 8001956:	0022      	movs	r2, r4
 8001958:	4461      	add	r1, ip
 800195a:	002e      	movs	r6, r5
 800195c:	408d      	lsls	r5, r1
 800195e:	408a      	lsls	r2, r1
 8001960:	40c6      	lsrs	r6, r0
 8001962:	1e69      	subs	r1, r5, #1
 8001964:	418d      	sbcs	r5, r1
 8001966:	4332      	orrs	r2, r6
 8001968:	432a      	orrs	r2, r5
 800196a:	40c4      	lsrs	r4, r0
 800196c:	0753      	lsls	r3, r2, #29
 800196e:	d0b6      	beq.n	80018de <__aeabi_dmul+0x412>
 8001970:	210f      	movs	r1, #15
 8001972:	4011      	ands	r1, r2
 8001974:	2904      	cmp	r1, #4
 8001976:	d1ac      	bne.n	80018d2 <__aeabi_dmul+0x406>
 8001978:	e7b1      	b.n	80018de <__aeabi_dmul+0x412>
 800197a:	0765      	lsls	r5, r4, #29
 800197c:	0264      	lsls	r4, r4, #9
 800197e:	0b24      	lsrs	r4, r4, #12
 8001980:	08d2      	lsrs	r2, r2, #3
 8001982:	4315      	orrs	r5, r2
 8001984:	2200      	movs	r2, #0
 8001986:	e611      	b.n	80015ac <__aeabi_dmul+0xe0>
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0312      	lsls	r2, r2, #12
 800198c:	4314      	orrs	r4, r2
 800198e:	0324      	lsls	r4, r4, #12
 8001990:	4a01      	ldr	r2, [pc, #4]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001992:	0b24      	lsrs	r4, r4, #12
 8001994:	e60a      	b.n	80015ac <__aeabi_dmul+0xe0>
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	000007ff 	.word	0x000007ff
 800199c:	0000043e 	.word	0x0000043e
 80019a0:	0000041e 	.word	0x0000041e

080019a4 <__aeabi_dsub>:
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	4657      	mov	r7, sl
 80019a8:	464e      	mov	r6, r9
 80019aa:	4645      	mov	r5, r8
 80019ac:	46de      	mov	lr, fp
 80019ae:	0004      	movs	r4, r0
 80019b0:	b5e0      	push	{r5, r6, r7, lr}
 80019b2:	001f      	movs	r7, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	030b      	lsls	r3, r1, #12
 80019b8:	0f62      	lsrs	r2, r4, #29
 80019ba:	004e      	lsls	r6, r1, #1
 80019bc:	0fcd      	lsrs	r5, r1, #31
 80019be:	0a5b      	lsrs	r3, r3, #9
 80019c0:	0339      	lsls	r1, r7, #12
 80019c2:	4313      	orrs	r3, r2
 80019c4:	0a49      	lsrs	r1, r1, #9
 80019c6:	00e2      	lsls	r2, r4, #3
 80019c8:	0f44      	lsrs	r4, r0, #29
 80019ca:	4321      	orrs	r1, r4
 80019cc:	4cc2      	ldr	r4, [pc, #776]	; (8001cd8 <__aeabi_dsub+0x334>)
 80019ce:	4691      	mov	r9, r2
 80019d0:	4692      	mov	sl, r2
 80019d2:	00c0      	lsls	r0, r0, #3
 80019d4:	007a      	lsls	r2, r7, #1
 80019d6:	4680      	mov	r8, r0
 80019d8:	0d76      	lsrs	r6, r6, #21
 80019da:	0d52      	lsrs	r2, r2, #21
 80019dc:	0fff      	lsrs	r7, r7, #31
 80019de:	42a2      	cmp	r2, r4
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x40>
 80019e2:	e0b4      	b.n	8001b4e <__aeabi_dsub+0x1aa>
 80019e4:	2401      	movs	r4, #1
 80019e6:	4067      	eors	r7, r4
 80019e8:	46bb      	mov	fp, r7
 80019ea:	42bd      	cmp	r5, r7
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x4c>
 80019ee:	e088      	b.n	8001b02 <__aeabi_dsub+0x15e>
 80019f0:	1ab4      	subs	r4, r6, r2
 80019f2:	46a4      	mov	ip, r4
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dsub+0x56>
 80019f8:	e0b2      	b.n	8001b60 <__aeabi_dsub+0x1bc>
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x5c>
 80019fe:	e0c5      	b.n	8001b8c <__aeabi_dsub+0x1e8>
 8001a00:	4ab5      	ldr	r2, [pc, #724]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001a02:	4296      	cmp	r6, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x64>
 8001a06:	e28b      	b.n	8001f20 <__aeabi_dsub+0x57c>
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0412      	lsls	r2, r2, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	4662      	mov	r2, ip
 8001a10:	2a38      	cmp	r2, #56	; 0x38
 8001a12:	dd00      	ble.n	8001a16 <__aeabi_dsub+0x72>
 8001a14:	e1a1      	b.n	8001d5a <__aeabi_dsub+0x3b6>
 8001a16:	2a1f      	cmp	r2, #31
 8001a18:	dd00      	ble.n	8001a1c <__aeabi_dsub+0x78>
 8001a1a:	e216      	b.n	8001e4a <__aeabi_dsub+0x4a6>
 8001a1c:	2720      	movs	r7, #32
 8001a1e:	000c      	movs	r4, r1
 8001a20:	1abf      	subs	r7, r7, r2
 8001a22:	40bc      	lsls	r4, r7
 8001a24:	0002      	movs	r2, r0
 8001a26:	46a0      	mov	r8, r4
 8001a28:	4664      	mov	r4, ip
 8001a2a:	40b8      	lsls	r0, r7
 8001a2c:	40e2      	lsrs	r2, r4
 8001a2e:	4644      	mov	r4, r8
 8001a30:	4314      	orrs	r4, r2
 8001a32:	0002      	movs	r2, r0
 8001a34:	1e50      	subs	r0, r2, #1
 8001a36:	4182      	sbcs	r2, r0
 8001a38:	4660      	mov	r0, ip
 8001a3a:	40c1      	lsrs	r1, r0
 8001a3c:	4322      	orrs	r2, r4
 8001a3e:	1a5b      	subs	r3, r3, r1
 8001a40:	4649      	mov	r1, r9
 8001a42:	1a8c      	subs	r4, r1, r2
 8001a44:	45a1      	cmp	r9, r4
 8001a46:	4192      	sbcs	r2, r2
 8001a48:	4252      	negs	r2, r2
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	4643      	mov	r3, r8
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	d400      	bmi.n	8001a56 <__aeabi_dsub+0xb2>
 8001a54:	e117      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 8001a56:	4643      	mov	r3, r8
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	4643      	mov	r3, r8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0xc2>
 8001a64:	e16c      	b.n	8001d40 <__aeabi_dsub+0x39c>
 8001a66:	4640      	mov	r0, r8
 8001a68:	f000 fbba 	bl	80021e0 <__clzsi2>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	3a08      	subs	r2, #8
 8001a70:	2120      	movs	r1, #32
 8001a72:	0020      	movs	r0, r4
 8001a74:	4643      	mov	r3, r8
 8001a76:	1a89      	subs	r1, r1, r2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	40c8      	lsrs	r0, r1
 8001a7c:	4094      	lsls	r4, r2
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	4296      	cmp	r6, r2
 8001a82:	dd00      	ble.n	8001a86 <__aeabi_dsub+0xe2>
 8001a84:	e157      	b.n	8001d36 <__aeabi_dsub+0x392>
 8001a86:	1b96      	subs	r6, r2, r6
 8001a88:	1c71      	adds	r1, r6, #1
 8001a8a:	291f      	cmp	r1, #31
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dsub+0xec>
 8001a8e:	e1cb      	b.n	8001e28 <__aeabi_dsub+0x484>
 8001a90:	2220      	movs	r2, #32
 8001a92:	0018      	movs	r0, r3
 8001a94:	0026      	movs	r6, r4
 8001a96:	1a52      	subs	r2, r2, r1
 8001a98:	4094      	lsls	r4, r2
 8001a9a:	4090      	lsls	r0, r2
 8001a9c:	40ce      	lsrs	r6, r1
 8001a9e:	40cb      	lsrs	r3, r1
 8001aa0:	1e62      	subs	r2, r4, #1
 8001aa2:	4194      	sbcs	r4, r2
 8001aa4:	4330      	orrs	r0, r6
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	4304      	orrs	r4, r0
 8001aac:	0763      	lsls	r3, r4, #29
 8001aae:	d009      	beq.n	8001ac4 <__aeabi_dsub+0x120>
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	4023      	ands	r3, r4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d005      	beq.n	8001ac4 <__aeabi_dsub+0x120>
 8001ab8:	1d23      	adds	r3, r4, #4
 8001aba:	42a3      	cmp	r3, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4264      	negs	r4, r4
 8001ac0:	44a0      	add	r8, r4
 8001ac2:	001c      	movs	r4, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_dsub+0x128>
 8001aca:	e0df      	b.n	8001c8c <__aeabi_dsub+0x2e8>
 8001acc:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001ace:	3601      	adds	r6, #1
 8001ad0:	429e      	cmp	r6, r3
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x132>
 8001ad4:	e0fb      	b.n	8001cce <__aeabi_dsub+0x32a>
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <__aeabi_dsub+0x338>)
 8001ada:	08e4      	lsrs	r4, r4, #3
 8001adc:	401a      	ands	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	0571      	lsls	r1, r6, #21
 8001ae2:	0752      	lsls	r2, r2, #29
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4322      	orrs	r2, r4
 8001ae8:	0b1b      	lsrs	r3, r3, #12
 8001aea:	0d49      	lsrs	r1, r1, #21
 8001aec:	0509      	lsls	r1, r1, #20
 8001aee:	07ed      	lsls	r5, r5, #31
 8001af0:	4319      	orrs	r1, r3
 8001af2:	4329      	orrs	r1, r5
 8001af4:	0010      	movs	r0, r2
 8001af6:	bcf0      	pop	{r4, r5, r6, r7}
 8001af8:	46bb      	mov	fp, r7
 8001afa:	46b2      	mov	sl, r6
 8001afc:	46a9      	mov	r9, r5
 8001afe:	46a0      	mov	r8, r4
 8001b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b02:	1ab4      	subs	r4, r6, r2
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	dd58      	ble.n	8001bbc <__aeabi_dsub+0x218>
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x16c>
 8001b0e:	e09e      	b.n	8001c4e <__aeabi_dsub+0x2aa>
 8001b10:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001b12:	4296      	cmp	r6, r2
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x174>
 8001b16:	e13b      	b.n	8001d90 <__aeabi_dsub+0x3ec>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0412      	lsls	r2, r2, #16
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	4662      	mov	r2, ip
 8001b20:	2a38      	cmp	r2, #56	; 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x182>
 8001b24:	e0c1      	b.n	8001caa <__aeabi_dsub+0x306>
 8001b26:	2a1f      	cmp	r2, #31
 8001b28:	dc00      	bgt.n	8001b2c <__aeabi_dsub+0x188>
 8001b2a:	e1bb      	b.n	8001ea4 <__aeabi_dsub+0x500>
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	3a20      	subs	r2, #32
 8001b30:	40d4      	lsrs	r4, r2
 8001b32:	0022      	movs	r2, r4
 8001b34:	4664      	mov	r4, ip
 8001b36:	2c20      	cmp	r4, #32
 8001b38:	d004      	beq.n	8001b44 <__aeabi_dsub+0x1a0>
 8001b3a:	2740      	movs	r7, #64	; 0x40
 8001b3c:	1b3f      	subs	r7, r7, r4
 8001b3e:	40b9      	lsls	r1, r7
 8001b40:	4308      	orrs	r0, r1
 8001b42:	4680      	mov	r8, r0
 8001b44:	4644      	mov	r4, r8
 8001b46:	1e61      	subs	r1, r4, #1
 8001b48:	418c      	sbcs	r4, r1
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	e0b1      	b.n	8001cb2 <__aeabi_dsub+0x30e>
 8001b4e:	000c      	movs	r4, r1
 8001b50:	4304      	orrs	r4, r0
 8001b52:	d02a      	beq.n	8001baa <__aeabi_dsub+0x206>
 8001b54:	46bb      	mov	fp, r7
 8001b56:	42bd      	cmp	r5, r7
 8001b58:	d02d      	beq.n	8001bb6 <__aeabi_dsub+0x212>
 8001b5a:	4c61      	ldr	r4, [pc, #388]	; (8001ce0 <__aeabi_dsub+0x33c>)
 8001b5c:	46a4      	mov	ip, r4
 8001b5e:	44b4      	add	ip, r6
 8001b60:	4664      	mov	r4, ip
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	d05c      	beq.n	8001c20 <__aeabi_dsub+0x27c>
 8001b66:	1b94      	subs	r4, r2, r6
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	2e00      	cmp	r6, #0
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_dsub+0x1cc>
 8001b6e:	e115      	b.n	8001d9c <__aeabi_dsub+0x3f8>
 8001b70:	464d      	mov	r5, r9
 8001b72:	431d      	orrs	r5, r3
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x1d4>
 8001b76:	e1c3      	b.n	8001f00 <__aeabi_dsub+0x55c>
 8001b78:	1e65      	subs	r5, r4, #1
 8001b7a:	2c01      	cmp	r4, #1
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x1dc>
 8001b7e:	e20c      	b.n	8001f9a <__aeabi_dsub+0x5f6>
 8001b80:	4e55      	ldr	r6, [pc, #340]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001b82:	42b4      	cmp	r4, r6
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dsub+0x1e4>
 8001b86:	e1f8      	b.n	8001f7a <__aeabi_dsub+0x5d6>
 8001b88:	46ac      	mov	ip, r5
 8001b8a:	e10e      	b.n	8001daa <__aeabi_dsub+0x406>
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x1f0>
 8001b92:	e136      	b.n	8001e02 <__aeabi_dsub+0x45e>
 8001b94:	0022      	movs	r2, r4
 8001b96:	3a01      	subs	r2, #1
 8001b98:	2c01      	cmp	r4, #1
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x1fa>
 8001b9c:	e1c6      	b.n	8001f2c <__aeabi_dsub+0x588>
 8001b9e:	4c4e      	ldr	r4, [pc, #312]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001ba0:	45a4      	cmp	ip, r4
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x202>
 8001ba4:	e0f4      	b.n	8001d90 <__aeabi_dsub+0x3ec>
 8001ba6:	4694      	mov	ip, r2
 8001ba8:	e731      	b.n	8001a0e <__aeabi_dsub+0x6a>
 8001baa:	2401      	movs	r4, #1
 8001bac:	4067      	eors	r7, r4
 8001bae:	46bb      	mov	fp, r7
 8001bb0:	42bd      	cmp	r5, r7
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dsub+0x212>
 8001bb4:	e71c      	b.n	80019f0 <__aeabi_dsub+0x4c>
 8001bb6:	4c4a      	ldr	r4, [pc, #296]	; (8001ce0 <__aeabi_dsub+0x33c>)
 8001bb8:	46a4      	mov	ip, r4
 8001bba:	44b4      	add	ip, r6
 8001bbc:	4664      	mov	r4, ip
 8001bbe:	2c00      	cmp	r4, #0
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x220>
 8001bc2:	e0cf      	b.n	8001d64 <__aeabi_dsub+0x3c0>
 8001bc4:	1b94      	subs	r4, r2, r6
 8001bc6:	46a4      	mov	ip, r4
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x22a>
 8001bcc:	e15c      	b.n	8001e88 <__aeabi_dsub+0x4e4>
 8001bce:	4e42      	ldr	r6, [pc, #264]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001bd0:	42b2      	cmp	r2, r6
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x232>
 8001bd4:	e1ec      	b.n	8001fb0 <__aeabi_dsub+0x60c>
 8001bd6:	2680      	movs	r6, #128	; 0x80
 8001bd8:	0436      	lsls	r6, r6, #16
 8001bda:	4333      	orrs	r3, r6
 8001bdc:	4664      	mov	r4, ip
 8001bde:	2c38      	cmp	r4, #56	; 0x38
 8001be0:	dd00      	ble.n	8001be4 <__aeabi_dsub+0x240>
 8001be2:	e1b3      	b.n	8001f4c <__aeabi_dsub+0x5a8>
 8001be4:	2c1f      	cmp	r4, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x246>
 8001be8:	e238      	b.n	800205c <__aeabi_dsub+0x6b8>
 8001bea:	2620      	movs	r6, #32
 8001bec:	1b36      	subs	r6, r6, r4
 8001bee:	001c      	movs	r4, r3
 8001bf0:	40b4      	lsls	r4, r6
 8001bf2:	464f      	mov	r7, r9
 8001bf4:	46a0      	mov	r8, r4
 8001bf6:	4664      	mov	r4, ip
 8001bf8:	40e7      	lsrs	r7, r4
 8001bfa:	4644      	mov	r4, r8
 8001bfc:	433c      	orrs	r4, r7
 8001bfe:	464f      	mov	r7, r9
 8001c00:	40b7      	lsls	r7, r6
 8001c02:	003e      	movs	r6, r7
 8001c04:	1e77      	subs	r7, r6, #1
 8001c06:	41be      	sbcs	r6, r7
 8001c08:	4334      	orrs	r4, r6
 8001c0a:	4666      	mov	r6, ip
 8001c0c:	40f3      	lsrs	r3, r6
 8001c0e:	18c9      	adds	r1, r1, r3
 8001c10:	1824      	adds	r4, r4, r0
 8001c12:	4284      	cmp	r4, r0
 8001c14:	419b      	sbcs	r3, r3
 8001c16:	425b      	negs	r3, r3
 8001c18:	4698      	mov	r8, r3
 8001c1a:	0016      	movs	r6, r2
 8001c1c:	4488      	add	r8, r1
 8001c1e:	e04e      	b.n	8001cbe <__aeabi_dsub+0x31a>
 8001c20:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <__aeabi_dsub+0x340>)
 8001c22:	1c74      	adds	r4, r6, #1
 8001c24:	4214      	tst	r4, r2
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x286>
 8001c28:	e0d6      	b.n	8001dd8 <__aeabi_dsub+0x434>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d000      	beq.n	8001c34 <__aeabi_dsub+0x290>
 8001c32:	e15b      	b.n	8001eec <__aeabi_dsub+0x548>
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x296>
 8001c38:	e1a5      	b.n	8001f86 <__aeabi_dsub+0x5e2>
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	d000      	beq.n	8001c42 <__aeabi_dsub+0x29e>
 8001c40:	e1bb      	b.n	8001fba <__aeabi_dsub+0x616>
 8001c42:	464a      	mov	r2, r9
 8001c44:	0759      	lsls	r1, r3, #29
 8001c46:	08d2      	lsrs	r2, r2, #3
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	e027      	b.n	8001c9e <__aeabi_dsub+0x2fa>
 8001c4e:	000a      	movs	r2, r1
 8001c50:	4302      	orrs	r2, r0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x2b2>
 8001c54:	e174      	b.n	8001f40 <__aeabi_dsub+0x59c>
 8001c56:	0022      	movs	r2, r4
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	2c01      	cmp	r4, #1
 8001c5c:	d005      	beq.n	8001c6a <__aeabi_dsub+0x2c6>
 8001c5e:	4c1e      	ldr	r4, [pc, #120]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001c60:	45a4      	cmp	ip, r4
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x2c2>
 8001c64:	e094      	b.n	8001d90 <__aeabi_dsub+0x3ec>
 8001c66:	4694      	mov	ip, r2
 8001c68:	e759      	b.n	8001b1e <__aeabi_dsub+0x17a>
 8001c6a:	4448      	add	r0, r9
 8001c6c:	4548      	cmp	r0, r9
 8001c6e:	4192      	sbcs	r2, r2
 8001c70:	185b      	adds	r3, r3, r1
 8001c72:	4698      	mov	r8, r3
 8001c74:	0004      	movs	r4, r0
 8001c76:	4252      	negs	r2, r2
 8001c78:	4490      	add	r8, r2
 8001c7a:	4643      	mov	r3, r8
 8001c7c:	2602      	movs	r6, #2
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	d500      	bpl.n	8001c84 <__aeabi_dsub+0x2e0>
 8001c82:	e0c4      	b.n	8001e0e <__aeabi_dsub+0x46a>
 8001c84:	3e01      	subs	r6, #1
 8001c86:	0763      	lsls	r3, r4, #29
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dsub+0x2e8>
 8001c8a:	e711      	b.n	8001ab0 <__aeabi_dsub+0x10c>
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	46b4      	mov	ip, r6
 8001c90:	0759      	lsls	r1, r3, #29
 8001c92:	08e2      	lsrs	r2, r4, #3
 8001c94:	430a      	orrs	r2, r1
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	490f      	ldr	r1, [pc, #60]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001c9a:	458c      	cmp	ip, r1
 8001c9c:	d040      	beq.n	8001d20 <__aeabi_dsub+0x37c>
 8001c9e:	4661      	mov	r1, ip
 8001ca0:	031b      	lsls	r3, r3, #12
 8001ca2:	0549      	lsls	r1, r1, #21
 8001ca4:	0b1b      	lsrs	r3, r3, #12
 8001ca6:	0d49      	lsrs	r1, r1, #21
 8001ca8:	e720      	b.n	8001aec <__aeabi_dsub+0x148>
 8001caa:	4301      	orrs	r1, r0
 8001cac:	000c      	movs	r4, r1
 8001cae:	1e61      	subs	r1, r4, #1
 8001cb0:	418c      	sbcs	r4, r1
 8001cb2:	444c      	add	r4, r9
 8001cb4:	454c      	cmp	r4, r9
 8001cb6:	4192      	sbcs	r2, r2
 8001cb8:	4252      	negs	r2, r2
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4498      	add	r8, r3
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	d5e0      	bpl.n	8001c86 <__aeabi_dsub+0x2e2>
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__aeabi_dsub+0x334>)
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	429e      	cmp	r6, r3
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x32a>
 8001ccc:	e09f      	b.n	8001e0e <__aeabi_dsub+0x46a>
 8001cce:	0031      	movs	r1, r6
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	e70a      	b.n	8001aec <__aeabi_dsub+0x148>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	ff7fffff 	.word	0xff7fffff
 8001ce0:	fffff801 	.word	0xfffff801
 8001ce4:	000007fe 	.word	0x000007fe
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x34a>
 8001cec:	e160      	b.n	8001fb0 <__aeabi_dsub+0x60c>
 8001cee:	000a      	movs	r2, r1
 8001cf0:	4302      	orrs	r2, r0
 8001cf2:	d04d      	beq.n	8001d90 <__aeabi_dsub+0x3ec>
 8001cf4:	464a      	mov	r2, r9
 8001cf6:	075c      	lsls	r4, r3, #29
 8001cf8:	08d2      	lsrs	r2, r2, #3
 8001cfa:	4322      	orrs	r2, r4
 8001cfc:	2480      	movs	r4, #128	; 0x80
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	0324      	lsls	r4, r4, #12
 8001d02:	4223      	tst	r3, r4
 8001d04:	d007      	beq.n	8001d16 <__aeabi_dsub+0x372>
 8001d06:	08ce      	lsrs	r6, r1, #3
 8001d08:	4226      	tst	r6, r4
 8001d0a:	d104      	bne.n	8001d16 <__aeabi_dsub+0x372>
 8001d0c:	465d      	mov	r5, fp
 8001d0e:	0033      	movs	r3, r6
 8001d10:	08c2      	lsrs	r2, r0, #3
 8001d12:	0749      	lsls	r1, r1, #29
 8001d14:	430a      	orrs	r2, r1
 8001d16:	0f51      	lsrs	r1, r2, #29
 8001d18:	00d2      	lsls	r2, r2, #3
 8001d1a:	08d2      	lsrs	r2, r2, #3
 8001d1c:	0749      	lsls	r1, r1, #29
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	0011      	movs	r1, r2
 8001d22:	4319      	orrs	r1, r3
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x384>
 8001d26:	e1c8      	b.n	80020ba <__aeabi_dsub+0x716>
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0309      	lsls	r1, r1, #12
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	49d5      	ldr	r1, [pc, #852]	; (8002088 <__aeabi_dsub+0x6e4>)
 8001d32:	0b1b      	lsrs	r3, r3, #12
 8001d34:	e6da      	b.n	8001aec <__aeabi_dsub+0x148>
 8001d36:	49d5      	ldr	r1, [pc, #852]	; (800208c <__aeabi_dsub+0x6e8>)
 8001d38:	1ab6      	subs	r6, r6, r2
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	e6b5      	b.n	8001aac <__aeabi_dsub+0x108>
 8001d40:	0020      	movs	r0, r4
 8001d42:	f000 fa4d 	bl	80021e0 <__clzsi2>
 8001d46:	0002      	movs	r2, r0
 8001d48:	3218      	adds	r2, #24
 8001d4a:	2a1f      	cmp	r2, #31
 8001d4c:	dc00      	bgt.n	8001d50 <__aeabi_dsub+0x3ac>
 8001d4e:	e68f      	b.n	8001a70 <__aeabi_dsub+0xcc>
 8001d50:	0023      	movs	r3, r4
 8001d52:	3808      	subs	r0, #8
 8001d54:	4083      	lsls	r3, r0
 8001d56:	2400      	movs	r4, #0
 8001d58:	e692      	b.n	8001a80 <__aeabi_dsub+0xdc>
 8001d5a:	4308      	orrs	r0, r1
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	1e50      	subs	r0, r2, #1
 8001d60:	4182      	sbcs	r2, r0
 8001d62:	e66d      	b.n	8001a40 <__aeabi_dsub+0x9c>
 8001d64:	4cca      	ldr	r4, [pc, #808]	; (8002090 <__aeabi_dsub+0x6ec>)
 8001d66:	1c72      	adds	r2, r6, #1
 8001d68:	4222      	tst	r2, r4
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x3ca>
 8001d6c:	e0ad      	b.n	8001eca <__aeabi_dsub+0x526>
 8001d6e:	464a      	mov	r2, r9
 8001d70:	431a      	orrs	r2, r3
 8001d72:	2e00      	cmp	r6, #0
 8001d74:	d1b8      	bne.n	8001ce8 <__aeabi_dsub+0x344>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x3d8>
 8001d7a:	e158      	b.n	800202e <__aeabi_dsub+0x68a>
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	4302      	orrs	r2, r0
 8001d80:	d000      	beq.n	8001d84 <__aeabi_dsub+0x3e0>
 8001d82:	e159      	b.n	8002038 <__aeabi_dsub+0x694>
 8001d84:	464a      	mov	r2, r9
 8001d86:	0759      	lsls	r1, r3, #29
 8001d88:	08d2      	lsrs	r2, r2, #3
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	e786      	b.n	8001c9e <__aeabi_dsub+0x2fa>
 8001d90:	464a      	mov	r2, r9
 8001d92:	0759      	lsls	r1, r3, #29
 8001d94:	08d2      	lsrs	r2, r2, #3
 8001d96:	430a      	orrs	r2, r1
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	e7c1      	b.n	8001d20 <__aeabi_dsub+0x37c>
 8001d9c:	4dba      	ldr	r5, [pc, #744]	; (8002088 <__aeabi_dsub+0x6e4>)
 8001d9e:	42aa      	cmp	r2, r5
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x400>
 8001da2:	e11e      	b.n	8001fe2 <__aeabi_dsub+0x63e>
 8001da4:	2580      	movs	r5, #128	; 0x80
 8001da6:	042d      	lsls	r5, r5, #16
 8001da8:	432b      	orrs	r3, r5
 8001daa:	4664      	mov	r4, ip
 8001dac:	2c38      	cmp	r4, #56	; 0x38
 8001dae:	dc5d      	bgt.n	8001e6c <__aeabi_dsub+0x4c8>
 8001db0:	2c1f      	cmp	r4, #31
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dsub+0x412>
 8001db4:	e0d0      	b.n	8001f58 <__aeabi_dsub+0x5b4>
 8001db6:	2520      	movs	r5, #32
 8001db8:	4667      	mov	r7, ip
 8001dba:	1b2d      	subs	r5, r5, r4
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	001c      	movs	r4, r3
 8001dc0:	40fe      	lsrs	r6, r7
 8001dc2:	40ac      	lsls	r4, r5
 8001dc4:	4334      	orrs	r4, r6
 8001dc6:	464e      	mov	r6, r9
 8001dc8:	40ae      	lsls	r6, r5
 8001dca:	0035      	movs	r5, r6
 8001dcc:	40fb      	lsrs	r3, r7
 8001dce:	1e6e      	subs	r6, r5, #1
 8001dd0:	41b5      	sbcs	r5, r6
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	432c      	orrs	r4, r5
 8001dd6:	e04e      	b.n	8001e76 <__aeabi_dsub+0x4d2>
 8001dd8:	464a      	mov	r2, r9
 8001dda:	1a14      	subs	r4, r2, r0
 8001ddc:	45a1      	cmp	r9, r4
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	4252      	negs	r2, r2
 8001de2:	4690      	mov	r8, r2
 8001de4:	1a5f      	subs	r7, r3, r1
 8001de6:	003a      	movs	r2, r7
 8001de8:	4647      	mov	r7, r8
 8001dea:	1bd2      	subs	r2, r2, r7
 8001dec:	4690      	mov	r8, r2
 8001dee:	0212      	lsls	r2, r2, #8
 8001df0:	d500      	bpl.n	8001df4 <__aeabi_dsub+0x450>
 8001df2:	e08b      	b.n	8001f0c <__aeabi_dsub+0x568>
 8001df4:	4642      	mov	r2, r8
 8001df6:	4322      	orrs	r2, r4
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x458>
 8001dfa:	e630      	b.n	8001a5e <__aeabi_dsub+0xba>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2500      	movs	r5, #0
 8001e00:	e74d      	b.n	8001c9e <__aeabi_dsub+0x2fa>
 8001e02:	464a      	mov	r2, r9
 8001e04:	0759      	lsls	r1, r3, #29
 8001e06:	08d2      	lsrs	r2, r2, #3
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	e744      	b.n	8001c98 <__aeabi_dsub+0x2f4>
 8001e0e:	4642      	mov	r2, r8
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <__aeabi_dsub+0x6e8>)
 8001e12:	0861      	lsrs	r1, r4, #1
 8001e14:	401a      	ands	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4014      	ands	r4, r2
 8001e1c:	430c      	orrs	r4, r1
 8001e1e:	07da      	lsls	r2, r3, #31
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	4698      	mov	r8, r3
 8001e24:	4314      	orrs	r4, r2
 8001e26:	e641      	b.n	8001aac <__aeabi_dsub+0x108>
 8001e28:	001a      	movs	r2, r3
 8001e2a:	3e1f      	subs	r6, #31
 8001e2c:	40f2      	lsrs	r2, r6
 8001e2e:	0016      	movs	r6, r2
 8001e30:	2920      	cmp	r1, #32
 8001e32:	d003      	beq.n	8001e3c <__aeabi_dsub+0x498>
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	1a51      	subs	r1, r2, r1
 8001e38:	408b      	lsls	r3, r1
 8001e3a:	431c      	orrs	r4, r3
 8001e3c:	1e62      	subs	r2, r4, #1
 8001e3e:	4194      	sbcs	r4, r2
 8001e40:	2300      	movs	r3, #0
 8001e42:	4334      	orrs	r4, r6
 8001e44:	4698      	mov	r8, r3
 8001e46:	2600      	movs	r6, #0
 8001e48:	e71d      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 8001e4a:	000c      	movs	r4, r1
 8001e4c:	3a20      	subs	r2, #32
 8001e4e:	40d4      	lsrs	r4, r2
 8001e50:	0022      	movs	r2, r4
 8001e52:	4664      	mov	r4, ip
 8001e54:	2c20      	cmp	r4, #32
 8001e56:	d004      	beq.n	8001e62 <__aeabi_dsub+0x4be>
 8001e58:	2740      	movs	r7, #64	; 0x40
 8001e5a:	1b3f      	subs	r7, r7, r4
 8001e5c:	40b9      	lsls	r1, r7
 8001e5e:	4308      	orrs	r0, r1
 8001e60:	4680      	mov	r8, r0
 8001e62:	4644      	mov	r4, r8
 8001e64:	1e61      	subs	r1, r4, #1
 8001e66:	418c      	sbcs	r4, r1
 8001e68:	4322      	orrs	r2, r4
 8001e6a:	e5e9      	b.n	8001a40 <__aeabi_dsub+0x9c>
 8001e6c:	464c      	mov	r4, r9
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	001c      	movs	r4, r3
 8001e72:	1e63      	subs	r3, r4, #1
 8001e74:	419c      	sbcs	r4, r3
 8001e76:	1b04      	subs	r4, r0, r4
 8001e78:	42a0      	cmp	r0, r4
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	1acb      	subs	r3, r1, r3
 8001e80:	4698      	mov	r8, r3
 8001e82:	465d      	mov	r5, fp
 8001e84:	0016      	movs	r6, r2
 8001e86:	e5e2      	b.n	8001a4e <__aeabi_dsub+0xaa>
 8001e88:	464e      	mov	r6, r9
 8001e8a:	431e      	orrs	r6, r3
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x4ec>
 8001e8e:	e0ae      	b.n	8001fee <__aeabi_dsub+0x64a>
 8001e90:	1e66      	subs	r6, r4, #1
 8001e92:	2c01      	cmp	r4, #1
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x4f4>
 8001e96:	e0fd      	b.n	8002094 <__aeabi_dsub+0x6f0>
 8001e98:	4f7b      	ldr	r7, [pc, #492]	; (8002088 <__aeabi_dsub+0x6e4>)
 8001e9a:	42bc      	cmp	r4, r7
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x4fc>
 8001e9e:	e107      	b.n	80020b0 <__aeabi_dsub+0x70c>
 8001ea0:	46b4      	mov	ip, r6
 8001ea2:	e69b      	b.n	8001bdc <__aeabi_dsub+0x238>
 8001ea4:	4664      	mov	r4, ip
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	1b12      	subs	r2, r2, r4
 8001eaa:	000c      	movs	r4, r1
 8001eac:	4094      	lsls	r4, r2
 8001eae:	0007      	movs	r7, r0
 8001eb0:	4090      	lsls	r0, r2
 8001eb2:	46a0      	mov	r8, r4
 8001eb4:	4664      	mov	r4, ip
 8001eb6:	1e42      	subs	r2, r0, #1
 8001eb8:	4190      	sbcs	r0, r2
 8001eba:	4662      	mov	r2, ip
 8001ebc:	40e7      	lsrs	r7, r4
 8001ebe:	4644      	mov	r4, r8
 8001ec0:	40d1      	lsrs	r1, r2
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	4304      	orrs	r4, r0
 8001ec6:	185b      	adds	r3, r3, r1
 8001ec8:	e6f3      	b.n	8001cb2 <__aeabi_dsub+0x30e>
 8001eca:	4c6f      	ldr	r4, [pc, #444]	; (8002088 <__aeabi_dsub+0x6e4>)
 8001ecc:	42a2      	cmp	r2, r4
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x52e>
 8001ed0:	e0d5      	b.n	800207e <__aeabi_dsub+0x6da>
 8001ed2:	4448      	add	r0, r9
 8001ed4:	185b      	adds	r3, r3, r1
 8001ed6:	4548      	cmp	r0, r9
 8001ed8:	4189      	sbcs	r1, r1
 8001eda:	4249      	negs	r1, r1
 8001edc:	185b      	adds	r3, r3, r1
 8001ede:	07dc      	lsls	r4, r3, #31
 8001ee0:	0840      	lsrs	r0, r0, #1
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	0016      	movs	r6, r2
 8001ee8:	4304      	orrs	r4, r0
 8001eea:	e6cc      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x54e>
 8001ef0:	e082      	b.n	8001ff8 <__aeabi_dsub+0x654>
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	4302      	orrs	r2, r0
 8001ef6:	d140      	bne.n	8001f7a <__aeabi_dsub+0x5d6>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	2500      	movs	r5, #0
 8001efc:	031b      	lsls	r3, r3, #12
 8001efe:	e713      	b.n	8001d28 <__aeabi_dsub+0x384>
 8001f00:	074b      	lsls	r3, r1, #29
 8001f02:	08c2      	lsrs	r2, r0, #3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	465d      	mov	r5, fp
 8001f08:	08cb      	lsrs	r3, r1, #3
 8001f0a:	e6c5      	b.n	8001c98 <__aeabi_dsub+0x2f4>
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	1a84      	subs	r4, r0, r2
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	4192      	sbcs	r2, r2
 8001f14:	1acb      	subs	r3, r1, r3
 8001f16:	4252      	negs	r2, r2
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	4698      	mov	r8, r3
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	e59e      	b.n	8001a5e <__aeabi_dsub+0xba>
 8001f20:	464a      	mov	r2, r9
 8001f22:	0759      	lsls	r1, r3, #29
 8001f24:	08d2      	lsrs	r2, r2, #3
 8001f26:	430a      	orrs	r2, r1
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	e6f9      	b.n	8001d20 <__aeabi_dsub+0x37c>
 8001f2c:	464a      	mov	r2, r9
 8001f2e:	1a14      	subs	r4, r2, r0
 8001f30:	45a1      	cmp	r9, r4
 8001f32:	4192      	sbcs	r2, r2
 8001f34:	1a5b      	subs	r3, r3, r1
 8001f36:	4252      	negs	r2, r2
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	4698      	mov	r8, r3
 8001f3c:	2601      	movs	r6, #1
 8001f3e:	e586      	b.n	8001a4e <__aeabi_dsub+0xaa>
 8001f40:	464a      	mov	r2, r9
 8001f42:	0759      	lsls	r1, r3, #29
 8001f44:	08d2      	lsrs	r2, r2, #3
 8001f46:	430a      	orrs	r2, r1
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	e6a5      	b.n	8001c98 <__aeabi_dsub+0x2f4>
 8001f4c:	464c      	mov	r4, r9
 8001f4e:	4323      	orrs	r3, r4
 8001f50:	001c      	movs	r4, r3
 8001f52:	1e63      	subs	r3, r4, #1
 8001f54:	419c      	sbcs	r4, r3
 8001f56:	e65b      	b.n	8001c10 <__aeabi_dsub+0x26c>
 8001f58:	4665      	mov	r5, ip
 8001f5a:	001e      	movs	r6, r3
 8001f5c:	3d20      	subs	r5, #32
 8001f5e:	40ee      	lsrs	r6, r5
 8001f60:	2c20      	cmp	r4, #32
 8001f62:	d005      	beq.n	8001f70 <__aeabi_dsub+0x5cc>
 8001f64:	2540      	movs	r5, #64	; 0x40
 8001f66:	1b2d      	subs	r5, r5, r4
 8001f68:	40ab      	lsls	r3, r5
 8001f6a:	464c      	mov	r4, r9
 8001f6c:	431c      	orrs	r4, r3
 8001f6e:	46a2      	mov	sl, r4
 8001f70:	4654      	mov	r4, sl
 8001f72:	1e63      	subs	r3, r4, #1
 8001f74:	419c      	sbcs	r4, r3
 8001f76:	4334      	orrs	r4, r6
 8001f78:	e77d      	b.n	8001e76 <__aeabi_dsub+0x4d2>
 8001f7a:	074b      	lsls	r3, r1, #29
 8001f7c:	08c2      	lsrs	r2, r0, #3
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	465d      	mov	r5, fp
 8001f82:	08cb      	lsrs	r3, r1, #3
 8001f84:	e6cc      	b.n	8001d20 <__aeabi_dsub+0x37c>
 8001f86:	000a      	movs	r2, r1
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x5ea>
 8001f8c:	e736      	b.n	8001dfc <__aeabi_dsub+0x458>
 8001f8e:	074b      	lsls	r3, r1, #29
 8001f90:	08c2      	lsrs	r2, r0, #3
 8001f92:	431a      	orrs	r2, r3
 8001f94:	465d      	mov	r5, fp
 8001f96:	08cb      	lsrs	r3, r1, #3
 8001f98:	e681      	b.n	8001c9e <__aeabi_dsub+0x2fa>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	1a84      	subs	r4, r0, r2
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	4192      	sbcs	r2, r2
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	4252      	negs	r2, r2
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	4698      	mov	r8, r3
 8001faa:	465d      	mov	r5, fp
 8001fac:	2601      	movs	r6, #1
 8001fae:	e54e      	b.n	8001a4e <__aeabi_dsub+0xaa>
 8001fb0:	074b      	lsls	r3, r1, #29
 8001fb2:	08c2      	lsrs	r2, r0, #3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	08cb      	lsrs	r3, r1, #3
 8001fb8:	e6b2      	b.n	8001d20 <__aeabi_dsub+0x37c>
 8001fba:	464a      	mov	r2, r9
 8001fbc:	1a14      	subs	r4, r2, r0
 8001fbe:	45a1      	cmp	r9, r4
 8001fc0:	4192      	sbcs	r2, r2
 8001fc2:	1a5f      	subs	r7, r3, r1
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	1aba      	subs	r2, r7, r2
 8001fc8:	4690      	mov	r8, r2
 8001fca:	0212      	lsls	r2, r2, #8
 8001fcc:	d56b      	bpl.n	80020a6 <__aeabi_dsub+0x702>
 8001fce:	464a      	mov	r2, r9
 8001fd0:	1a84      	subs	r4, r0, r2
 8001fd2:	42a0      	cmp	r0, r4
 8001fd4:	4192      	sbcs	r2, r2
 8001fd6:	1acb      	subs	r3, r1, r3
 8001fd8:	4252      	negs	r2, r2
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	4698      	mov	r8, r3
 8001fde:	465d      	mov	r5, fp
 8001fe0:	e564      	b.n	8001aac <__aeabi_dsub+0x108>
 8001fe2:	074b      	lsls	r3, r1, #29
 8001fe4:	08c2      	lsrs	r2, r0, #3
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	465d      	mov	r5, fp
 8001fea:	08cb      	lsrs	r3, r1, #3
 8001fec:	e698      	b.n	8001d20 <__aeabi_dsub+0x37c>
 8001fee:	074b      	lsls	r3, r1, #29
 8001ff0:	08c2      	lsrs	r2, r0, #3
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	08cb      	lsrs	r3, r1, #3
 8001ff6:	e64f      	b.n	8001c98 <__aeabi_dsub+0x2f4>
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	4302      	orrs	r2, r0
 8001ffc:	d090      	beq.n	8001f20 <__aeabi_dsub+0x57c>
 8001ffe:	464a      	mov	r2, r9
 8002000:	075c      	lsls	r4, r3, #29
 8002002:	08d2      	lsrs	r2, r2, #3
 8002004:	4314      	orrs	r4, r2
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	4213      	tst	r3, r2
 800200e:	d008      	beq.n	8002022 <__aeabi_dsub+0x67e>
 8002010:	08ce      	lsrs	r6, r1, #3
 8002012:	4216      	tst	r6, r2
 8002014:	d105      	bne.n	8002022 <__aeabi_dsub+0x67e>
 8002016:	08c0      	lsrs	r0, r0, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	4308      	orrs	r0, r1
 800201c:	0004      	movs	r4, r0
 800201e:	465d      	mov	r5, fp
 8002020:	0033      	movs	r3, r6
 8002022:	0f61      	lsrs	r1, r4, #29
 8002024:	00e2      	lsls	r2, r4, #3
 8002026:	0749      	lsls	r1, r1, #29
 8002028:	08d2      	lsrs	r2, r2, #3
 800202a:	430a      	orrs	r2, r1
 800202c:	e678      	b.n	8001d20 <__aeabi_dsub+0x37c>
 800202e:	074b      	lsls	r3, r1, #29
 8002030:	08c2      	lsrs	r2, r0, #3
 8002032:	431a      	orrs	r2, r3
 8002034:	08cb      	lsrs	r3, r1, #3
 8002036:	e632      	b.n	8001c9e <__aeabi_dsub+0x2fa>
 8002038:	4448      	add	r0, r9
 800203a:	185b      	adds	r3, r3, r1
 800203c:	4548      	cmp	r0, r9
 800203e:	4192      	sbcs	r2, r2
 8002040:	4698      	mov	r8, r3
 8002042:	4252      	negs	r2, r2
 8002044:	4490      	add	r8, r2
 8002046:	4643      	mov	r3, r8
 8002048:	0004      	movs	r4, r0
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	d400      	bmi.n	8002050 <__aeabi_dsub+0x6ac>
 800204e:	e61a      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 8002050:	4642      	mov	r2, r8
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <__aeabi_dsub+0x6e8>)
 8002054:	2601      	movs	r6, #1
 8002056:	401a      	ands	r2, r3
 8002058:	4690      	mov	r8, r2
 800205a:	e614      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 800205c:	4666      	mov	r6, ip
 800205e:	001f      	movs	r7, r3
 8002060:	3e20      	subs	r6, #32
 8002062:	40f7      	lsrs	r7, r6
 8002064:	2c20      	cmp	r4, #32
 8002066:	d005      	beq.n	8002074 <__aeabi_dsub+0x6d0>
 8002068:	2640      	movs	r6, #64	; 0x40
 800206a:	1b36      	subs	r6, r6, r4
 800206c:	40b3      	lsls	r3, r6
 800206e:	464c      	mov	r4, r9
 8002070:	431c      	orrs	r4, r3
 8002072:	46a2      	mov	sl, r4
 8002074:	4654      	mov	r4, sl
 8002076:	1e63      	subs	r3, r4, #1
 8002078:	419c      	sbcs	r4, r3
 800207a:	433c      	orrs	r4, r7
 800207c:	e5c8      	b.n	8001c10 <__aeabi_dsub+0x26c>
 800207e:	0011      	movs	r1, r2
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	e532      	b.n	8001aec <__aeabi_dsub+0x148>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	000007ff 	.word	0x000007ff
 800208c:	ff7fffff 	.word	0xff7fffff
 8002090:	000007fe 	.word	0x000007fe
 8002094:	464a      	mov	r2, r9
 8002096:	1814      	adds	r4, r2, r0
 8002098:	4284      	cmp	r4, r0
 800209a:	4192      	sbcs	r2, r2
 800209c:	185b      	adds	r3, r3, r1
 800209e:	4698      	mov	r8, r3
 80020a0:	4252      	negs	r2, r2
 80020a2:	4490      	add	r8, r2
 80020a4:	e5e9      	b.n	8001c7a <__aeabi_dsub+0x2d6>
 80020a6:	4642      	mov	r2, r8
 80020a8:	4322      	orrs	r2, r4
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x70a>
 80020ac:	e6a6      	b.n	8001dfc <__aeabi_dsub+0x458>
 80020ae:	e5ea      	b.n	8001c86 <__aeabi_dsub+0x2e2>
 80020b0:	074b      	lsls	r3, r1, #29
 80020b2:	08c2      	lsrs	r2, r0, #3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	08cb      	lsrs	r3, r1, #3
 80020b8:	e632      	b.n	8001d20 <__aeabi_dsub+0x37c>
 80020ba:	2200      	movs	r2, #0
 80020bc:	4901      	ldr	r1, [pc, #4]	; (80020c4 <__aeabi_dsub+0x720>)
 80020be:	0013      	movs	r3, r2
 80020c0:	e514      	b.n	8001aec <__aeabi_dsub+0x148>
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	000007ff 	.word	0x000007ff

080020c8 <__aeabi_d2iz>:
 80020c8:	000a      	movs	r2, r1
 80020ca:	b530      	push	{r4, r5, lr}
 80020cc:	4c13      	ldr	r4, [pc, #76]	; (800211c <__aeabi_d2iz+0x54>)
 80020ce:	0053      	lsls	r3, r2, #1
 80020d0:	0309      	lsls	r1, r1, #12
 80020d2:	0005      	movs	r5, r0
 80020d4:	0b09      	lsrs	r1, r1, #12
 80020d6:	2000      	movs	r0, #0
 80020d8:	0d5b      	lsrs	r3, r3, #21
 80020da:	0fd2      	lsrs	r2, r2, #31
 80020dc:	42a3      	cmp	r3, r4
 80020de:	dd04      	ble.n	80020ea <__aeabi_d2iz+0x22>
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <__aeabi_d2iz+0x58>)
 80020e2:	4283      	cmp	r3, r0
 80020e4:	dd02      	ble.n	80020ec <__aeabi_d2iz+0x24>
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <__aeabi_d2iz+0x5c>)
 80020e8:	18d0      	adds	r0, r2, r3
 80020ea:	bd30      	pop	{r4, r5, pc}
 80020ec:	2080      	movs	r0, #128	; 0x80
 80020ee:	0340      	lsls	r0, r0, #13
 80020f0:	4301      	orrs	r1, r0
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <__aeabi_d2iz+0x60>)
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	281f      	cmp	r0, #31
 80020f8:	dd08      	ble.n	800210c <__aeabi_d2iz+0x44>
 80020fa:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_d2iz+0x64>)
 80020fc:	1ac3      	subs	r3, r0, r3
 80020fe:	40d9      	lsrs	r1, r3
 8002100:	000b      	movs	r3, r1
 8002102:	4258      	negs	r0, r3
 8002104:	2a00      	cmp	r2, #0
 8002106:	d1f0      	bne.n	80020ea <__aeabi_d2iz+0x22>
 8002108:	0018      	movs	r0, r3
 800210a:	e7ee      	b.n	80020ea <__aeabi_d2iz+0x22>
 800210c:	4c08      	ldr	r4, [pc, #32]	; (8002130 <__aeabi_d2iz+0x68>)
 800210e:	40c5      	lsrs	r5, r0
 8002110:	46a4      	mov	ip, r4
 8002112:	4463      	add	r3, ip
 8002114:	4099      	lsls	r1, r3
 8002116:	000b      	movs	r3, r1
 8002118:	432b      	orrs	r3, r5
 800211a:	e7f2      	b.n	8002102 <__aeabi_d2iz+0x3a>
 800211c:	000003fe 	.word	0x000003fe
 8002120:	0000041d 	.word	0x0000041d
 8002124:	7fffffff 	.word	0x7fffffff
 8002128:	00000433 	.word	0x00000433
 800212c:	00000413 	.word	0x00000413
 8002130:	fffffbed 	.word	0xfffffbed

08002134 <__aeabi_i2d>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	2800      	cmp	r0, #0
 8002138:	d016      	beq.n	8002168 <__aeabi_i2d+0x34>
 800213a:	17c3      	asrs	r3, r0, #31
 800213c:	18c5      	adds	r5, r0, r3
 800213e:	405d      	eors	r5, r3
 8002140:	0fc4      	lsrs	r4, r0, #31
 8002142:	0028      	movs	r0, r5
 8002144:	f000 f84c 	bl	80021e0 <__clzsi2>
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <__aeabi_i2d+0x5c>)
 800214a:	1a12      	subs	r2, r2, r0
 800214c:	280a      	cmp	r0, #10
 800214e:	dc16      	bgt.n	800217e <__aeabi_i2d+0x4a>
 8002150:	0003      	movs	r3, r0
 8002152:	002e      	movs	r6, r5
 8002154:	3315      	adds	r3, #21
 8002156:	409e      	lsls	r6, r3
 8002158:	230b      	movs	r3, #11
 800215a:	1a18      	subs	r0, r3, r0
 800215c:	40c5      	lsrs	r5, r0
 800215e:	0553      	lsls	r3, r2, #21
 8002160:	032d      	lsls	r5, r5, #12
 8002162:	0b2d      	lsrs	r5, r5, #12
 8002164:	0d5b      	lsrs	r3, r3, #21
 8002166:	e003      	b.n	8002170 <__aeabi_i2d+0x3c>
 8002168:	2400      	movs	r4, #0
 800216a:	2300      	movs	r3, #0
 800216c:	2500      	movs	r5, #0
 800216e:	2600      	movs	r6, #0
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	432b      	orrs	r3, r5
 8002174:	07e4      	lsls	r4, r4, #31
 8002176:	4323      	orrs	r3, r4
 8002178:	0030      	movs	r0, r6
 800217a:	0019      	movs	r1, r3
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	380b      	subs	r0, #11
 8002180:	4085      	lsls	r5, r0
 8002182:	0553      	lsls	r3, r2, #21
 8002184:	032d      	lsls	r5, r5, #12
 8002186:	2600      	movs	r6, #0
 8002188:	0b2d      	lsrs	r5, r5, #12
 800218a:	0d5b      	lsrs	r3, r3, #21
 800218c:	e7f0      	b.n	8002170 <__aeabi_i2d+0x3c>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	0000041e 	.word	0x0000041e

08002194 <__aeabi_ui2d>:
 8002194:	b510      	push	{r4, lr}
 8002196:	1e04      	subs	r4, r0, #0
 8002198:	d010      	beq.n	80021bc <__aeabi_ui2d+0x28>
 800219a:	f000 f821 	bl	80021e0 <__clzsi2>
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <__aeabi_ui2d+0x48>)
 80021a0:	1a1b      	subs	r3, r3, r0
 80021a2:	280a      	cmp	r0, #10
 80021a4:	dc11      	bgt.n	80021ca <__aeabi_ui2d+0x36>
 80021a6:	220b      	movs	r2, #11
 80021a8:	0021      	movs	r1, r4
 80021aa:	1a12      	subs	r2, r2, r0
 80021ac:	40d1      	lsrs	r1, r2
 80021ae:	3015      	adds	r0, #21
 80021b0:	030a      	lsls	r2, r1, #12
 80021b2:	055b      	lsls	r3, r3, #21
 80021b4:	4084      	lsls	r4, r0
 80021b6:	0b12      	lsrs	r2, r2, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	e001      	b.n	80021c0 <__aeabi_ui2d+0x2c>
 80021bc:	2300      	movs	r3, #0
 80021be:	2200      	movs	r2, #0
 80021c0:	051b      	lsls	r3, r3, #20
 80021c2:	4313      	orrs	r3, r2
 80021c4:	0020      	movs	r0, r4
 80021c6:	0019      	movs	r1, r3
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	0022      	movs	r2, r4
 80021cc:	380b      	subs	r0, #11
 80021ce:	4082      	lsls	r2, r0
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	0312      	lsls	r2, r2, #12
 80021d4:	2400      	movs	r4, #0
 80021d6:	0b12      	lsrs	r2, r2, #12
 80021d8:	0d5b      	lsrs	r3, r3, #21
 80021da:	e7f1      	b.n	80021c0 <__aeabi_ui2d+0x2c>
 80021dc:	0000041e 	.word	0x0000041e

080021e0 <__clzsi2>:
 80021e0:	211c      	movs	r1, #28
 80021e2:	2301      	movs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	4298      	cmp	r0, r3
 80021e8:	d301      	bcc.n	80021ee <__clzsi2+0xe>
 80021ea:	0c00      	lsrs	r0, r0, #16
 80021ec:	3910      	subs	r1, #16
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	4298      	cmp	r0, r3
 80021f2:	d301      	bcc.n	80021f8 <__clzsi2+0x18>
 80021f4:	0a00      	lsrs	r0, r0, #8
 80021f6:	3908      	subs	r1, #8
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0x22>
 80021fe:	0900      	lsrs	r0, r0, #4
 8002200:	3904      	subs	r1, #4
 8002202:	a202      	add	r2, pc, #8	; (adr r2, 800220c <__clzsi2+0x2c>)
 8002204:	5c10      	ldrb	r0, [r2, r0]
 8002206:	1840      	adds	r0, r0, r1
 8002208:	4770      	bx	lr
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	02020304 	.word	0x02020304
 8002210:	01010101 	.word	0x01010101
	...

0800221c <function_table_init>:
#include <stdint.h>
#include <stdbool.h>

/* function table init */
void function_table_init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < MAX_FUNCS; i++) {
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	e007      	b.n	8002238 <function_table_init+0x1c>
		funcs[i] = empty_action_false;
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <function_table_init+0xa8>)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4926      	ldr	r1, [pc, #152]	; (80022c8 <function_table_init+0xac>)
 8002230:	50d1      	str	r1, [r2, r3]
	for (uint32_t i = 0; i < MAX_FUNCS; i++) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3301      	adds	r3, #1
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b1f      	cmp	r3, #31
 800223c:	d9f4      	bls.n	8002228 <function_table_init+0xc>
	}

	funcs[0] = is_empty;
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <function_table_init+0xa8>)
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <function_table_init+0xb0>)
 8002242:	601a      	str	r2, [r3, #0]
	funcs[1] = is_full;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <function_table_init+0xa8>)
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <function_table_init+0xb4>)
 8002248:	605a      	str	r2, [r3, #4]
	funcs[2] = lights_autooff;
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <function_table_init+0xa8>)
 800224c:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <function_table_init+0xb8>)
 800224e:	609a      	str	r2, [r3, #8]
	funcs[3] = lights_off;
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <function_table_init+0xa8>)
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <function_table_init+0xbc>)
 8002254:	60da      	str	r2, [r3, #12]
	funcs[4] = lights_on;
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <function_table_init+0xa8>)
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <function_table_init+0xc0>)
 800225a:	611a      	str	r2, [r3, #16]

	funcs[0+5] = climate_init;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <function_table_init+0xa8>)
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <function_table_init+0xc4>)
 8002260:	615a      	str	r2, [r3, #20]
	funcs[1+5] = climate_off;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <function_table_init+0xa8>)
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <function_table_init+0xc8>)
 8002266:	619a      	str	r2, [r3, #24]
	funcs[2+5] = climate_on;
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <function_table_init+0xa8>)
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <function_table_init+0xcc>)
 800226c:	61da      	str	r2, [r3, #28]
	funcs[3+5] = climate_standby;
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <function_table_init+0xa8>)
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <function_table_init+0xd0>)
 8002272:	621a      	str	r2, [r3, #32]
	funcs[4+5] = is_empty;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <function_table_init+0xa8>)
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <function_table_init+0xb0>)
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
	funcs[5+5] = is_full;
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <function_table_init+0xa8>)
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <function_table_init+0xb4>)
 800227e:	629a      	str	r2, [r3, #40]	; 0x28

	funcs[0+11] = fire_on;
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <function_table_init+0xa8>)
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <function_table_init+0xd4>)
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
	funcs[1+11] = fire_off;
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <function_table_init+0xa8>)
 8002288:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <function_table_init+0xd8>)
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
	funcs[2+11] = fire_temp_nominal;
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <function_table_init+0xa8>)
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <function_table_init+0xdc>)
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
	funcs[3+11] = fire_temp_rising;
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <function_table_init+0xa8>)
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <function_table_init+0xe0>)
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
	funcs[4+11] = fire_temp_rate;
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <function_table_init+0xa8>)
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <function_table_init+0xe4>)
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c
	funcs[5+11] = fire_stop;
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <function_table_init+0xa8>)
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <function_table_init+0xe8>)
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
	funcs[6+11] = fire_smoke;
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <function_table_init+0xa8>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <function_table_init+0xec>)
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
	funcs[7+11] = fire_timeout;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <function_table_init+0xa8>)
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <function_table_init+0xf0>)
 80022ae:	649a      	str	r2, [r3, #72]	; 0x48
	funcs[8+11] = fire_timeclear;
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <function_table_init+0xa8>)
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <function_table_init+0xf4>)
 80022b4:	64da      	str	r2, [r3, #76]	; 0x4c
	funcs[9+11] = fire_done;
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <function_table_init+0xa8>)
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <function_table_init+0xf8>)
 80022ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000280 	.word	0x20000280
 80022c8:	0800497f 	.word	0x0800497f
 80022cc:	08002319 	.word	0x08002319
 80022d0:	08002337 	.word	0x08002337
 80022d4:	080023c9 	.word	0x080023c9
 80022d8:	08002391 	.word	0x08002391
 80022dc:	08002359 	.word	0x08002359
 80022e0:	08002495 	.word	0x08002495
 80022e4:	08002445 	.word	0x08002445
 80022e8:	080023ed 	.word	0x080023ed
 80022ec:	080024e5 	.word	0x080024e5
 80022f0:	08002569 	.word	0x08002569
 80022f4:	080025a1 	.word	0x080025a1
 80022f8:	080025d9 	.word	0x080025d9
 80022fc:	080025ff 	.word	0x080025ff
 8002300:	08002625 	.word	0x08002625
 8002304:	080027dd 	.word	0x080027dd
 8002308:	080026d1 	.word	0x080026d1
 800230c:	08002709 	.word	0x08002709
 8002310:	08002779 	.word	0x08002779
 8002314:	08002861 	.word	0x08002861

08002318 <is_empty>:

/* user-defined */
	/* LIGHTNING SYSTEM */
int is_empty(void *data)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60fb      	str	r3, [r7, #12]
	return (room->people < 1);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	425a      	negs	r2, r3
 800232a:	4153      	adcs	r3, r2
 800232c:	b2db      	uxtb	r3, r3
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}

08002336 <is_full>:

int is_full(void *data)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return !is_empty(data);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ffe9 	bl	8002318 <is_empty>
 8002346:	0003      	movs	r3, r0
 8002348:	425a      	negs	r2, r3
 800234a:	4153      	adcs	r3, r2
 800234c:	b2db      	uxtb	r3, r3
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <lights_on>:

int lights_on(void *data)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60fb      	str	r3, [r7, #12]
	/* turn on the light automatically if possible */
	if (room->ldata->state == C_ON) {
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <lights_on+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <lights_on+0x34>)
 8002374:	2201      	movs	r2, #1
 8002376:	0019      	movs	r1, r3
 8002378:	f003 ffb2 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 800237c:	2300      	movs	r3, #0
 800237e:	e001      	b.n	8002384 <lights_on+0x2c>
	}
	return -1;
 8002380:	2301      	movs	r3, #1
 8002382:	425b      	negs	r3, r3
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}
 800238c:	48000800 	.word	0x48000800

08002390 <lights_off>:

int lights_off(void *data)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60fb      	str	r3, [r7, #12]
	/* turn off the light if it is on */
	if (room->ldata->state == C_OFF) {
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <lights_off+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <lights_off+0x34>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	0019      	movs	r1, r3
 80023b0:	f003 ff96 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e001      	b.n	80023bc <lights_off+0x2c>
	}
	return -1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	425b      	negs	r3, r3
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	48000800 	.word	0x48000800

080023c8 <lights_autooff>:

int lights_autooff(void *data)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <lights_autooff+0x20>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	0019      	movs	r1, r3
 80023da:	f003 ff81 	bl	80062e0 <HAL_GPIO_WritePin>
	return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	48000800 	.word	0x48000800

080023ec <climate_on>:

	/* CLIMATE SYSTEM */
int climate_on(void *data)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
	/* turn on automatically if possible */
	if (room->cdata->curr_temp < room->cdata->target_temp) {
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	da14      	bge.n	8002432 <climate_on+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <climate_on+0x54>)
 800240a:	2200      	movs	r2, #0
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	0018      	movs	r0, r3
 8002410:	f003 ff66 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <climate_on+0x54>)
 800241a:	2200      	movs	r2, #0
 800241c:	0019      	movs	r1, r3
 800241e:	f003 ff5f 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <climate_on+0x54>)
 8002424:	2201      	movs	r2, #1
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	0018      	movs	r0, r3
 800242a:	f003 ff59 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 800242e:	2300      	movs	r3, #0
 8002430:	e001      	b.n	8002436 <climate_on+0x4a>
	}
	return -1;
 8002432:	2301      	movs	r3, #1
 8002434:	425b      	negs	r3, r3
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b004      	add	sp, #16
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	48000800 	.word	0x48000800

08002444 <climate_off>:

int climate_off(void *data)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60fb      	str	r3, [r7, #12]
	/* turn off the climate control if it is on */
	if (room->cdata->state == C_ON) {
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <climate_off+0x40>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <climate_off+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0018      	movs	r0, r3
 8002462:	f003 ff3d 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4809      	ldr	r0, [pc, #36]	; (8002490 <climate_off+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	0019      	movs	r1, r3
 8002470:	f003 ff36 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <climate_off+0x4c>)
 8002476:	2201      	movs	r2, #1
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	0018      	movs	r0, r3
 800247c:	f003 ff30 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 8002480:	2300      	movs	r3, #0
 8002482:	e001      	b.n	8002488 <climate_off+0x44>
	}
	return -1;
 8002484:	2301      	movs	r3, #1
 8002486:	425b      	negs	r3, r3
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	48000800 	.word	0x48000800

08002494 <climate_init>:

int climate_init(void *data)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60fb      	str	r3, [r7, #12]
	if (room->cdata->state == C_OFF) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d114      	bne.n	80024d4 <climate_init+0x40>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <climate_init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	2140      	movs	r1, #64	; 0x40
 80024b0:	0018      	movs	r0, r3
 80024b2:	f003 ff15 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <climate_init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	0018      	movs	r0, r3
 80024be:	f003 ff0f 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4806      	ldr	r0, [pc, #24]	; (80024e0 <climate_init+0x4c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	0019      	movs	r1, r3
 80024cc:	f003 ff08 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e001      	b.n	80024d8 <climate_init+0x44>
	}
	return -1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	425b      	negs	r3, r3
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	48000800 	.word	0x48000800

080024e4 <climate_standby>:

int climate_standby(void *data)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
	/* dec temp every time */
	if (rand() % 100 < 20) {
 80024f0:	f006 fef6 	bl	80092e0 <rand>
 80024f4:	0003      	movs	r3, r0
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7fd ff9b 	bl	8000434 <__aeabi_idivmod>
 80024fe:	000b      	movs	r3, r1
 8002500:	2b13      	cmp	r3, #19
 8002502:	dc0c      	bgt.n	800251e <climate_standby+0x3a>
		room->cdata->curr_temp = room->cdata->prev_temp;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	6852      	ldr	r2, [r2, #4]
 800250e:	609a      	str	r2, [r3, #8]
		room->cdata->curr_temp += 1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	3201      	adds	r2, #1
 800251c:	609a      	str	r2, [r3, #8]
	}
	/* wait until temperature drops */
	if (room->cdata->curr_temp >= room->cdata->target_temp) {
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	429a      	cmp	r2, r3
 800252c:	db14      	blt.n	8002558 <climate_standby+0x74>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <climate_standby+0x80>)
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	0018      	movs	r0, r3
 8002536:	f003 fed3 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <climate_standby+0x80>)
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0018      	movs	r0, r3
 8002542:	f003 fecd 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <climate_standby+0x80>)
 800254c:	2201      	movs	r2, #1
 800254e:	0019      	movs	r1, r3
 8002550:	f003 fec6 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 8002554:	2300      	movs	r3, #0
 8002556:	e001      	b.n	800255c <climate_standby+0x78>
	}
	return -1;
 8002558:	2301      	movs	r3, #1
 800255a:	425b      	negs	r3, r3
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	48000800 	.word	0x48000800

08002568 <fire_on>:
#define MAX_TEMP_RATE 8
/* for demo only */
#define STOP_PROBABILITY 99

int fire_on(void *data)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60fb      	str	r3, [r7, #12]
	/* turn on the light automatically if possible */
	if (room->fdata->state == C_ON) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d108      	bne.n	8002590 <fire_on+0x28>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <fire_on+0x34>)
 8002584:	2201      	movs	r2, #1
 8002586:	0019      	movs	r1, r3
 8002588:	f003 feaa 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 800258c:	2300      	movs	r3, #0
 800258e:	e001      	b.n	8002594 <fire_on+0x2c>
	}
	return -1;
 8002590:	2301      	movs	r3, #1
 8002592:	425b      	negs	r3, r3
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	48000800 	.word	0x48000800

080025a0 <fire_off>:

int fire_off(void *data)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
	/* turn off the light if it is on */
	if (room->fdata->state == C_OFF) {
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <fire_off+0x28>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <fire_off+0x34>)
 80025bc:	2200      	movs	r2, #0
 80025be:	0019      	movs	r1, r3
 80025c0:	f003 fe8e 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e001      	b.n	80025cc <fire_off+0x2c>
	}
	return -1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	425b      	negs	r3, r3
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	48000800 	.word	0x48000800

080025d8 <fire_temp_nominal>:

int fire_temp_nominal(void *data)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
	/* if temp returned to normal */
	if (room->cdata->curr_temp < MAX_TEMPERATURE) {
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b22      	cmp	r3, #34	; 0x22
 80025ec:	dc01      	bgt.n	80025f2 <fire_temp_nominal+0x1a>
		return 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e001      	b.n	80025f6 <fire_temp_nominal+0x1e>
	}
	return -1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	425b      	negs	r3, r3
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}

080025fe <fire_temp_rising>:

int fire_temp_rising(void *data)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]
	/* if temp above threshold start being suspicious */
	if (room->cdata->curr_temp >= MAX_TEMPERATURE) {
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b22      	cmp	r3, #34	; 0x22
 8002612:	dd01      	ble.n	8002618 <fire_temp_rising+0x1a>
		return 0;
 8002614:	2300      	movs	r3, #0
 8002616:	e001      	b.n	800261c <fire_temp_rising+0x1e>
	}
	return -1;
 8002618:	2301      	movs	r3, #1
 800261a:	425b      	negs	r3, r3
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b004      	add	sp, #16
 8002622:	bd80      	pop	{r7, pc}

08002624 <fire_temp_rate>:

int fire_temp_rate(void *data)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60fb      	str	r3, [r7, #12]
	/* turn off the light if it is on */
	room->fdata->rate = room->cdata->curr_temp - room->cdata->prev_temp;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	1a8a      	subs	r2, r1, r2
 8002642:	60da      	str	r2, [r3, #12]
	if (room->fdata->rate >= MAX_TEMP_RATE) {
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b07      	cmp	r3, #7
 800264c:	dd35      	ble.n	80026ba <fire_temp_rate+0x96>
		/* for demo purposes only */
		room->fdata->smoke = rand() % 2;
 800264e:	f006 fe47 	bl	80092e0 <rand>
 8002652:	0003      	movs	r3, r0
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <fire_temp_rate+0xa4>)
 8002656:	4013      	ands	r3, r2
 8002658:	d504      	bpl.n	8002664 <fire_temp_rate+0x40>
 800265a:	3b01      	subs	r3, #1
 800265c:	2202      	movs	r2, #2
 800265e:	4252      	negs	r2, r2
 8002660:	4313      	orrs	r3, r2
 8002662:	3301      	adds	r3, #1
 8002664:	001a      	movs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	1e51      	subs	r1, r2, #1
 800266c:	418a      	sbcs	r2, r1
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	725a      	strb	r2, [r3, #9]
		/* start alarm */
		room->fdata->alarm = true;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2201      	movs	r2, #1
 8002678:	729a      	strb	r2, [r3, #10]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <fire_temp_rate+0xa8>)
 800267c:	2201      	movs	r2, #1
 800267e:	2140      	movs	r1, #64	; 0x40
 8002680:	0018      	movs	r0, r3
 8002682:	f003 fe2d 	bl	80062e0 <HAL_GPIO_WritePin>
		/* start timer */
		if (!room->fdata->timer) {
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	7a1b      	ldrb	r3, [r3, #8]
 800268c:	2201      	movs	r2, #1
 800268e:	4053      	eors	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00f      	beq.n	80026b6 <fire_temp_rate+0x92>
			room->fdata->timer = true;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2201      	movs	r2, #1
 800269c:	721a      	strb	r2, [r3, #8]
			room->fdata->timer_start = HAL_GetTick();
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689c      	ldr	r4, [r3, #8]
 80026a2:	f003 fb47 	bl	8005d34 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	6063      	str	r3, [r4, #4]
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <fire_temp_rate+0xa8>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	0018      	movs	r0, r3
 80026b2:	f003 fe15 	bl	80062e0 <HAL_GPIO_WritePin>
		}
		return 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e001      	b.n	80026be <fire_temp_rate+0x9a>
	}
	return -1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	425b      	negs	r3, r3
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b005      	add	sp, #20
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	80000001 	.word	0x80000001
 80026cc:	48000800 	.word	0x48000800

080026d0 <fire_smoke>:

int fire_smoke(void *data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60fb      	str	r3, [r7, #12]
	/* if smoke detected turn on water sprinklers */
	if (room->fdata->smoke) {
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	7a5b      	ldrb	r3, [r3, #9]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <fire_smoke+0x28>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <fire_smoke+0x34>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	0019      	movs	r1, r3
 80026f0:	f003 fdf6 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e001      	b.n	80026fc <fire_smoke+0x2c>
	}
	return -1;
 80026f8:	2301      	movs	r3, #1
 80026fa:	425b      	negs	r3, r3
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	48000800 	.word	0x48000800

08002708 <fire_timeout>:

int fire_timeout(void *data)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60fb      	str	r3, [r7, #12]
	/* timer fired */
	uint32_t dt = abs((int32_t)HAL_GetTick() - (int32_t)room->fdata->timer_start);
 8002714:	f003 fb0e 	bl	8005d34 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	001a      	movs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	17da      	asrs	r2, r3, #31
 8002726:	189b      	adds	r3, r3, r2
 8002728:	4053      	eors	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]

	if (dt > 5000 && room->fdata->timer) {
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <fire_timeout+0x68>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d917      	bls.n	8002764 <fire_timeout+0x5c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	7a1b      	ldrb	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <fire_timeout+0x5c>
		room->fdata->timer = false;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <fire_timeout+0x6c>)
 8002748:	2200      	movs	r2, #0
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0018      	movs	r0, r3
 800274e:	f003 fdc7 	bl	80062e0 <HAL_GPIO_WritePin>
		/* sprinklers */
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4807      	ldr	r0, [pc, #28]	; (8002774 <fire_timeout+0x6c>)
 8002758:	2201      	movs	r2, #1
 800275a:	0019      	movs	r1, r3
 800275c:	f003 fdc0 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 8002760:	2300      	movs	r3, #0
 8002762:	e001      	b.n	8002768 <fire_timeout+0x60>
	}
	return -1;
 8002764:	2301      	movs	r3, #1
 8002766:	425b      	negs	r3, r3
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00001388 	.word	0x00001388
 8002774:	48000800 	.word	0x48000800

08002778 <fire_timeclear>:

int fire_timeclear(void *data)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60fb      	str	r3, [r7, #12]
	/* timer fired */
	uint32_t dt = abs((int32_t)HAL_GetTick() - (int32_t)room->fdata->timer_start);
 8002784:	f003 fad6 	bl	8005d34 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	001a      	movs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	17da      	asrs	r2, r3, #31
 8002796:	189b      	adds	r3, r3, r2
 8002798:	4053      	eors	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]

	if (dt > 10000 && room->fdata->timer) {
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <fire_timeclear+0x5c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d910      	bls.n	80027c6 <fire_timeclear+0x4e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	7a1b      	ldrb	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <fire_timeclear+0x4e>
		room->fdata->timer = false;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <fire_timeclear+0x60>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0018      	movs	r0, r3
 80027be:	f003 fd8f 	bl	80062e0 <HAL_GPIO_WritePin>
		return 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e001      	b.n	80027ca <fire_timeclear+0x52>
	}
	return -1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	425b      	negs	r3, r3
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	00002710 	.word	0x00002710
 80027d8:	48000800 	.word	0x48000800

080027dc <fire_stop>:

int fire_stop(void *data)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
	/* for demo purposes only */
	if (rand() % 100 >= STOP_PROBABILITY) {
 80027e8:	f006 fd7a 	bl	80092e0 <rand>
 80027ec:	0003      	movs	r3, r0
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fe1f 	bl	8000434 <__aeabi_idivmod>
 80027f6:	000b      	movs	r3, r1
 80027f8:	2b62      	cmp	r3, #98	; 0x62
 80027fa:	dd28      	ble.n	800284e <fire_stop+0x72>
		room->fdata->timer = false;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	721a      	strb	r2, [r3, #8]
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <fire_stop+0x80>)
 8002806:	2200      	movs	r2, #0
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	0018      	movs	r0, r3
 800280c:	f003 fd68 	bl	80062e0 <HAL_GPIO_WritePin>

		room->fdata->alarm = false;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2200      	movs	r2, #0
 8002816:	729a      	strb	r2, [r3, #10]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <fire_stop+0x80>)
 800281a:	2200      	movs	r2, #0
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	0018      	movs	r0, r3
 8002820:	f003 fd5e 	bl	80062e0 <HAL_GPIO_WritePin>

		room->fdata->smoke = false;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	725a      	strb	r2, [r3, #9]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	480a      	ldr	r0, [pc, #40]	; (800285c <fire_stop+0x80>)
 8002832:	2200      	movs	r2, #0
 8002834:	0019      	movs	r1, r3
 8002836:	f003 fd53 	bl	80062e0 <HAL_GPIO_WritePin>

		room->cdata->curr_temp = 20;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2214      	movs	r2, #20
 8002840:	609a      	str	r2, [r3, #8]
		room->cdata->prev_temp = 20;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2214      	movs	r2, #20
 8002848:	605a      	str	r2, [r3, #4]
		return 0;
 800284a:	2300      	movs	r3, #0
 800284c:	e001      	b.n	8002852 <fire_stop+0x76>
	}
	return -1;
 800284e:	2301      	movs	r3, #1
 8002850:	425b      	negs	r3, r3
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	48000800 	.word	0x48000800

08002860 <fire_done>:

int fire_done(void *data)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	room_t *room = (room_t *)data;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60fb      	str	r3, [r7, #12]
	/* if temp above threshold start being sus */
	if (rand() % 100 >= STOP_PROBABILITY) {
 800286c:	f006 fd38 	bl	80092e0 <rand>
 8002870:	0003      	movs	r3, r0
 8002872:	2164      	movs	r1, #100	; 0x64
 8002874:	0018      	movs	r0, r3
 8002876:	f7fd fddd 	bl	8000434 <__aeabi_idivmod>
 800287a:	000b      	movs	r3, r1
 800287c:	2b62      	cmp	r3, #98	; 0x62
 800287e:	dd22      	ble.n	80028c6 <fire_done+0x66>
		room->fdata->timer = false;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	721a      	strb	r2, [r3, #8]

		room->fdata->alarm = false;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	729a      	strb	r2, [r3, #10]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <fire_done+0x74>)
 8002892:	2200      	movs	r2, #0
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	0018      	movs	r0, r3
 8002898:	f003 fd22 	bl	80062e0 <HAL_GPIO_WritePin>

		room->fdata->smoke = false;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	725a      	strb	r2, [r3, #9]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	480a      	ldr	r0, [pc, #40]	; (80028d4 <fire_done+0x74>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	0019      	movs	r1, r3
 80028ae:	f003 fd17 	bl	80062e0 <HAL_GPIO_WritePin>

		room->cdata->curr_temp = 20;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2214      	movs	r2, #20
 80028b8:	609a      	str	r2, [r3, #8]
		room->cdata->prev_temp = 20;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2214      	movs	r2, #20
 80028c0:	605a      	str	r2, [r3, #4]
		return 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e001      	b.n	80028ca <fire_done+0x6a>
	}
	return -1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	425b      	negs	r3, r3
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	48000800 	.word	0x48000800

080028d8 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <case_insensitive_strcmp+0x16>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e072      	b.n	80029d8 <case_insensitive_strcmp+0x100>
    }

    if (string1 == string2)
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d10d      	bne.n	8002916 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e06c      	b.n	80029d8 <case_insensitive_strcmp+0x100>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8002906:	2300      	movs	r3, #0
 8002908:	e066      	b.n	80029d8 <case_insensitive_strcmp+0x100>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	210f      	movs	r1, #15
 8002918:	187b      	adds	r3, r7, r1
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	187b      	adds	r3, r7, r1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <case_insensitive_strcmp+0x108>)
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	001a      	movs	r2, r3
 800292e:	2303      	movs	r3, #3
 8002930:	4013      	ands	r3, r2
 8002932:	2b01      	cmp	r3, #1
 8002934:	d104      	bne.n	8002940 <case_insensitive_strcmp+0x68>
 8002936:	187b      	adds	r3, r7, r1
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3320      	adds	r3, #32
 800293c:	001a      	movs	r2, r3
 800293e:	e002      	b.n	8002946 <case_insensitive_strcmp+0x6e>
 8002940:	230f      	movs	r3, #15
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	200e      	movs	r0, #14
 8002948:	183b      	adds	r3, r7, r0
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	7809      	ldrb	r1, [r1, #0]
 800294e:	7019      	strb	r1, [r3, #0]
 8002950:	183b      	adds	r3, r7, r0
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <case_insensitive_strcmp+0x108>)
 8002958:	18cb      	adds	r3, r1, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	0019      	movs	r1, r3
 800295e:	2303      	movs	r3, #3
 8002960:	400b      	ands	r3, r1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d103      	bne.n	800296e <case_insensitive_strcmp+0x96>
 8002966:	183b      	adds	r3, r7, r0
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	3320      	adds	r3, #32
 800296c:	e002      	b.n	8002974 <case_insensitive_strcmp+0x9c>
 800296e:	230e      	movs	r3, #14
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d0c2      	beq.n	80028fe <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8002978:	210d      	movs	r1, #13
 800297a:	187b      	adds	r3, r7, r1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	187b      	adds	r3, r7, r1
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <case_insensitive_strcmp+0x108>)
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	001a      	movs	r2, r3
 8002990:	2303      	movs	r3, #3
 8002992:	4013      	ands	r3, r2
 8002994:	2b01      	cmp	r3, #1
 8002996:	d104      	bne.n	80029a2 <case_insensitive_strcmp+0xca>
 8002998:	187b      	adds	r3, r7, r1
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3320      	adds	r3, #32
 800299e:	001a      	movs	r2, r3
 80029a0:	e002      	b.n	80029a8 <case_insensitive_strcmp+0xd0>
 80029a2:	230d      	movs	r3, #13
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	200c      	movs	r0, #12
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	7809      	ldrb	r1, [r1, #0]
 80029b0:	7019      	strb	r1, [r3, #0]
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <case_insensitive_strcmp+0x108>)
 80029ba:	18cb      	adds	r3, r1, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	0019      	movs	r1, r3
 80029c0:	2303      	movs	r3, #3
 80029c2:	400b      	ands	r3, r1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d103      	bne.n	80029d0 <case_insensitive_strcmp+0xf8>
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3320      	adds	r3, #32
 80029ce:	e002      	b.n	80029d6 <case_insensitive_strcmp+0xfe>
 80029d0:	230c      	movs	r3, #12
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	1ad3      	subs	r3, r2, r3
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800d16c 	.word	0x0800d16c

080029e4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2028      	movs	r0, #40	; 0x28
 80029f2:	4798      	blx	r3
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]
    if (node)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2228      	movs	r2, #40	; 0x28
 8002a02:	2100      	movs	r1, #0
 8002a04:	0018      	movs	r0, r3
 8002a06:	f006 fb8a 	bl	800911e <memset>
    }

    return node;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002a20:	e038      	b.n	8002a94 <cJSON_Delete+0x80>
    {
        next = item->next;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d108      	bne.n	8002a46 <cJSON_Delete+0x32>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff ffe7 	bl	8002a14 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d109      	bne.n	8002a66 <cJSON_Delete+0x52>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <cJSON_Delete+0x90>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	0018      	movs	r0, r3
 8002a64:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d109      	bne.n	8002a86 <cJSON_Delete+0x72>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <cJSON_Delete+0x90>)
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	0018      	movs	r0, r3
 8002a84:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <cJSON_Delete+0x90>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	4798      	blx	r3
        item = next;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1c3      	bne.n	8002a22 <cJSON_Delete+0xe>
    }
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000000 	.word	0x20000000

08002aa8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002aac:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b099      	sub	sp, #100	; 0x64
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    double number = 0;
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	653a      	str	r2, [r7, #80]	; 0x50
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8002aca:	234f      	movs	r3, #79	; 0x4f
 8002acc:	18fc      	adds	r4, r7, r3
 8002ace:	f7ff ffeb 	bl	8002aa8 <get_decimal_point>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <parse_number+0x34>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <parse_number+0x38>
    {
        return false;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e08f      	b.n	8002c0c <parse_number+0x158>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af0:	e030      	b.n	8002b54 <parse_number+0xa0>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	18cb      	adds	r3, r1, r3
 8002afe:	18d3      	adds	r3, r2, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b45      	cmp	r3, #69	; 0x45
 8002b04:	dc09      	bgt.n	8002b1a <parse_number+0x66>
 8002b06:	2b2b      	cmp	r3, #43	; 0x2b
 8002b08:	db33      	blt.n	8002b72 <parse_number+0xbe>
 8002b0a:	3b2b      	subs	r3, #43	; 0x2b
 8002b0c:	2b1a      	cmp	r3, #26
 8002b0e:	d830      	bhi.n	8002b72 <parse_number+0xbe>
 8002b10:	009a      	lsls	r2, r3, #2
 8002b12:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <parse_number+0x160>)
 8002b14:	18d3      	adds	r3, r2, r3
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	469f      	mov	pc, r3
 8002b1a:	2b65      	cmp	r3, #101	; 0x65
 8002b1c:	d129      	bne.n	8002b72 <parse_number+0xbe>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	18cb      	adds	r3, r1, r3
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	7819      	ldrb	r1, [r3, #0]
 8002b2e:	2308      	movs	r3, #8
 8002b30:	18fa      	adds	r2, r7, r3
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	1c0a      	adds	r2, r1, #0
 8002b38:	701a      	strb	r2, [r3, #0]
                break;
 8002b3a:	e008      	b.n	8002b4e <parse_number+0x9a>

            case '.':
                number_c_string[i] = decimal_point;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	18fa      	adds	r2, r7, r3
 8002b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b42:	18d3      	adds	r3, r2, r3
 8002b44:	224f      	movs	r2, #79	; 0x4f
 8002b46:	18ba      	adds	r2, r7, r2
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
                break;
 8002b4c:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b50:	3301      	adds	r3, #1
 8002b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	2b3e      	cmp	r3, #62	; 0x3e
 8002b58:	d80d      	bhi.n	8002b76 <parse_number+0xc2>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <parse_number+0xc2>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b66:	18d2      	adds	r2, r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3c0      	bcc.n	8002af2 <parse_number+0x3e>

            default:
                goto loop_end;
        }
    }
loop_end:
 8002b70:	e001      	b.n	8002b76 <parse_number+0xc2>
                goto loop_end;
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	e000      	b.n	8002b78 <parse_number+0xc4>
loop_end:
 8002b76:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 8002b78:	2108      	movs	r1, #8
 8002b7a:	187a      	adds	r2, r7, r1
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7e:	18d3      	adds	r3, r2, r3
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8002b84:	2348      	movs	r3, #72	; 0x48
 8002b86:	18fa      	adds	r2, r7, r3
 8002b88:	000c      	movs	r4, r1
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	0011      	movs	r1, r2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f007 fae2 	bl	800a158 <strtod>
 8002b94:	0002      	movs	r2, r0
 8002b96:	000b      	movs	r3, r1
 8002b98:	653a      	str	r2, [r7, #80]	; 0x50
 8002b9a:	657b      	str	r3, [r7, #84]	; 0x54
    if (number_c_string == after_end)
 8002b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d101      	bne.n	8002ba8 <parse_number+0xf4>
    {
        return false; /* parse_error */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e031      	b.n	8002c0c <parse_number+0x158>
    }

    item->valuedouble = number;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	618a      	str	r2, [r1, #24]
 8002bb0:	61cb      	str	r3, [r1, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8002bb2:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <parse_number+0x164>)
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <parse_number+0x168>)
 8002bb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bba:	f7fd fc75 	bl	80004a8 <__aeabi_dcmpge>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d003      	beq.n	8002bca <parse_number+0x116>
    {
        item->valueint = INT_MAX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <parse_number+0x16c>)
 8002bc6:	615a      	str	r2, [r3, #20]
 8002bc8:	e013      	b.n	8002bf2 <parse_number+0x13e>
    }
    else if (number <= (double)INT_MIN)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <parse_number+0x170>)
 8002bce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd2:	f7fd fc55 	bl	8000480 <__aeabi_dcmple>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d004      	beq.n	8002be4 <parse_number+0x130>
    {
        item->valueint = INT_MIN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	0612      	lsls	r2, r2, #24
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	e006      	b.n	8002bf2 <parse_number+0x13e>
    }
    else
    {
        item->valueint = (int)number;
 8002be4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002be6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be8:	f7ff fa6e 	bl	80020c8 <__aeabi_d2iz>
 8002bec:	0002      	movs	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bfe:	2208      	movs	r2, #8
 8002c00:	18ba      	adds	r2, r7, r2
 8002c02:	1a8a      	subs	r2, r1, r2
 8002c04:	189a      	adds	r2, r3, r2
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]
    return true;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b019      	add	sp, #100	; 0x64
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	0800d088 	.word	0x0800d088
 8002c18:	ffc00000 	.word	0xffc00000
 8002c1c:	41dfffff 	.word	0x41dfffff
 8002c20:	7fffffff 	.word	0x7fffffff
 8002c24:	c1e00000 	.word	0xc1e00000

08002c28 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	e04c      	b.n	8002cd8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	18d3      	adds	r3, r2, r3
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b2f      	cmp	r3, #47	; 0x2f
 8002c48:	d90f      	bls.n	8002c6a <parse_hex4+0x42>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	18d3      	adds	r3, r2, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b39      	cmp	r3, #57	; 0x39
 8002c54:	d809      	bhi.n	8002c6a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	18d3      	adds	r3, r2, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	001a      	movs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	18d3      	adds	r3, r2, r3
 8002c64:	3b30      	subs	r3, #48	; 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e02d      	b.n	8002cc6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d90f      	bls.n	8002c96 <parse_hex4+0x6e>
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	18d3      	adds	r3, r2, r3
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b46      	cmp	r3, #70	; 0x46
 8002c80:	d809      	bhi.n	8002c96 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	18d3      	adds	r3, r2, r3
 8002c90:	3b37      	subs	r3, #55	; 0x37
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e017      	b.n	8002cc6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	18d3      	adds	r3, r2, r3
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b60      	cmp	r3, #96	; 0x60
 8002ca0:	d90f      	bls.n	8002cc2 <parse_hex4+0x9a>
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	18d3      	adds	r3, r2, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b66      	cmp	r3, #102	; 0x66
 8002cac:	d809      	bhi.n	8002cc2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	18d3      	adds	r3, r2, r3
 8002cbc:	3b57      	subs	r3, #87	; 0x57
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e001      	b.n	8002cc6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e00c      	b.n	8002ce0 <parse_hex4+0xb8>
        }

        if (i < 3)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d802      	bhi.n	8002cd2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d9af      	bls.n	8002c3e <parse_hex4+0x16>
        }
    }

    return h;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002d00:	2323      	movs	r3, #35	; 0x23
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 8002d08:	2322      	movs	r3, #34	; 0x22
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 8002d10:	2321      	movs	r3, #33	; 0x21
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	dc00      	bgt.n	8002d2c <utf16_literal_to_utf8+0x44>
 8002d2a:	e0d6      	b.n	8002eda <utf16_literal_to_utf8+0x1f2>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	3302      	adds	r3, #2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff ff79 	bl	8002c28 <parse_hex4>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	23dc      	movs	r3, #220	; 0xdc
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d305      	bcc.n	8002d50 <utf16_literal_to_utf8+0x68>
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	23e0      	movs	r3, #224	; 0xe0
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d200      	bcs.n	8002d50 <utf16_literal_to_utf8+0x68>
 8002d4e:	e0c6      	b.n	8002ede <utf16_literal_to_utf8+0x1f6>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	23d8      	movs	r3, #216	; 0xd8
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d33f      	bcc.n	8002dda <utf16_literal_to_utf8+0xf2>
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	23dc      	movs	r3, #220	; 0xdc
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d23a      	bcs.n	8002dda <utf16_literal_to_utf8+0xf2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3306      	adds	r3, #6
 8002d68:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8002d6e:	2321      	movs	r3, #33	; 0x21
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	220c      	movs	r2, #12
 8002d74:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	dc00      	bgt.n	8002d82 <utf16_literal_to_utf8+0x9a>
 8002d80:	e0af      	b.n	8002ee2 <utf16_literal_to_utf8+0x1fa>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b5c      	cmp	r3, #92	; 0x5c
 8002d88:	d000      	beq.n	8002d8c <utf16_literal_to_utf8+0xa4>
 8002d8a:	e0ac      	b.n	8002ee6 <utf16_literal_to_utf8+0x1fe>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b75      	cmp	r3, #117	; 0x75
 8002d94:	d000      	beq.n	8002d98 <utf16_literal_to_utf8+0xb0>
 8002d96:	e0a6      	b.n	8002ee6 <utf16_literal_to_utf8+0x1fe>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff ff43 	bl	8002c28 <parse_hex4>
 8002da2:	0003      	movs	r3, r0
 8002da4:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	23dc      	movs	r3, #220	; 0xdc
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d200      	bcs.n	8002db2 <utf16_literal_to_utf8+0xca>
 8002db0:	e09b      	b.n	8002eea <utf16_literal_to_utf8+0x202>
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	23e0      	movs	r3, #224	; 0xe0
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d300      	bcc.n	8002dbe <utf16_literal_to_utf8+0xd6>
 8002dbc:	e095      	b.n	8002eea <utf16_literal_to_utf8+0x202>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <utf16_literal_to_utf8+0x214>)
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	059b      	lsls	r3, r3, #22
 8002dca:	0d9b      	lsrs	r3, r3, #22
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0252      	lsls	r2, r2, #9
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	4463      	add	r3, ip
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8002dd8:	e005      	b.n	8002de6 <utf16_literal_to_utf8+0xfe>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8002dda:	2321      	movs	r3, #33	; 0x21
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2206      	movs	r2, #6
 8002de0:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dea:	d804      	bhi.n	8002df6 <utf16_literal_to_utf8+0x10e>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8002dec:	2323      	movs	r3, #35	; 0x23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e028      	b.n	8002e48 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x800)
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d208      	bcs.n	8002e12 <utf16_literal_to_utf8+0x12a>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8002e00:	2323      	movs	r3, #35	; 0x23
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 8002e08:	2320      	movs	r3, #32
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	22c0      	movs	r2, #192	; 0xc0
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e01a      	b.n	8002e48 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint < 0x10000)
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d208      	bcs.n	8002e2e <utf16_literal_to_utf8+0x146>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002e1c:	2323      	movs	r3, #35	; 0x23
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2203      	movs	r2, #3
 8002e22:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8002e24:	2320      	movs	r3, #32
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	22e0      	movs	r2, #224	; 0xe0
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e00c      	b.n	8002e48 <utf16_literal_to_utf8+0x160>
    }
    else if (codepoint <= 0x10FFFF)
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	2388      	movs	r3, #136	; 0x88
 8002e32:	035b      	lsls	r3, r3, #13
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d25a      	bcs.n	8002eee <utf16_literal_to_utf8+0x206>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8002e38:	2323      	movs	r3, #35	; 0x23
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 8002e40:	2320      	movs	r3, #32
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	22f0      	movs	r2, #240	; 0xf0
 8002e46:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002e48:	2322      	movs	r3, #34	; 0x22
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2223      	movs	r2, #35	; 0x23
 8002e4e:	18ba      	adds	r2, r7, r2
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	3a01      	subs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e017      	b.n	8002e88 <utf16_literal_to_utf8+0x1a0>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	2022      	movs	r0, #34	; 0x22
 8002e68:	183b      	adds	r3, r7, r0
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	18cb      	adds	r3, r1, r3
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	4249      	negs	r1, r1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	3a01      	subs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	2322      	movs	r3, #34	; 0x22
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e2      	bne.n	8002e58 <utf16_literal_to_utf8+0x170>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8002e92:	2323      	movs	r3, #35	; 0x23
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d90a      	bls.n	8002eb2 <utf16_literal_to_utf8+0x1ca>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e007      	b.n	8002ec2 <utf16_literal_to_utf8+0x1da>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	217f      	movs	r1, #127	; 0x7f
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2323      	movs	r3, #35	; 0x23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	18d2      	adds	r2, r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8002ed2:	2321      	movs	r3, #33	; 0x21
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	e00b      	b.n	8002ef2 <utf16_literal_to_utf8+0x20a>
        goto fail;
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	e008      	b.n	8002ef0 <utf16_literal_to_utf8+0x208>
        goto fail;
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	e006      	b.n	8002ef0 <utf16_literal_to_utf8+0x208>
            goto fail;
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	e004      	b.n	8002ef0 <utf16_literal_to_utf8+0x208>
            goto fail;
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	e002      	b.n	8002ef0 <utf16_literal_to_utf8+0x208>
            goto fail;
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	e000      	b.n	8002ef0 <utf16_literal_to_utf8+0x208>
        goto fail;
 8002eee:	46c0      	nop			; (mov r8, r8)

fail:
    return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b00a      	add	sp, #40	; 0x28
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	000ffc00 	.word	0x000ffc00

08002f00 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	3301      	adds	r3, #1
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	18d3      	adds	r3, r2, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b22      	cmp	r3, #34	; 0x22
 8002f3c:	d000      	beq.n	8002f40 <parse_string+0x40>
 8002f3e:	e0d4      	b.n	80030ea <parse_string+0x1ea>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002f48:	e017      	b.n	8002f7a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b5c      	cmp	r3, #92	; 0x5c
 8002f50:	d110      	bne.n	8002f74 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d300      	bcc.n	8002f68 <parse_string+0x68>
 8002f66:	e0c2      	b.n	80030ee <parse_string+0x1ee>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61bb      	str	r3, [r7, #24]
                input_end++;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	3301      	adds	r3, #1
 8002f72:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	3301      	adds	r3, #1
 8002f78:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	001a      	movs	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d203      	bcs.n	8002f94 <parse_string+0x94>
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b22      	cmp	r3, #34	; 0x22
 8002f92:	d1da      	bne.n	8002f4a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d300      	bcc.n	8002fa8 <parse_string+0xa8>
 8002fa6:	e0a4      	b.n	80030f2 <parse_string+0x1f2>
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b22      	cmp	r3, #34	; 0x22
 8002fae:	d000      	beq.n	8002fb2 <parse_string+0xb2>
 8002fb0:	e09f      	b.n	80030f2 <parse_string+0x1f2>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	18d3      	adds	r3, r2, r3
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	3201      	adds	r2, #1
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	4798      	blx	r3
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d100      	bne.n	8002fe0 <parse_string+0xe0>
 8002fde:	e08a      	b.n	80030f6 <parse_string+0x1f6>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8002fe4:	e066      	b.n	80030b4 <parse_string+0x1b4>
    {
        if (*input_pointer != '\\')
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b5c      	cmp	r3, #92	; 0x5c
 8002fec:	d008      	beq.n	8003000 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	1c53      	adds	r3, r2, #1
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	60f9      	str	r1, [r7, #12]
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e059      	b.n	80030b4 <parse_string+0x1b4>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8003000:	2317      	movs	r3, #23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	dc00      	bgt.n	8003014 <parse_string+0x114>
 8003012:	e072      	b.n	80030fa <parse_string+0x1fa>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3301      	adds	r3, #1
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b75      	cmp	r3, #117	; 0x75
 800301c:	dd00      	ble.n	8003020 <parse_string+0x120>
 800301e:	e06e      	b.n	80030fe <parse_string+0x1fe>
 8003020:	2b5c      	cmp	r3, #92	; 0x5c
 8003022:	da04      	bge.n	800302e <parse_string+0x12e>
 8003024:	2b22      	cmp	r3, #34	; 0x22
 8003026:	d028      	beq.n	800307a <parse_string+0x17a>
 8003028:	2b2f      	cmp	r3, #47	; 0x2f
 800302a:	d026      	beq.n	800307a <parse_string+0x17a>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800302c:	e067      	b.n	80030fe <parse_string+0x1fe>
 800302e:	3b5c      	subs	r3, #92	; 0x5c
 8003030:	2b19      	cmp	r3, #25
 8003032:	d864      	bhi.n	80030fe <parse_string+0x1fe>
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <parse_string+0x234>)
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	469f      	mov	pc, r3
                    *output_pointer++ = '\b';
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	2208      	movs	r2, #8
 8003046:	701a      	strb	r2, [r3, #0]
                    break;
 8003048:	e02e      	b.n	80030a8 <parse_string+0x1a8>
                    *output_pointer++ = '\f';
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	220c      	movs	r2, #12
 8003052:	701a      	strb	r2, [r3, #0]
                    break;
 8003054:	e028      	b.n	80030a8 <parse_string+0x1a8>
                    *output_pointer++ = '\n';
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	60fa      	str	r2, [r7, #12]
 800305c:	220a      	movs	r2, #10
 800305e:	701a      	strb	r2, [r3, #0]
                    break;
 8003060:	e022      	b.n	80030a8 <parse_string+0x1a8>
                    *output_pointer++ = '\r';
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	60fa      	str	r2, [r7, #12]
 8003068:	220d      	movs	r2, #13
 800306a:	701a      	strb	r2, [r3, #0]
                    break;
 800306c:	e01c      	b.n	80030a8 <parse_string+0x1a8>
                    *output_pointer++ = '\t';
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	2209      	movs	r2, #9
 8003076:	701a      	strb	r2, [r3, #0]
                    break;
 8003078:	e016      	b.n	80030a8 <parse_string+0x1a8>
                    *output_pointer++ = input_pointer[1];
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	7852      	ldrb	r2, [r2, #1]
 8003084:	701a      	strb	r2, [r3, #0]
                    break;
 8003086:	e00f      	b.n	80030a8 <parse_string+0x1a8>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8003088:	2517      	movs	r5, #23
 800308a:	197c      	adds	r4, r7, r5
 800308c:	230c      	movs	r3, #12
 800308e:	18fa      	adds	r2, r7, r3
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fe27 	bl	8002ce8 <utf16_literal_to_utf8>
 800309a:	0003      	movs	r3, r0
 800309c:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 800309e:	197b      	adds	r3, r7, r5
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02d      	beq.n	8003102 <parse_string+0x202>
                    break;
 80030a6:	46c0      	nop			; (mov r8, r8)
            }
            input_pointer += sequence_length;
 80030a8:	2317      	movs	r3, #23
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d394      	bcc.n	8002fe6 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2210      	movs	r2, #16
 80030c6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	001a      	movs	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	609a      	str	r2, [r3, #8]

    return true;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01f      	b.n	800312a <parse_string+0x22a>
        goto fail;
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	e00a      	b.n	8003104 <parse_string+0x204>
                    goto fail;
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	e008      	b.n	8003104 <parse_string+0x204>
            goto fail; /* string ended unexpectedly */
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	e006      	b.n	8003104 <parse_string+0x204>
            goto fail; /* allocation failure */
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	e004      	b.n	8003104 <parse_string+0x204>
                goto fail;
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	e002      	b.n	8003104 <parse_string+0x204>
                    goto fail;
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	e000      	b.n	8003104 <parse_string+0x204>
                        goto fail;
 8003102:	46c0      	nop			; (mov r8, r8)

fail:
    if (output != NULL)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <parse_string+0x214>
    {
        input_buffer->hooks.deallocate(output);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	0010      	movs	r0, r2
 8003112:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <parse_string+0x228>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	001a      	movs	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	609a      	str	r2, [r3, #8]
    }

    return false;
 8003128:	2300      	movs	r3, #0
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b00a      	add	sp, #40	; 0x28
 8003130:	bdb0      	pop	{r4, r5, r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	0800d0f4 	.word	0x0800d0f4

08003138 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <buffer_skip_whitespace+0x16>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	e02c      	b.n	80031ac <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <buffer_skip_whitespace+0x2c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d306      	bcc.n	8003172 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	e021      	b.n	80031ac <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <buffer_skip_whitespace+0x5c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <buffer_skip_whitespace+0x5c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b20      	cmp	r3, #32
 8003192:	d9e9      	bls.n	8003168 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d104      	bne.n	80031aa <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <skip_utf8_bom+0x1e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <skip_utf8_bom+0x1e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <skip_utf8_bom+0x22>
    {
        return NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e01b      	b.n	800320e <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <skip_utf8_bom+0x58>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d210      	bcs.n	800320c <skip_utf8_bom+0x58>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	4908      	ldr	r1, [pc, #32]	; (8003218 <skip_utf8_bom+0x64>)
 80031f6:	2203      	movs	r2, #3
 80031f8:	0018      	movs	r0, r3
 80031fa:	f006 f94b 	bl	8009494 <strncmp>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d104      	bne.n	800320c <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	1cda      	adds	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800320c:	687b      	ldr	r3, [r7, #4]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	0800c3e8 	.word	0x0800c3e8

0800321c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	e00d      	b.n	800324e <cJSON_ParseWithOpts+0x32>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0018      	movs	r0, r3
 8003236:	f7fc ff71 	bl	800011c <strlen>
 800323a:	0003      	movs	r3, r0
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f806 	bl	8003258 <cJSON_ParseWithLengthOpts>
 800324c:	0003      	movs	r3, r0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b08e      	sub	sp, #56	; 0x38
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8003266:	2418      	movs	r4, #24
 8003268:	193b      	adds	r3, r7, r4
 800326a:	0018      	movs	r0, r3
 800326c:	231c      	movs	r3, #28
 800326e:	001a      	movs	r2, r3
 8003270:	2100      	movs	r1, #0
 8003272:	f005 ff54 	bl	800911e <memset>
    cJSON *item = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <cJSON_ParseWithLengthOpts+0x158>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <cJSON_ParseWithLengthOpts+0x158>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d04c      	beq.n	8003326 <cJSON_ParseWithLengthOpts+0xce>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d049      	beq.n	8003326 <cJSON_ParseWithLengthOpts+0xce>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]
    buffer.length = buffer_length;
 8003298:	193b      	adds	r3, r7, r4
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
    buffer.hooks = global_hooks;
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <cJSON_ParseWithLengthOpts+0x15c>)
 80032a8:	3310      	adds	r3, #16
 80032aa:	ca23      	ldmia	r2!, {r0, r1, r5}
 80032ac:	c323      	stmia	r3!, {r0, r1, r5}

    item = cJSON_New_Item(&global_hooks);
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <cJSON_ParseWithLengthOpts+0x15c>)
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fb97 	bl	80029e4 <cJSON_New_Item>
 80032b6:	0003      	movs	r3, r0
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d034      	beq.n	800332a <cJSON_ParseWithLengthOpts+0xd2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff ff76 	bl	80031b4 <skip_utf8_bom>
 80032c8:	0003      	movs	r3, r0
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff ff34 	bl	8003138 <buffer_skip_whitespace>
 80032d0:	0002      	movs	r2, r0
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	0011      	movs	r1, r2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 f87e 	bl	80033d8 <parse_value>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d026      	beq.n	800332e <cJSON_ParseWithLengthOpts+0xd6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <cJSON_ParseWithLengthOpts+0xb4>
    {
        buffer_skip_whitespace(&buffer);
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff25 	bl	8003138 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80032ee:	0021      	movs	r1, r4
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d21a      	bcs.n	8003332 <cJSON_ParseWithLengthOpts+0xda>
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	187b      	adds	r3, r7, r1
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	18d3      	adds	r3, r2, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d112      	bne.n	8003332 <cJSON_ParseWithLengthOpts+0xda>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <cJSON_ParseWithLengthOpts+0xca>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8003312:	2118      	movs	r1, #24
 8003314:	187b      	adds	r3, r7, r1
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	187b      	adds	r3, r7, r1
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	18d2      	adds	r2, r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
    }

    return item;
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	e03f      	b.n	80033a6 <cJSON_ParseWithLengthOpts+0x14e>
        goto fail;
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	e004      	b.n	8003334 <cJSON_ParseWithLengthOpts+0xdc>
        goto fail;
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	e002      	b.n	8003334 <cJSON_ParseWithLengthOpts+0xdc>
        goto fail;
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	e000      	b.n	8003334 <cJSON_ParseWithLengthOpts+0xdc>
            goto fail;
 8003332:	46c0      	nop			; (mov r8, r8)

fail:
    if (item != NULL)
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <cJSON_ParseWithLengthOpts+0xea>
    {
        cJSON_Delete(item);
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff fb69 	bl	8002a14 <cJSON_Delete>
    }

    if (value != NULL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02d      	beq.n	80033a4 <cJSON_ParseWithLengthOpts+0x14c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8003348:	2110      	movs	r1, #16
 800334a:	187b      	adds	r3, r7, r1
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8003356:	2018      	movs	r0, #24
 8003358:	183b      	adds	r3, r7, r0
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	183b      	adds	r3, r7, r0
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d204      	bcs.n	800336e <cJSON_ParseWithLengthOpts+0x116>
        {
            local_error.position = buffer.offset;
 8003364:	183b      	adds	r3, r7, r0
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	187b      	adds	r3, r7, r1
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	e00a      	b.n	8003384 <cJSON_ParseWithLengthOpts+0x12c>
        }
        else if (buffer.length > 0)
 800336e:	2218      	movs	r2, #24
 8003370:	18bb      	adds	r3, r7, r2
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <cJSON_ParseWithLengthOpts+0x12c>
        {
            local_error.position = buffer.length - 1;
 8003378:	18bb      	adds	r3, r7, r2
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	2310      	movs	r3, #16
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <cJSON_ParseWithLengthOpts+0x142>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800338a:	2110      	movs	r1, #16
 800338c:	187b      	adds	r3, r7, r1
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	187b      	adds	r3, r7, r1
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	18d2      	adds	r2, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <cJSON_ParseWithLengthOpts+0x158>)
 800339c:	2210      	movs	r2, #16
 800339e:	18ba      	adds	r2, r7, r2
 80033a0:	ca03      	ldmia	r2!, {r0, r1}
 80033a2:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b00e      	add	sp, #56	; 0x38
 80033ac:	bdb0      	pop	{r4, r5, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000218 	.word	0x20000218
 80033b4:	20000000 	.word	0x20000000

080033b8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7ff ff28 	bl	800321c <cJSON_ParseWithOpts>
 80033cc:	0003      	movs	r3, r0
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <parse_value+0x18>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <parse_value+0x1c>
    {
        return false; /* no input */
 80033f0:	2300      	movs	r3, #0
 80033f2:	e0d7      	b.n	80035a4 <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01c      	beq.n	8003434 <parse_value+0x5c>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	d815      	bhi.n	8003434 <parse_value+0x5c>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	4966      	ldr	r1, [pc, #408]	; (80035ac <parse_value+0x1d4>)
 8003414:	2204      	movs	r2, #4
 8003416:	0018      	movs	r0, r3
 8003418:	f006 f83c 	bl	8009494 <strncmp>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d109      	bne.n	8003434 <parse_value+0x5c>
    {
        item->type = cJSON_NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	1d1a      	adds	r2, r3, #4
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	609a      	str	r2, [r3, #8]
        return true;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b7      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01c      	beq.n	8003474 <parse_value+0x9c>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	1d5a      	adds	r2, r3, #5
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d815      	bhi.n	8003474 <parse_value+0x9c>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	18d3      	adds	r3, r2, r3
 8003452:	4957      	ldr	r1, [pc, #348]	; (80035b0 <parse_value+0x1d8>)
 8003454:	2205      	movs	r2, #5
 8003456:	0018      	movs	r0, r3
 8003458:	f006 f81c 	bl	8009494 <strncmp>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d109      	bne.n	8003474 <parse_value+0x9c>
    {
        item->type = cJSON_False;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	1d5a      	adds	r2, r3, #5
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
        return true;
 8003470:	2301      	movs	r3, #1
 8003472:	e097      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01f      	beq.n	80034ba <parse_value+0xe2>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d818      	bhi.n	80034ba <parse_value+0xe2>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	18d3      	adds	r3, r2, r3
 8003492:	4948      	ldr	r1, [pc, #288]	; (80035b4 <parse_value+0x1dc>)
 8003494:	2204      	movs	r2, #4
 8003496:	0018      	movs	r0, r3
 8003498:	f005 fffc 	bl	8009494 <strncmp>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d10c      	bne.n	80034ba <parse_value+0xe2>
    {
        item->type = cJSON_True;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	1d1a      	adds	r2, r3, #4
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	609a      	str	r2, [r3, #8]
        return true;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e074      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <parse_value+0x114>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d20f      	bcs.n	80034ec <parse_value+0x114>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	18d3      	adds	r3, r2, r3
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b22      	cmp	r3, #34	; 0x22
 80034da:	d107      	bne.n	80034ec <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0011      	movs	r1, r2
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fd0c 	bl	8002f00 <parse_string>
 80034e8:	0003      	movs	r3, r0
 80034ea:	e05b      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d025      	beq.n	800353e <parse_value+0x166>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d21f      	bcs.n	800353e <parse_value+0x166>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b2d      	cmp	r3, #45	; 0x2d
 800350c:	d00f      	beq.n	800352e <parse_value+0x156>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	18d3      	adds	r3, r2, r3
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b2f      	cmp	r3, #47	; 0x2f
 800351c:	d90f      	bls.n	800353e <parse_value+0x166>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	18d3      	adds	r3, r2, r3
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b39      	cmp	r3, #57	; 0x39
 800352c:	d807      	bhi.n	800353e <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0011      	movs	r1, r2
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fabd 	bl	8002ab4 <parse_number>
 800353a:	0003      	movs	r3, r0
 800353c:	e032      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <parse_value+0x198>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d20f      	bcs.n	8003570 <parse_value+0x198>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	18d3      	adds	r3, r2, r3
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b5b      	cmp	r3, #91	; 0x5b
 800355e:	d107      	bne.n	8003570 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f826 	bl	80035b8 <parse_array>
 800356c:	0003      	movs	r3, r0
 800356e:	e019      	b.n	80035a4 <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d015      	beq.n	80035a2 <parse_value+0x1ca>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d20f      	bcs.n	80035a2 <parse_value+0x1ca>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b7b      	cmp	r3, #123	; 0x7b
 8003590:	d107      	bne.n	80035a2 <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f8d6 	bl	800374a <parse_object>
 800359e:	0003      	movs	r3, r0
 80035a0:	e000      	b.n	80035a4 <parse_value+0x1cc>
    }

    return false;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	0800c3bc 	.word	0x0800c3bc
 80035b0:	0800c3ec 	.word	0x0800c3ec
 80035b4:	0800c3f4 	.word	0x0800c3f4

080035b8 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b1f      	cmp	r3, #31
 80035d0:	d901      	bls.n	80035d6 <parse_array+0x1e>
    {
        return false; /* to deeply nested */
 80035d2:	2300      	movs	r3, #0
 80035d4:	e0b5      	b.n	8003742 <parse_array+0x18a>
    }
    input_buffer->depth++;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b5b      	cmp	r3, #91	; 0x5b
 80035ee:	d000      	beq.n	80035f2 <parse_array+0x3a>
 80035f0:	e098      	b.n	8003724 <parse_array+0x16c>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff fd9a 	bl	8003138 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <parse_array+0x6e>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d207      	bcs.n	8003626 <parse_array+0x6e>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	18d3      	adds	r3, r2, r3
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b5d      	cmp	r3, #93	; 0x5d
 8003624:	d065      	beq.n	80036f2 <parse_array+0x13a>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <parse_array+0x80>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d305      	bcc.n	8003644 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	609a      	str	r2, [r3, #8]
        goto fail;
 8003642:	e076      	b.n	8003732 <parse_array+0x17a>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	1e5a      	subs	r2, r3, #1
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	3310      	adds	r3, #16
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff f9c6 	bl	80029e4 <cJSON_New_Item>
 8003658:	0003      	movs	r3, r0
 800365a:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d062      	beq.n	8003728 <parse_array+0x170>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <parse_array+0xba>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e007      	b.n	8003682 <parse_array+0xca>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff fd52 	bl	8003138 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	0011      	movs	r1, r2
 800369a:	0018      	movs	r0, r3
 800369c:	f7ff fe9c 	bl	80033d8 <parse_value>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d043      	beq.n	800372c <parse_array+0x174>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff fd46 	bl	8003138 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <parse_array+0x116>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d207      	bcs.n	80036ce <parse_array+0x116>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	18d3      	adds	r3, r2, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b2c      	cmp	r3, #44	; 0x2c
 80036cc:	d0bf      	beq.n	800364e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02d      	beq.n	8003730 <parse_array+0x178>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d227      	bcs.n	8003730 <parse_array+0x178>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b5d      	cmp	r3, #93	; 0x5d
 80036ee:	d11f      	bne.n	8003730 <parse_array+0x178>
    {
        goto fail; /* expected end of array */
    }

success:
 80036f0:	e000      	b.n	80036f4 <parse_array+0x13c>
        goto success;
 80036f2:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <parse_array+0x152>
        head->prev = current_item;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	609a      	str	r2, [r3, #8]

    return true;
 8003720:	2301      	movs	r3, #1
 8003722:	e00e      	b.n	8003742 <parse_array+0x18a>
        goto fail;
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	e004      	b.n	8003732 <parse_array+0x17a>
            goto fail; /* allocation failure */
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	e002      	b.n	8003732 <parse_array+0x17a>
            goto fail; /* failed to parse value */
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	e000      	b.n	8003732 <parse_array+0x17a>
        goto fail; /* expected end of array */
 8003730:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <parse_array+0x188>
    {
        cJSON_Delete(head);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff f96a 	bl	8002a14 <cJSON_Delete>
    }

    return false;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b1f      	cmp	r3, #31
 8003762:	d901      	bls.n	8003768 <parse_object+0x1e>
    {
        return false; /* to deeply nested */
 8003764:	2300      	movs	r3, #0
 8003766:	e0f4      	b.n	8003952 <parse_object+0x208>
    }
    input_buffer->depth++;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d100      	bne.n	800377a <parse_object+0x30>
 8003778:	e0d8      	b.n	800392c <parse_object+0x1e2>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d300      	bcc.n	8003788 <parse_object+0x3e>
 8003786:	e0d1      	b.n	800392c <parse_object+0x1e2>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	18d3      	adds	r3, r2, r3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b7b      	cmp	r3, #123	; 0x7b
 8003796:	d000      	beq.n	800379a <parse_object+0x50>
 8003798:	e0c8      	b.n	800392c <parse_object+0x1e2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff fcc6 	bl	8003138 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00e      	beq.n	80037d0 <parse_object+0x86>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d208      	bcs.n	80037d0 <parse_object+0x86>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	18d3      	adds	r3, r2, r3
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b7d      	cmp	r3, #125	; 0x7d
 80037cc:	d100      	bne.n	80037d0 <parse_object+0x86>
 80037ce:	e094      	b.n	80038fa <parse_object+0x1b0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <parse_object+0x98>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d305      	bcc.n	80037ee <parse_object+0xa4>
    {
        input_buffer->offset--;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]
        goto fail;
 80037ec:	e0a9      	b.n	8003942 <parse_object+0x1f8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	3310      	adds	r3, #16
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff f8f1 	bl	80029e4 <cJSON_New_Item>
 8003802:	0003      	movs	r3, r0
 8003804:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d100      	bne.n	800380e <parse_object+0xc4>
 800380c:	e090      	b.n	8003930 <parse_object+0x1e6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <parse_object+0xd4>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e007      	b.n	800382e <parse_object+0xe4>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	0018      	movs	r0, r3
 800383c:	f7ff fc7c 	bl	8003138 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	0011      	movs	r1, r2
 8003846:	0018      	movs	r0, r3
 8003848:	f7ff fb5a 	bl	8002f00 <parse_string>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d100      	bne.n	8003852 <parse_object+0x108>
 8003850:	e070      	b.n	8003934 <parse_object+0x1ea>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff fc6f 	bl	8003138 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d064      	beq.n	8003938 <parse_object+0x1ee>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d25e      	bcs.n	8003938 <parse_object+0x1ee>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	18d3      	adds	r3, r2, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b3a      	cmp	r3, #58	; 0x3a
 8003888:	d156      	bne.n	8003938 <parse_object+0x1ee>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fc4e 	bl	8003138 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff fd98 	bl	80033d8 <parse_value>
 80038a8:	1e03      	subs	r3, r0, #0
 80038aa:	d047      	beq.n	800393c <parse_object+0x1f2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7ff fc42 	bl	8003138 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <parse_object+0x18c>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d207      	bcs.n	80038d6 <parse_object+0x18c>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	18d3      	adds	r3, r2, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b2c      	cmp	r3, #44	; 0x2c
 80038d4:	d090      	beq.n	80037f8 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d031      	beq.n	8003940 <parse_object+0x1f6>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d22b      	bcs.n	8003940 <parse_object+0x1f6>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b7d      	cmp	r3, #125	; 0x7d
 80038f6:	d123      	bne.n	8003940 <parse_object+0x1f6>
    {
        goto fail; /* expected end of object */
    }

success:
 80038f8:	e000      	b.n	80038fc <parse_object+0x1b2>
        goto success; /* empty object */
 80038fa:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <parse_object+0x1c8>
        head->prev = current_item;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	609a      	str	r2, [r3, #8]
    return true;
 8003928:	2301      	movs	r3, #1
 800392a:	e012      	b.n	8003952 <parse_object+0x208>
        goto fail; /* not an object */
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	e008      	b.n	8003942 <parse_object+0x1f8>
            goto fail; /* allocation failure */
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	e006      	b.n	8003942 <parse_object+0x1f8>
            goto fail; /* failed to parse name */
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	e004      	b.n	8003942 <parse_object+0x1f8>
            goto fail; /* invalid object */
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	e002      	b.n	8003942 <parse_object+0x1f8>
            goto fail; /* failed to parse value */
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	e000      	b.n	8003942 <parse_object+0x1f8>
        goto fail; /* expected end of object */
 8003940:	46c0      	nop			; (mov r8, r8)

fail:
    if (head != NULL)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <parse_object+0x206>
    {
        cJSON_Delete(head);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff f862 	bl	8002a14 <cJSON_Delete>
    }

    return false;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b006      	add	sp, #24
 8003958:	bd80      	pop	{r7, pc}

0800395a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <get_object_item+0x1c>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <get_object_item+0x20>
    {
        return NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	e033      	b.n	80039e2 <get_object_item+0x88>
    }

    current_element = object->child;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003986:	e002      	b.n	800398e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01c      	beq.n	80039ce <get_object_item+0x74>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d018      	beq.n	80039ce <get_object_item+0x74>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fc fbaf 	bl	8000108 <strcmp>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d1ec      	bne.n	8003988 <get_object_item+0x2e>
 80039ae:	e00e      	b.n	80039ce <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <get_object_item+0x74>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0011      	movs	r1, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fe ff87 	bl	80028d8 <case_insensitive_strcmp>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d1f0      	bne.n	80039b0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <get_object_item+0x82>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <get_object_item+0x86>
        return NULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <get_object_item+0x88>
    }

    return current_element;
 80039e0:	697b      	ldr	r3, [r7, #20]
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b006      	add	sp, #24
 80039e8:	bd80      	pop	{r7, pc}

080039ea <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ffad 	bl	800395a <get_object_item>
 8003a00:	0003      	movs	r3, r0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b002      	add	sp, #8
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <cJSON_IsNumber+0x12>
    {
        return false;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e007      	b.n	8003a2c <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	4013      	ands	r3, r2
 8003a24:	3b08      	subs	r3, #8
 8003a26:	425a      	negs	r2, r3
 8003a28:	4153      	adcs	r3, r2
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <cJSON_IsString+0x12>
    {
        return false;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e007      	b.n	8003a56 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	3b10      	subs	r3, #16
 8003a50:	425a      	negs	r2, r3
 8003a52:	4153      	adcs	r3, r2
 8003a54:	b2db      	uxtb	r3, r3
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <cJSON_IsArray+0x12>
    {
        return false;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e007      	b.n	8003a80 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	4013      	ands	r3, r2
 8003a78:	3b20      	subs	r3, #32
 8003a7a:	425a      	negs	r2, r3
 8003a7c:	4153      	adcs	r3, r2
 8003a7e:	b2db      	uxtb	r3, r3
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <lcd_send_cmd>:
};

/* private lcd constants END */

static void lcd_send_cmd(uint8_t cmd)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	0002      	movs	r2, r0
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	701a      	strb	r2, [r3, #0]
	uint8_t data_u, data_l;
	uint8_t buf[4];

	data_u = cmd & 0xF0;
 8003a94:	200f      	movs	r0, #15
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	1dfa      	adds	r2, r7, #7
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	210f      	movs	r1, #15
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
	data_l = (cmd << 4) & 0xF0;
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	011a      	lsls	r2, r3, #4
 8003aa8:	240e      	movs	r4, #14
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	701a      	strb	r2, [r3, #0]

	buf[0] = data_u | LCD_EN1_RS0;  // en = 1, rs = 0
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	2108      	movs	r1, #8
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	701a      	strb	r2, [r3, #0]
	buf[1] = data_u | LCD_EN0_RS0;  // en = 0, rs = 0
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	705a      	strb	r2, [r3, #1]
	buf[2] = data_l | LCD_EN1_RS0;  // en = 1, rs = 0
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	220c      	movs	r2, #12
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	709a      	strb	r2, [r3, #2]
	buf[3] = data_l | LCD_EN0_RS0;  // en = 0, rs = 0
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, buf, 4, HAL_MAX_DELAY);
 8003ae8:	187a      	adds	r2, r7, r1
 8003aea:	4806      	ldr	r0, [pc, #24]	; (8003b04 <lcd_send_cmd+0x7c>)
 8003aec:	2301      	movs	r3, #1
 8003aee:	425b      	negs	r3, r3
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2304      	movs	r3, #4
 8003af4:	217e      	movs	r1, #126	; 0x7e
 8003af6:	f002 fcc3 	bl	8006480 <HAL_I2C_Master_Transmit>
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b005      	add	sp, #20
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	20000300 	.word	0x20000300

08003b08 <lcd_send_data>:

static void lcd_send_data(uint8_t data)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	0002      	movs	r2, r0
 8003b10:	1dfb      	adds	r3, r7, #7
 8003b12:	701a      	strb	r2, [r3, #0]
	uint8_t data_u, data_l;
	uint8_t buf[4];

	data_u = data & 0xF0;
 8003b14:	200f      	movs	r0, #15
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	1dfa      	adds	r2, r7, #7
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	210f      	movs	r1, #15
 8003b1e:	438a      	bics	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
	data_l = (data << 4) & 0xF0;
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	011a      	lsls	r2, r3, #4
 8003b28:	240e      	movs	r4, #14
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	701a      	strb	r2, [r3, #0]

	buf[0] = data_u | LCD_EN1_RS1;  // en = 1, rs = 1
 8003b2e:	183b      	adds	r3, r7, r0
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	220d      	movs	r2, #13
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	2108      	movs	r1, #8
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
	buf[1] = data_u | LCD_EN0_RS1;  // en = 0, rs = 1
 8003b3e:	183b      	adds	r3, r7, r0
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2209      	movs	r2, #9
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	705a      	strb	r2, [r3, #1]
	buf[2] = data_l | LCD_EN1_RS1;  // en = 1, rs = 1
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	220d      	movs	r2, #13
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	709a      	strb	r2, [r3, #2]
	buf[3] = data_l | LCD_EN0_RS1;  // en = 0, rs = 1
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2209      	movs	r2, #9
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, buf, 4, HAL_MAX_DELAY);
 8003b68:	187a      	adds	r2, r7, r1
 8003b6a:	4806      	ldr	r0, [pc, #24]	; (8003b84 <lcd_send_data+0x7c>)
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	425b      	negs	r3, r3
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2304      	movs	r3, #4
 8003b74:	217e      	movs	r1, #126	; 0x7e
 8003b76:	f002 fc83 	bl	8006480 <HAL_I2C_Master_Transmit>
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b005      	add	sp, #20
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000300 	.word	0x20000300

08003b88 <lcd_putch>:
	return LCD_EARG;
}

/* prints a given char at current cursor position */
void lcd_putch(const uint8_t byte)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	0002      	movs	r2, r0
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
	lcd_send_data(byte);
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ffb5 	bl	8003b08 <lcd_send_data>
	HAL_Delay(LCDT_1MS);
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f002 f8d1 	bl	8005d48 <HAL_Delay>
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}

08003bae <lcd_goto>:

/* moves cursor to given X: @addr, Y: @line coordinates */
enum LCD_ERR lcd_goto(const uint8_t line, const uint8_t addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	1dbb      	adds	r3, r7, #6
 8003bbc:	1c0a      	adds	r2, r1, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
    uint8_t xpos = addr & 0x0F;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	1dba      	adds	r2, r7, #6
 8003bc6:	7812      	ldrb	r2, [r2, #0]
 8003bc8:	210f      	movs	r1, #15
 8003bca:	400a      	ands	r2, r1
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* RS <= 1'b0 */
	switch (line)
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <lcd_goto+0x2e>
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d00c      	beq.n	8003bf4 <lcd_goto+0x46>
 8003bda:	e017      	b.n	8003c0c <lcd_goto+0x5e>
	{
	/* set DDRAM address. */
	case 0:
		lcd_send_cmd(0x80 | 0x00 | xpos);
 8003bdc:	230f      	movs	r3, #15
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	4252      	negs	r2, r2
 8003be6:	4313      	orrs	r3, r2
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7ff ff4c 	bl	8003a88 <lcd_send_cmd>
		return LCD_EOK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e00c      	b.n	8003c0e <lcd_goto+0x60>
		break;
	case 1:
		lcd_send_cmd(0x80 | 0x40 | xpos);
 8003bf4:	230f      	movs	r3, #15
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	4252      	negs	r2, r2
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7ff ff40 	bl	8003a88 <lcd_send_cmd>
		return LCD_EOK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <lcd_goto+0x60>
		break;

	default:
		return LCD_EARG;
 8003c0c:	2301      	movs	r3, #1
		break;
	}
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <lcd_init>:
	return LCD_EARG;
}

/* initializes lcd display */
enum LCD_ERR lcd_init(void)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
	lcd_send_cmd(__LCD_FST);
 8003c1a:	2030      	movs	r0, #48	; 0x30
 8003c1c:	f7ff ff34 	bl	8003a88 <lcd_send_cmd>
	HAL_Delay(LCDT_10MS);
 8003c20:	230a      	movs	r3, #10
 8003c22:	0018      	movs	r0, r3
 8003c24:	f002 f890 	bl	8005d48 <HAL_Delay>
	lcd_send_cmd(__LCD_RET);
 8003c28:	2002      	movs	r0, #2
 8003c2a:	f7ff ff2d 	bl	8003a88 <lcd_send_cmd>
	HAL_Delay(LCDT_10MS);
 8003c2e:	230a      	movs	r3, #10
 8003c30:	0018      	movs	r0, r3
 8003c32:	f002 f889 	bl	8005d48 <HAL_Delay>
	lcd_send_cmd(LCD_CFG_DISPLAY1_BLINK0_CURSOR1);
 8003c36:	200e      	movs	r0, #14
 8003c38:	f7ff ff26 	bl	8003a88 <lcd_send_cmd>
	HAL_Delay(LCDT_10MS);
 8003c3c:	230a      	movs	r3, #10
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f002 f882 	bl	8005d48 <HAL_Delay>
	lcd_send_cmd(__LCD_CLS);
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7ff ff1f 	bl	8003a88 <lcd_send_cmd>
	HAL_Delay(LCDT_10MS);
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f002 f87b 	bl	8005d48 <HAL_Delay>

	return LCD_EOK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* helper functions */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	1dbb      	adds	r3, r7, #6
 8003c66:	801a      	strh	r2, [r3, #0]
	/* get time delta in ms */
	t_prev = t_curr;
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <HAL_GPIO_EXTI_Callback+0x90>)
 8003c6e:	601a      	str	r2, [r3, #0]
	t_curr = HAL_GetTick();
 8003c70:	f002 f860 	bl	8005d34 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003c78:	601a      	str	r2, [r3, #0]
	dt = abs((int32_t)t_curr - (int32_t)t_prev);
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	001a      	movs	r2, r3
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_GPIO_EXTI_Callback+0x90>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	17da      	asrs	r2, r3, #31
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	4053      	eors	r3, r2
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8003c90:	601a      	str	r2, [r3, #0]
	/* button */
	switch(GPIO_Pin)
 8003c92:	1dbb      	adds	r3, r7, #6
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d121      	bne.n	8003cde <HAL_GPIO_EXTI_Callback+0x82>
	{
	case GPIO_PIN_0:
		/* check for multiple presses, with short & long double press*/
		if (dt < 400) {
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	23c8      	movs	r3, #200	; 0xc8
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d203      	bcs.n	8003cae <HAL_GPIO_EXTI_Callback+0x52>
			btn = BP_DOUBLE;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_GPIO_EXTI_Callback+0x98>)
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e012      	b.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x78>
		} else if (dt >= 400 && dt < 800) {
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	23c8      	movs	r3, #200	; 0xc8
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d309      	bcc.n	8003cce <HAL_GPIO_EXTI_Callback+0x72>
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	23c8      	movs	r3, #200	; 0xc8
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d203      	bcs.n	8003cce <HAL_GPIO_EXTI_Callback+0x72>
			btn = BP_LONG;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_GPIO_EXTI_Callback+0x98>)
 8003cc8:	2209      	movs	r2, #9
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x78>
		} else {
			btn = BP_SINGLE;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_GPIO_EXTI_Callback+0x98>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
		}
		/* start a button get timer */
//		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
		HAL_TIM_Base_Start_IT(&htim6);
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f004 fe90 	bl	80089fc <HAL_TIM_Base_Start_IT>
		break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_EXTI_Callback+0x84>

	default:
		break;
 8003cde:	46c0      	nop			; (mov r8, r8)
	};
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000230 	.word	0x20000230
 8003cec:	2000022c 	.word	0x2000022c
 8003cf0:	20000234 	.word	0x20000234
 8003cf4:	20000220 	.word	0x20000220
 8003cf8:	2000036c 	.word	0x2000036c

08003cfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	if (&htim6 == htim) {
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d10e      	bne.n	8003d2a <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(&htim6);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f004 fec6 	bl	8008aa0 <HAL_TIM_Base_Stop_IT>
//		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);

		ubtn.val = btn;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	001a      	movs	r2, r3
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003d1c:	601a      	str	r2, [r3, #0]
		ubtn.press = true;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	711a      	strb	r2, [r3, #4]

		btn = 0;
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
	}
	if (&htim14 == htim) {
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_TIM_Base_Stop_IT(&htim14);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d34:	0018      	movs	r0, r3
 8003d36:	f004 feb3 	bl	8008aa0 <HAL_TIM_Base_Stop_IT>
		room.fdata->timer = false;
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	721a      	strb	r2, [r3, #8]
	}
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	2000036c 	.word	0x2000036c
 8003d50:	20000220 	.word	0x20000220
 8003d54:	20000224 	.word	0x20000224
 8003d58:	200003b8 	.word	0x200003b8
 8003d5c:	20000260 	.word	0x20000260

08003d60 <control_lights>:

void control_lights(room_t *room)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	switch (ubtn.val)
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <control_lights+0x54>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d00b      	beq.n	8003d88 <control_lights+0x28>
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11a      	bne.n	8003daa <control_lights+0x4a>
	{
	case BP_DOUBLE:
		room->ldata->state ^= 1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	404a      	eors	r2, r1
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
		break;
 8003d86:	e011      	b.n	8003dac <control_lights+0x4c>
	case BP_SINGLE:
		if (room->ldata->state == C_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <control_lights+0x3e>
			room->ldata->brightness++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	3201      	adds	r2, #1
 8003d9a:	605a      	str	r2, [r3, #4]
		else
			room->ldata->brightness--;
		break;
 8003d9c:	e006      	b.n	8003dac <control_lights+0x4c>
			room->ldata->brightness--;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	3a01      	subs	r2, #1
 8003da6:	605a      	str	r2, [r3, #4]
		break;
 8003da8:	e000      	b.n	8003dac <control_lights+0x4c>

	default:
		break;
 8003daa:	46c0      	nop			; (mov r8, r8)
	};
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000224 	.word	0x20000224

08003db8 <control_climate>:

void control_climate(room_t *room)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	switch (ubtn.val)
 8003dc0:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <control_climate+0x60>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d00b      	beq.n	8003de0 <control_climate+0x28>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d120      	bne.n	8003e0e <control_climate+0x56>
	{
	case BP_DOUBLE:
		room->cdata->state ^= 1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	404a      	eors	r2, r1
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]
		break;
 8003dde:	e017      	b.n	8003e10 <control_climate+0x58>
	case BP_SINGLE:
		room->cdata->prev_temp = room->cdata->curr_temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	605a      	str	r2, [r3, #4]
		if (room->cdata->state == C_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <control_climate+0x4a>
			room->cdata->curr_temp++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	3201      	adds	r2, #1
 8003dfe:	609a      	str	r2, [r3, #8]
		else
			room->cdata->curr_temp--;
		break;
 8003e00:	e006      	b.n	8003e10 <control_climate+0x58>
			room->cdata->curr_temp--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	609a      	str	r2, [r3, #8]
		break;
 8003e0c:	e000      	b.n	8003e10 <control_climate+0x58>

	default:
		break;
 8003e0e:	46c0      	nop			; (mov r8, r8)
	};
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000224 	.word	0x20000224

08003e1c <control_fire>:

void control_fire(room_t *room)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	switch (ubtn.val)
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <control_fire+0x60>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d00b      	beq.n	8003e44 <control_fire+0x28>
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d120      	bne.n	8003e72 <control_fire+0x56>
	{
	case BP_DOUBLE:
		room->fdata->state ^= 1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	404a      	eors	r2, r1
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
		break;
 8003e42:	e017      	b.n	8003e74 <control_fire+0x58>
	case BP_SINGLE:
		room->cdata->prev_temp = room->cdata->curr_temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	6892      	ldr	r2, [r2, #8]
 8003e4e:	605a      	str	r2, [r3, #4]
		if (room->fdata->state == C_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <control_fire+0x4a>
			room->cdata->curr_temp--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	3a01      	subs	r2, #1
 8003e62:	609a      	str	r2, [r3, #8]
		else
			room->cdata->curr_temp++;
		break;
 8003e64:	e006      	b.n	8003e74 <control_fire+0x58>
			room->cdata->curr_temp++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	3201      	adds	r2, #1
 8003e6e:	609a      	str	r2, [r3, #8]
		break;
 8003e70:	e000      	b.n	8003e74 <control_fire+0x58>

	default:
		break;
 8003e72:	46c0      	nop			; (mov r8, r8)
	};
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000224 	.word	0x20000224

08003e80 <control_room>:

void control_room(room_t *room)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	switch (ubtn.val)
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <control_room+0x28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <control_room+0x1e>
	{
	case BP_SINGLE:
		room->people ^= 1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	405a      	eors	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
		break;
 8003e9c:	e000      	b.n	8003ea0 <control_room+0x20>

	default:
		break;
 8003e9e:	46c0      	nop			; (mov r8, r8)
	};
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000224 	.word	0x20000224

08003eac <control_by_idx>:

void control_by_idx(room_t *room, uint32_t idx)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	if (!room || !room->ldata || !room->ldata)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d028      	beq.n	8003f0e <control_by_idx+0x62>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d024      	beq.n	8003f0e <control_by_idx+0x62>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <control_by_idx+0x62>
		return;

	switch (idx)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d013      	beq.n	8003efa <control_by_idx+0x4e>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d815      	bhi.n	8003f04 <control_by_idx+0x58>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d003      	beq.n	8003ee6 <control_by_idx+0x3a>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d005      	beq.n	8003ef0 <control_by_idx+0x44>
 8003ee4:	e00e      	b.n	8003f04 <control_by_idx+0x58>
	{
	case 1:
		control_lights(room);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff ff39 	bl	8003d60 <control_lights>
		break;
 8003eee:	e00f      	b.n	8003f10 <control_by_idx+0x64>
	case 2:
		control_climate(room);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff ff60 	bl	8003db8 <control_climate>
		break;
 8003ef8:	e00a      	b.n	8003f10 <control_by_idx+0x64>
	case 3:
		control_fire(room);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7ff ff8d 	bl	8003e1c <control_fire>
		break;
 8003f02:	e005      	b.n	8003f10 <control_by_idx+0x64>

	default:
		control_room(room);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7ff ffba 	bl	8003e80 <control_room>
		break;
 8003f0c:	e000      	b.n	8003f10 <control_by_idx+0x64>
		return;
 8003f0e:	46c0      	nop			; (mov r8, r8)
	};
}
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b002      	add	sp, #8
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	b0ab      	sub	sp, #172	; 0xac
 8003f1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f1e:	f001 feaf 	bl	8005c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f22:	f000 fac7 	bl	80044b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f26:	f000 fc71 	bl	800480c <MX_GPIO_Init>
  MX_TSC_Init();
 8003f2a:	f000 fc2b 	bl	8004784 <MX_TSC_Init>
  MX_I2C1_Init();
 8003f2e:	f000 fb1f 	bl	8004570 <MX_I2C1_Init>
  MX_RTC_Init();
 8003f32:	f000 fb5d 	bl	80045f0 <MX_RTC_Init>
  MX_TIM6_Init();
 8003f36:	f000 fbbf 	bl	80046b8 <MX_TIM6_Init>
  MX_TIM14_Init();
 8003f3a:	f000 fbfb 	bl	8004734 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	/* user systems */
		/* terminal data structs & buffers */
	char sbuf[17] = {'\0'};
 8003f3e:	2354      	movs	r3, #84	; 0x54
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	220d      	movs	r2, #13
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f005 f8e6 	bl	800911e <memset>
	char tbuf[17] = {'\0'};
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	220d      	movs	r2, #13
 8003f5e:	2100      	movs	r1, #0
 8003f60:	0018      	movs	r0, r3
 8003f62:	f005 f8dc 	bl	800911e <memset>
	term_win stdwin;
		/* i2c bus & lcd + terminal lib init */
	while (1) {
		if (HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003f66:	2301      	movs	r3, #1
 8003f68:	425b      	negs	r3, r3
 8003f6a:	48de      	ldr	r0, [pc, #888]	; (80042e4 <main+0x3cc>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	217e      	movs	r1, #126	; 0x7e
 8003f70:	f002 fb8e 	bl	8006690 <HAL_I2C_IsDeviceReady>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d1f6      	bne.n	8003f66 <main+0x4e>
			lcd_init();
 8003f78:	f7ff fe4d 	bl	8003c16 <lcd_init>
			term_init(&stdwin);
 8003f7c:	2318      	movs	r3, #24
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	0018      	movs	r0, r3
 8003f82:	f001 fe2d 	bl	8005be0 <term_init>
			break;
 8003f86:	46c0      	nop			; (mov r8, r8)
		}
	}
	/* status structures init */
	light.state = C_OFF;
 8003f88:	4bd7      	ldr	r3, [pc, #860]	; (80042e8 <main+0x3d0>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
	light.brightness = 8;
 8003f8e:	4bd6      	ldr	r3, [pc, #856]	; (80042e8 <main+0x3d0>)
 8003f90:	2208      	movs	r2, #8
 8003f92:	605a      	str	r2, [r3, #4]

	climate.state = C_OFF;
 8003f94:	4bd5      	ldr	r3, [pc, #852]	; (80042ec <main+0x3d4>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
	climate.prev_temp = 27;
 8003f9a:	4bd4      	ldr	r3, [pc, #848]	; (80042ec <main+0x3d4>)
 8003f9c:	221b      	movs	r2, #27
 8003f9e:	605a      	str	r2, [r3, #4]
	climate.curr_temp = 28;
 8003fa0:	4bd2      	ldr	r3, [pc, #840]	; (80042ec <main+0x3d4>)
 8003fa2:	221c      	movs	r2, #28
 8003fa4:	609a      	str	r2, [r3, #8]
	climate.target_temp = 22;
 8003fa6:	4bd1      	ldr	r3, [pc, #836]	; (80042ec <main+0x3d4>)
 8003fa8:	2216      	movs	r2, #22
 8003faa:	60da      	str	r2, [r3, #12]

	fire.state = C_OFF;
 8003fac:	4bd0      	ldr	r3, [pc, #832]	; (80042f0 <main+0x3d8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
//	fire.tim = &htim14;
	fire.timer = false;
 8003fb2:	4bcf      	ldr	r3, [pc, #828]	; (80042f0 <main+0x3d8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	721a      	strb	r2, [r3, #8]
	fire.alarm = false;
 8003fb8:	4bcd      	ldr	r3, [pc, #820]	; (80042f0 <main+0x3d8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	729a      	strb	r2, [r3, #10]
	fire.smoke = false;
 8003fbe:	4bcc      	ldr	r3, [pc, #816]	; (80042f0 <main+0x3d8>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	725a      	strb	r2, [r3, #9]
	fire.rate = climate.curr_temp - climate.prev_temp;
 8003fc4:	4bc9      	ldr	r3, [pc, #804]	; (80042ec <main+0x3d4>)
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4bc8      	ldr	r3, [pc, #800]	; (80042ec <main+0x3d4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	4bc8      	ldr	r3, [pc, #800]	; (80042f0 <main+0x3d8>)
 8003fd0:	60da      	str	r2, [r3, #12]

	room.people = 0;
 8003fd2:	4bc8      	ldr	r3, [pc, #800]	; (80042f4 <main+0x3dc>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60da      	str	r2, [r3, #12]
	room.ldata = &light;
 8003fd8:	4bc6      	ldr	r3, [pc, #792]	; (80042f4 <main+0x3dc>)
 8003fda:	4ac3      	ldr	r2, [pc, #780]	; (80042e8 <main+0x3d0>)
 8003fdc:	601a      	str	r2, [r3, #0]
	room.cdata = &climate;
 8003fde:	4bc5      	ldr	r3, [pc, #788]	; (80042f4 <main+0x3dc>)
 8003fe0:	4ac2      	ldr	r2, [pc, #776]	; (80042ec <main+0x3d4>)
 8003fe2:	605a      	str	r2, [r3, #4]
	room.fdata = &fire;
 8003fe4:	4bc3      	ldr	r3, [pc, #780]	; (80042f4 <main+0x3dc>)
 8003fe6:	4ac2      	ldr	r2, [pc, #776]	; (80042f0 <main+0x3d8>)
 8003fe8:	609a      	str	r2, [r3, #8]

	/* misc control data */
	int jstatus = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	2694      	movs	r6, #148	; 0x94
 8003fee:	19ba      	adds	r2, r7, r6
 8003ff0:	6013      	str	r3, [r2, #0]
	uint32_t sys_idx = 0, ctrl_idx = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2490      	movs	r4, #144	; 0x90
 8003ff6:	193a      	adds	r2, r7, r4
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	228c      	movs	r2, #140	; 0x8c
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	6013      	str	r3, [r2, #0]
	/* for testing */
	srand(0);
 8004002:	2000      	movs	r0, #0
 8004004:	f005 f93c 	bl	8009280 <srand>

	/* petri net init */
		/* define function table */
	function_table_init();
 8004008:	f7fe f908 	bl	800221c <function_table_init>
		/* function table offsets */
	uint32_t offset = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t offsets[MAX_SYSTEMS] = { 0, 5, 11 };
 8004010:	230c      	movs	r3, #12
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	4ab8      	ldr	r2, [pc, #736]	; (80042f8 <main+0x3e0>)
 8004016:	ca23      	ldmia	r2!, {r0, r1, r5}
 8004018:	c323      	stmia	r3!, {r0, r1, r5}
		/* system names */
	const char *sys_names[MAX_SYSTEMS] = {
 800401a:	003b      	movs	r3, r7
 800401c:	4ab7      	ldr	r2, [pc, #732]	; (80042fc <main+0x3e4>)
 800401e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8004020:	c323      	stmia	r3!, {r0, r1, r5}
		"LightSys",
		"ClimateSys",
		"FireSys"
	};
		/* petri net container */
	pnet_t *sys = pnet_create();
 8004022:	f000 ffeb 	bl	8004ffc <pnet_create>
 8004026:	0003      	movs	r3, r0
 8004028:	2588      	movs	r5, #136	; 0x88
 800402a:	197a      	adds	r2, r7, r5
 800402c:	6013      	str	r3, [r2, #0]
	/* load LightSys by default */
	pnet_init(sys, sys_names[sys_idx]);
 800402e:	003b      	movs	r3, r7
 8004030:	193a      	adds	r2, r7, r4
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	58d2      	ldr	r2, [r2, r3]
 8004038:	1979      	adds	r1, r7, r5
 800403a:	680b      	ldr	r3, [r1, #0]
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f001 f859 	bl	80050f6 <pnet_init>
	jstatus = pnet_deserialize(sys, jstr[sys_idx]);
 8004044:	4bae      	ldr	r3, [pc, #696]	; (8004300 <main+0x3e8>)
 8004046:	193a      	adds	r2, r7, r4
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	0092      	lsls	r2, r2, #2
 800404c:	58d2      	ldr	r2, [r2, r3]
 800404e:	1979      	adds	r1, r7, r5
 8004050:	680b      	ldr	r3, [r1, #0]
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f001 f933 	bl	80052c0 <pnet_deserialize>
 800405a:	0003      	movs	r3, r0
 800405c:	19ba      	adds	r2, r7, r6
 800405e:	6013      	str	r3, [r2, #0]
	/* set transition functions */
	offset = offsets[sys_idx];
 8004060:	230c      	movs	r3, #12
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	193a      	adds	r2, r7, r4
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	58d3      	ldr	r3, [r2, r3]
 800406c:	67bb      	str	r3, [r7, #120]	; 0x78
	for (uint32_t i = 0; i < sys->trans_count; i++) {
 800406e:	2300      	movs	r3, #0
 8004070:	2284      	movs	r2, #132	; 0x84
 8004072:	18ba      	adds	r2, r7, r2
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e01c      	b.n	80040b2 <main+0x19a>
		const uint32_t x = offset + i;
 8004078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800407a:	2484      	movs	r4, #132	; 0x84
 800407c:	193b      	adds	r3, r7, r4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	66bb      	str	r3, [r7, #104]	; 0x68
		trans_set_action(sys->trans[i], funcs[x], &room);
 8004084:	2388      	movs	r3, #136	; 0x88
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	193b      	adds	r3, r7, r4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	18d3      	adds	r3, r2, r3
 8004094:	3304      	adds	r3, #4
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4b9a      	ldr	r3, [pc, #616]	; (8004304 <main+0x3ec>)
 800409a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800409c:	0092      	lsls	r2, r2, #2
 800409e:	58d3      	ldr	r3, [r2, r3]
 80040a0:	4a94      	ldr	r2, [pc, #592]	; (80042f4 <main+0x3dc>)
 80040a2:	0019      	movs	r1, r3
 80040a4:	f000 fe0b 	bl	8004cbe <trans_set_action>
	for (uint32_t i = 0; i < sys->trans_count; i++) {
 80040a8:	193b      	adds	r3, r7, r4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	193a      	adds	r2, r7, r4
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	2388      	movs	r3, #136	; 0x88
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2294      	movs	r2, #148	; 0x94
 80040ba:	589b      	ldr	r3, [r3, r2]
 80040bc:	2284      	movs	r2, #132	; 0x84
 80040be:	18ba      	adds	r2, r7, r2
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3d8      	bcc.n	8004078 <main+0x160>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t delta = 0, i = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	677b      	str	r3, [r7, #116]	; 0x74
 80040ca:	2300      	movs	r3, #0
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	6013      	str	r3, [r2, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		delta = (uint32_t)heap_ptr - (uint32_t)heap_start;
 80040d2:	4b8d      	ldr	r3, [pc, #564]	; (8004308 <main+0x3f0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	001a      	movs	r2, r3
 80040d8:	4b8c      	ldr	r3, [pc, #560]	; (800430c <main+0x3f4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	677b      	str	r3, [r7, #116]	; 0x74
		/* simulate current loaded system in sequence */
		pnet_fire_sequence(sys);
 80040e0:	2388      	movs	r3, #136	; 0x88
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f001 f8c4 	bl	8005274 <pnet_fire_sequence>

		/* draw clear */
		term_cls(&stdwin);
 80040ec:	2318      	movs	r3, #24
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	0018      	movs	r0, r3
 80040f2:	f001 fc52 	bl	800599a <term_cls>

		switch (ctrl_idx)
 80040f6:	228c      	movs	r2, #140	; 0x8c
 80040f8:	18bb      	adds	r3, r7, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d031      	beq.n	8004164 <main+0x24c>
 8004100:	18bb      	adds	r3, r7, r2
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d846      	bhi.n	8004196 <main+0x27e>
 8004108:	18bb      	adds	r3, r7, r2
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d004      	beq.n	800411a <main+0x202>
 8004110:	18bb      	adds	r3, r7, r2
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d010      	beq.n	800413a <main+0x222>
 8004118:	e03d      	b.n	8004196 <main+0x27e>
		{
		case 1:
			snprintf(tbuf, 16, "s%i b%lu", room.ldata->state, room.ldata->brightness);
 800411a:	4b76      	ldr	r3, [pc, #472]	; (80042f4 <main+0x3dc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	0019      	movs	r1, r3
 8004122:	4b74      	ldr	r3, [pc, #464]	; (80042f4 <main+0x3dc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a79      	ldr	r2, [pc, #484]	; (8004310 <main+0x3f8>)
 800412a:	2040      	movs	r0, #64	; 0x40
 800412c:	1838      	adds	r0, r7, r0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	000b      	movs	r3, r1
 8004132:	2110      	movs	r1, #16
 8004134:	f005 f92e 	bl	8009394 <sniprintf>
			break;
 8004138:	e041      	b.n	80041be <main+0x2a6>
		case 2:
			snprintf(tbuf, 16, "s%1i c%03li t%03li", room.cdata->state, room.cdata->curr_temp, room.cdata->target_temp);
 800413a:	4b6e      	ldr	r3, [pc, #440]	; (80042f4 <main+0x3dc>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	001c      	movs	r4, r3
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <main+0x3dc>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <main+0x3dc>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4971      	ldr	r1, [pc, #452]	; (8004314 <main+0x3fc>)
 8004150:	2040      	movs	r0, #64	; 0x40
 8004152:	1838      	adds	r0, r7, r0
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	9200      	str	r2, [sp, #0]
 8004158:	0023      	movs	r3, r4
 800415a:	000a      	movs	r2, r1
 800415c:	2110      	movs	r1, #16
 800415e:	f005 f919 	bl	8009394 <sniprintf>
			break;
 8004162:	e02c      	b.n	80041be <main+0x2a6>
		case 3:
			snprintf(tbuf, 16, "s%1i p%03lu c%03lu %03li", room.fdata->state, room.cdata->prev_temp, room.cdata->curr_temp, room.fdata->rate);
 8004164:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <main+0x3dc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	001d      	movs	r5, r3
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <main+0x3dc>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b60      	ldr	r3, [pc, #384]	; (80042f4 <main+0x3dc>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	6899      	ldr	r1, [r3, #8]
 8004178:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <main+0x3dc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4c66      	ldr	r4, [pc, #408]	; (8004318 <main+0x400>)
 8004180:	2040      	movs	r0, #64	; 0x40
 8004182:	1838      	adds	r0, r7, r0
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	9101      	str	r1, [sp, #4]
 8004188:	9200      	str	r2, [sp, #0]
 800418a:	002b      	movs	r3, r5
 800418c:	0022      	movs	r2, r4
 800418e:	2110      	movs	r1, #16
 8004190:	f005 f900 	bl	8009394 <sniprintf>
			break;
 8004194:	e013      	b.n	80041be <main+0x2a6>

		default:
			snprintf(tbuf, 16, "j%1u p%1lu %lu %lu", jstatus, room.people, delta, memalloc);
 8004196:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <main+0x3dc>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b60      	ldr	r3, [pc, #384]	; (800431c <main+0x404>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2194      	movs	r1, #148	; 0x94
 80041a0:	1879      	adds	r1, r7, r1
 80041a2:	680c      	ldr	r4, [r1, #0]
 80041a4:	495e      	ldr	r1, [pc, #376]	; (8004320 <main+0x408>)
 80041a6:	2040      	movs	r0, #64	; 0x40
 80041a8:	1838      	adds	r0, r7, r0
 80041aa:	9302      	str	r3, [sp, #8]
 80041ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9200      	str	r2, [sp, #0]
 80041b2:	0023      	movs	r3, r4
 80041b4:	000a      	movs	r2, r1
 80041b6:	2110      	movs	r1, #16
 80041b8:	f005 f8ec 	bl	8009394 <sniprintf>
			break;
 80041bc:	46c0      	nop			; (mov r8, r8)
		};
		term_putsl(&stdwin, tbuf, 0);
 80041be:	2440      	movs	r4, #64	; 0x40
 80041c0:	1939      	adds	r1, r7, r4
 80041c2:	2518      	movs	r5, #24
 80041c4:	197b      	adds	r3, r7, r5
 80041c6:	2200      	movs	r2, #0
 80041c8:	0018      	movs	r0, r3
 80041ca:	f001 fcf7 	bl	8005bbc <term_putsl>
		/* do not print anything if in room controls */
		if (ctrl_idx != 0) {
 80041ce:	238c      	movs	r3, #140	; 0x8c
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <main+0x2f0>
			pnet_dump_state_as_str(sys, sbuf);
 80041d8:	2654      	movs	r6, #84	; 0x54
 80041da:	19ba      	adds	r2, r7, r6
 80041dc:	2388      	movs	r3, #136	; 0x88
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f001 f8f9 	bl	80053dc <pnet_dump_state_as_str>
			snprintf(tbuf, 16, "%.8s %04lu", sbuf, delta);
 80041ea:	19b9      	adds	r1, r7, r6
 80041ec:	4a4d      	ldr	r2, [pc, #308]	; (8004324 <main+0x40c>)
 80041ee:	1938      	adds	r0, r7, r4
 80041f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	000b      	movs	r3, r1
 80041f6:	2110      	movs	r1, #16
 80041f8:	f005 f8cc 	bl	8009394 <sniprintf>
			term_putsl(&stdwin, tbuf, 1);
 80041fc:	1939      	adds	r1, r7, r4
 80041fe:	197b      	adds	r3, r7, r5
 8004200:	2201      	movs	r2, #1
 8004202:	0018      	movs	r0, r3
 8004204:	f001 fcda 	bl	8005bbc <term_putsl>
		}
		/* simulation for different systems */
		uint32_t chance = rand() % 100;
 8004208:	f005 f86a 	bl	80092e0 <rand>
 800420c:	0003      	movs	r3, r0
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	0018      	movs	r0, r3
 8004212:	f7fc f90f 	bl	8000434 <__aeabi_idivmod>
 8004216:	000b      	movs	r3, r1
 8004218:	673b      	str	r3, [r7, #112]	; 0x70
		room.cdata->prev_temp = room.cdata->curr_temp;
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <main+0x3dc>)
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <main+0x3dc>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	605a      	str	r2, [r3, #4]
		switch (sys_idx) {
 8004226:	2290      	movs	r2, #144	; 0x90
 8004228:	18bb      	adds	r3, r7, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d004      	beq.n	800423a <main+0x322>
 8004230:	18bb      	adds	r3, r7, r2
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d02f      	beq.n	8004298 <main+0x380>
				}
			}
			break;

		default:
			break;
 8004238:	e087      	b.n	800434a <main+0x432>
			if (i % 25 == 0) {
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2119      	movs	r1, #25
 8004242:	0018      	movs	r0, r3
 8004244:	f7fc f80c 	bl	8000260 <__aeabi_uidivmod>
 8004248:	1e0b      	subs	r3, r1, #0
 800424a:	d000      	beq.n	800424e <main+0x336>
 800424c:	e07a      	b.n	8004344 <main+0x42c>
				if (chance < 40) {
 800424e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004250:	2b27      	cmp	r3, #39	; 0x27
 8004252:	d805      	bhi.n	8004260 <main+0x348>
					room.cdata->curr_temp--;
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <main+0x3dc>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	3a01      	subs	r2, #1
 800425c:	609a      	str	r2, [r3, #8]
			break;
 800425e:	e071      	b.n	8004344 <main+0x42c>
				} else if (chance >= 40 && chance < 70) {
 8004260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004262:	2b27      	cmp	r3, #39	; 0x27
 8004264:	d90a      	bls.n	800427c <main+0x364>
 8004266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004268:	2b45      	cmp	r3, #69	; 0x45
 800426a:	d807      	bhi.n	800427c <main+0x364>
					room.cdata->curr_temp -= 5;
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <main+0x3dc>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <main+0x3dc>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	3a05      	subs	r2, #5
 8004278:	609a      	str	r2, [r3, #8]
			break;
 800427a:	e063      	b.n	8004344 <main+0x42c>
				} else if (chance >= 70 && chance < 100) {
 800427c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800427e:	2b45      	cmp	r3, #69	; 0x45
 8004280:	d960      	bls.n	8004344 <main+0x42c>
 8004282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004284:	2b63      	cmp	r3, #99	; 0x63
 8004286:	d85d      	bhi.n	8004344 <main+0x42c>
					room.cdata->curr_temp -= 10;
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <main+0x3dc>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <main+0x3dc>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	3a0a      	subs	r2, #10
 8004294:	609a      	str	r2, [r3, #8]
			break;
 8004296:	e055      	b.n	8004344 <main+0x42c>
			if (i % 25 == 0) {
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2119      	movs	r1, #25
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fb ffdd 	bl	8000260 <__aeabi_uidivmod>
 80042a6:	1e0b      	subs	r3, r1, #0
 80042a8:	d14e      	bne.n	8004348 <main+0x430>
				room.cdata->prev_temp = room.cdata->curr_temp;
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <main+0x3dc>)
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <main+0x3dc>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	605a      	str	r2, [r3, #4]
				if (chance < 40) {
 80042b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b8:	2b27      	cmp	r3, #39	; 0x27
 80042ba:	d805      	bhi.n	80042c8 <main+0x3b0>
					room.cdata->curr_temp++;
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <main+0x3dc>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	3201      	adds	r2, #1
 80042c4:	609a      	str	r2, [r3, #8]
			break;
 80042c6:	e03f      	b.n	8004348 <main+0x430>
				} else if (chance >= 40 && chance < 70) {
 80042c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ca:	2b27      	cmp	r3, #39	; 0x27
 80042cc:	d92c      	bls.n	8004328 <main+0x410>
 80042ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d0:	2b45      	cmp	r3, #69	; 0x45
 80042d2:	d829      	bhi.n	8004328 <main+0x410>
					room.cdata->curr_temp += 5;
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <main+0x3dc>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <main+0x3dc>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	3205      	adds	r2, #5
 80042e0:	609a      	str	r2, [r3, #8]
			break;
 80042e2:	e031      	b.n	8004348 <main+0x430>
 80042e4:	20000300 	.word	0x20000300
 80042e8:	20000238 	.word	0x20000238
 80042ec:	20000240 	.word	0x20000240
 80042f0:	20000250 	.word	0x20000250
 80042f4:	20000260 	.word	0x20000260
 80042f8:	0800cf5c 	.word	0x0800cf5c
 80042fc:	0800cf68 	.word	0x0800cf68
 8004300:	2000000c 	.word	0x2000000c
 8004304:	20000280 	.word	0x20000280
 8004308:	20000274 	.word	0x20000274
 800430c:	20000018 	.word	0x20000018
 8004310:	0800cf00 	.word	0x0800cf00
 8004314:	0800cf0c 	.word	0x0800cf0c
 8004318:	0800cf20 	.word	0x0800cf20
 800431c:	200003b4 	.word	0x200003b4
 8004320:	0800cf3c 	.word	0x0800cf3c
 8004324:	0800cf50 	.word	0x0800cf50
				} else if (chance >= 70 && chance < 100) {
 8004328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432a:	2b45      	cmp	r3, #69	; 0x45
 800432c:	d90c      	bls.n	8004348 <main+0x430>
 800432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004330:	2b63      	cmp	r3, #99	; 0x63
 8004332:	d809      	bhi.n	8004348 <main+0x430>
					room.cdata->curr_temp += 10;
 8004334:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <main+0x588>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <main+0x588>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	320a      	adds	r2, #10
 8004340:	609a      	str	r2, [r3, #8]
			break;
 8004342:	e001      	b.n	8004348 <main+0x430>
			break;
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	e000      	b.n	800434a <main+0x432>
			break;
 8004348:	46c0      	nop			; (mov r8, r8)
		};
		i++;
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	18bb      	adds	r3, r7, r2
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	18ba      	adds	r2, r7, r2
 8004354:	6013      	str	r3, [r2, #0]

		/* draw render */
		term_draw(&stdwin);
 8004356:	2318      	movs	r3, #24
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	0018      	movs	r0, r3
 800435c:	f001 fb39 	bl	80059d2 <term_draw>

		/* do something only if button was pressed */
		if (!ubtn.press)
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <main+0x58c>)
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	4053      	eors	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <main+0x458>
 800436e:	e094      	b.n	800449a <main+0x582>
			continue;
		/* room controls emulation */
		control_by_idx(&room, ctrl_idx);
 8004370:	248c      	movs	r4, #140	; 0x8c
 8004372:	193b      	adds	r3, r7, r4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <main+0x588>)
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff fd96 	bl	8003eac <control_by_idx>
		/* cycle through systems */
		if(ubtn.val == BP_LONG) {
 8004380:	4b48      	ldr	r3, [pc, #288]	; (80044a4 <main+0x58c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b09      	cmp	r3, #9
 8004386:	d000      	beq.n	800438a <main+0x472>
 8004388:	e080      	b.n	800448c <main+0x574>
			/* currently loaded system */
			if (ctrl_idx > 0)
 800438a:	193b      	adds	r3, r7, r4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <main+0x490>
				sys_idx = (sys_idx + 1) % MAX_SYSTEMS;
 8004392:	2490      	movs	r4, #144	; 0x90
 8004394:	193b      	adds	r3, r7, r4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	2103      	movs	r1, #3
 800439c:	0018      	movs	r0, r3
 800439e:	f7fb ff5f 	bl	8000260 <__aeabi_uidivmod>
 80043a2:	000b      	movs	r3, r1
 80043a4:	193a      	adds	r2, r7, r4
 80043a6:	6013      	str	r3, [r2, #0]
			/* 0 is room, others are system controls */
			ctrl_idx = (ctrl_idx + 1) % (MAX_SYSTEMS + 1);
 80043a8:	218c      	movs	r1, #140	; 0x8c
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	2203      	movs	r2, #3
 80043b2:	4013      	ands	r3, r2
 80043b4:	187a      	adds	r2, r7, r1
 80043b6:	6013      	str	r3, [r2, #0]
			/* free previous & create next */
			pnet_free(sys);
 80043b8:	2488      	movs	r4, #136	; 0x88
 80043ba:	193b      	adds	r3, r7, r4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fe3a 	bl	8005038 <pnet_free>
			sys = pnet_create();
 80043c4:	f000 fe1a 	bl	8004ffc <pnet_create>
 80043c8:	0003      	movs	r3, r0
 80043ca:	193a      	adds	r2, r7, r4
 80043cc:	6013      	str	r3, [r2, #0]
			/* reinit system */
			pnet_init(sys, sys_names[sys_idx]);
 80043ce:	003b      	movs	r3, r7
 80043d0:	2590      	movs	r5, #144	; 0x90
 80043d2:	197a      	adds	r2, r7, r5
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	58d2      	ldr	r2, [r2, r3]
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0011      	movs	r1, r2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 fe88 	bl	80050f6 <pnet_init>
			jstatus = pnet_deserialize(sys, jstr[sys_idx]);
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <main+0x590>)
 80043e8:	197a      	adds	r2, r7, r5
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	0092      	lsls	r2, r2, #2
 80043ee:	58d2      	ldr	r2, [r2, r3]
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 ff62 	bl	80052c0 <pnet_deserialize>
 80043fc:	0003      	movs	r3, r0
 80043fe:	2294      	movs	r2, #148	; 0x94
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	6013      	str	r3, [r2, #0]
			/* set transition functions */
			offset = offsets[sys_idx];
 8004404:	230c      	movs	r3, #12
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	197a      	adds	r2, r7, r5
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	0092      	lsls	r2, r2, #2
 800440e:	58d3      	ldr	r3, [r2, r3]
 8004410:	67bb      	str	r3, [r7, #120]	; 0x78
			for (uint32_t i = 0; i < sys->trans_count; i++) {
 8004412:	2300      	movs	r3, #0
 8004414:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004416:	e017      	b.n	8004448 <main+0x530>
				const uint32_t x = offset + i;
 8004418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800441a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800441c:	18d3      	adds	r3, r2, r3
 800441e:	66fb      	str	r3, [r7, #108]	; 0x6c
				trans_set_action(sys->trans[i], funcs[x], &room);
 8004420:	2388      	movs	r3, #136	; 0x88
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004428:	3314      	adds	r3, #20
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	3304      	adds	r3, #4
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <main+0x594>)
 8004434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	58d3      	ldr	r3, [r2, r3]
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <main+0x588>)
 800443c:	0019      	movs	r1, r3
 800443e:	f000 fc3e 	bl	8004cbe <trans_set_action>
			for (uint32_t i = 0; i < sys->trans_count; i++) {
 8004442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004444:	3301      	adds	r3, #1
 8004446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004448:	2388      	movs	r3, #136	; 0x88
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2294      	movs	r2, #148	; 0x94
 8004450:	589b      	ldr	r3, [r3, r2]
 8004452:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004454:	429a      	cmp	r2, r3
 8004456:	d3df      	bcc.n	8004418 <main+0x500>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <main+0x598>)
 800445a:	2200      	movs	r2, #0
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	0018      	movs	r0, r3
 8004460:	f001 ff3e 	bl	80062e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <main+0x598>)
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0018      	movs	r0, r3
 800446c:	f001 ff38 	bl	80062e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	480e      	ldr	r0, [pc, #56]	; (80044b0 <main+0x598>)
 8004476:	2200      	movs	r2, #0
 8004478:	0019      	movs	r1, r3
 800447a:	f001 ff31 	bl	80062e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	480b      	ldr	r0, [pc, #44]	; (80044b0 <main+0x598>)
 8004484:	2200      	movs	r2, #0
 8004486:	0019      	movs	r1, r3
 8004488:	f001 ff2a 	bl	80062e0 <HAL_GPIO_WritePin>
		}
		/* clear button press */
		ubtn.val = BP_NONE;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <main+0x58c>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
		ubtn.press = false;
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <main+0x58c>)
 8004494:	2200      	movs	r2, #0
 8004496:	711a      	strb	r2, [r3, #4]
 8004498:	e61b      	b.n	80040d2 <main+0x1ba>
			continue;
 800449a:	46c0      	nop			; (mov r8, r8)
	while (1) {
 800449c:	e619      	b.n	80040d2 <main+0x1ba>
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	20000260 	.word	0x20000260
 80044a4:	20000224 	.word	0x20000224
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	20000280 	.word	0x20000280
 80044b0:	48000800 	.word	0x48000800

080044b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b099      	sub	sp, #100	; 0x64
 80044b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ba:	242c      	movs	r4, #44	; 0x2c
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	0018      	movs	r0, r3
 80044c0:	2334      	movs	r3, #52	; 0x34
 80044c2:	001a      	movs	r2, r3
 80044c4:	2100      	movs	r1, #0
 80044c6:	f004 fe2a 	bl	800911e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ca:	231c      	movs	r3, #28
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	0018      	movs	r0, r3
 80044d0:	2310      	movs	r3, #16
 80044d2:	001a      	movs	r2, r3
 80044d4:	2100      	movs	r1, #0
 80044d6:	f004 fe22 	bl	800911e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044da:	003b      	movs	r3, r7
 80044dc:	0018      	movs	r0, r3
 80044de:	231c      	movs	r3, #28
 80044e0:	001a      	movs	r2, r3
 80044e2:	2100      	movs	r1, #0
 80044e4:	f004 fe1b 	bl	800911e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 80044e8:	0021      	movs	r1, r4
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2228      	movs	r2, #40	; 0x28
 80044ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2201      	movs	r2, #1
 80044f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2201      	movs	r2, #1
 80044fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2200      	movs	r2, #0
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004502:	187b      	adds	r3, r7, r1
 8004504:	0018      	movs	r0, r3
 8004506:	f003 f9df 	bl	80078c8 <HAL_RCC_OscConfig>
 800450a:	1e03      	subs	r3, r0, #0
 800450c:	d001      	beq.n	8004512 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800450e:	f000 fa31 	bl	8004974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004512:	211c      	movs	r1, #28
 8004514:	187b      	adds	r3, r7, r1
 8004516:	2207      	movs	r2, #7
 8004518:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800451a:	187b      	adds	r3, r7, r1
 800451c:	2203      	movs	r2, #3
 800451e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004520:	187b      	adds	r3, r7, r1
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004526:	187b      	adds	r3, r7, r1
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800452c:	187b      	adds	r3, r7, r1
 800452e:	2101      	movs	r1, #1
 8004530:	0018      	movs	r0, r3
 8004532:	f003 fd4f 	bl	8007fd4 <HAL_RCC_ClockConfig>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d001      	beq.n	800453e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800453a:	f000 fa1b 	bl	8004974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800453e:	003b      	movs	r3, r7
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <SystemClock_Config+0xb8>)
 8004542:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004544:	003b      	movs	r3, r7
 8004546:	2210      	movs	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800454a:	003b      	movs	r3, r7
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004552:	003b      	movs	r3, r7
 8004554:	0018      	movs	r0, r3
 8004556:	f003 fe97 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d001      	beq.n	8004562 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800455e:	f000 fa09 	bl	8004974 <Error_Handler>
  }
}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b019      	add	sp, #100	; 0x64
 8004568:	bd90      	pop	{r4, r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	00010020 	.word	0x00010020

08004570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <MX_I2C1_Init+0x74>)
 8004576:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <MX_I2C1_Init+0x78>)
 8004578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800457a:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <MX_I2C1_Init+0x74>)
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <MX_I2C1_Init+0x7c>)
 800457e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 126;
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <MX_I2C1_Init+0x74>)
 8004582:	227e      	movs	r2, #126	; 0x7e
 8004584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004586:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <MX_I2C1_Init+0x74>)
 8004588:	2201      	movs	r2, #1
 800458a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <MX_I2C1_Init+0x74>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <MX_I2C1_Init+0x74>)
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <MX_I2C1_Init+0x74>)
 800459a:	2200      	movs	r2, #0
 800459c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <MX_I2C1_Init+0x74>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <MX_I2C1_Init+0x74>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <MX_I2C1_Init+0x74>)
 80045ac:	0018      	movs	r0, r3
 80045ae:	f001 fed1 	bl	8006354 <HAL_I2C_Init>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d001      	beq.n	80045ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80045b6:	f000 f9dd 	bl	8004974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <MX_I2C1_Init+0x74>)
 80045bc:	2100      	movs	r1, #0
 80045be:	0018      	movs	r0, r3
 80045c0:	f003 f8ea 	bl	8007798 <HAL_I2CEx_ConfigAnalogFilter>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80045c8:	f000 f9d4 	bl	8004974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <MX_I2C1_Init+0x74>)
 80045ce:	2100      	movs	r1, #0
 80045d0:	0018      	movs	r0, r3
 80045d2:	f003 f92d 	bl	8007830 <HAL_I2CEx_ConfigDigitalFilter>
 80045d6:	1e03      	subs	r3, r0, #0
 80045d8:	d001      	beq.n	80045de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80045da:	f000 f9cb 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000300 	.word	0x20000300
 80045e8:	40005400 	.word	0x40005400
 80045ec:	20303e5d 	.word	0x20303e5d

080045f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	0018      	movs	r0, r3
 80045fa:	2314      	movs	r3, #20
 80045fc:	001a      	movs	r2, r3
 80045fe:	2100      	movs	r1, #0
 8004600:	f004 fd8d 	bl	800911e <memset>
  RTC_DateTypeDef sDate = {0};
 8004604:	003b      	movs	r3, r7
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800460a:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <MX_RTC_Init+0xc0>)
 800460c:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <MX_RTC_Init+0xc4>)
 800460e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004618:	227f      	movs	r2, #127	; 0x7f
 800461a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 319;
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <MX_RTC_Init+0xc0>)
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	32ff      	adds	r2, #255	; 0xff
 8004622:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004626:	2200      	movs	r2, #0
 8004628:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800462a:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <MX_RTC_Init+0xc0>)
 800462c:	2200      	movs	r2, #0
 800462e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004638:	0018      	movs	r0, r3
 800463a:	f003 ff23 	bl	8008484 <HAL_RTC_Init>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8004642:	f000 f997 	bl	8004974 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	2223      	movs	r2, #35	; 0x23
 800464a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x59;
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	2259      	movs	r2, #89	; 0x59
 8004650:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x45;
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	2245      	movs	r2, #69	; 0x45
 8004656:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	0292      	lsls	r2, r2, #10
 800465e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	02d2      	lsls	r2, r2, #11
 8004666:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004668:	1d39      	adds	r1, r7, #4
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <MX_RTC_Init+0xc0>)
 800466c:	2201      	movs	r2, #1
 800466e:	0018      	movs	r0, r3
 8004670:	f003 ff9c 	bl	80085ac <HAL_RTC_SetTime>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d001      	beq.n	800467c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8004678:	f000 f97c 	bl	8004974 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800467c:	003b      	movs	r3, r7
 800467e:	2207      	movs	r2, #7
 8004680:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8004682:	003b      	movs	r3, r7
 8004684:	2212      	movs	r2, #18
 8004686:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x31;
 8004688:	003b      	movs	r3, r7
 800468a:	2231      	movs	r2, #49	; 0x31
 800468c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x99;
 800468e:	003b      	movs	r3, r7
 8004690:	2299      	movs	r2, #153	; 0x99
 8004692:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004694:	0039      	movs	r1, r7
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <MX_RTC_Init+0xc0>)
 8004698:	2201      	movs	r2, #1
 800469a:	0018      	movs	r0, r3
 800469c:	f004 f842 	bl	8008724 <HAL_RTC_SetDate>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d001      	beq.n	80046a8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80046a4:	f000 f966 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	2000034c 	.word	0x2000034c
 80046b4:	40002800 	.word	0x40002800

080046b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046be:	003b      	movs	r3, r7
 80046c0:	0018      	movs	r0, r3
 80046c2:	2308      	movs	r3, #8
 80046c4:	001a      	movs	r2, r3
 80046c6:	2100      	movs	r1, #0
 80046c8:	f004 fd29 	bl	800911e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <MX_TIM6_Init+0x70>)
 80046d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8191;
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <MX_TIM6_Init+0x74>)
 80046d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5859;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046e0:	4a13      	ldr	r2, [pc, #76]	; (8004730 <MX_TIM6_Init+0x78>)
 80046e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_TIM6_Init+0x6c>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f004 f935 	bl	800895c <HAL_TIM_Base_Init>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80046f6:	f000 f93d 	bl	8004974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80046fa:	003b      	movs	r3, r7
 80046fc:	2210      	movs	r2, #16
 80046fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004700:	003b      	movs	r3, r7
 8004702:	2200      	movs	r2, #0
 8004704:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004706:	003a      	movs	r2, r7
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <MX_TIM6_Init+0x6c>)
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f004 fbab 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004716:	f000 f92d 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	2000036c 	.word	0x2000036c
 8004728:	40001000 	.word	0x40001000
 800472c:	00001fff 	.word	0x00001fff
 8004730:	000016e3 	.word	0x000016e3

08004734 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <MX_TIM14_Init+0x44>)
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <MX_TIM14_Init+0x48>)
 800473c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 732;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <MX_TIM14_Init+0x44>)
 8004740:	22b7      	movs	r2, #183	; 0xb7
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <MX_TIM14_Init+0x44>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <MX_TIM14_Init+0x44>)
 800474e:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <MX_TIM14_Init+0x4c>)
 8004750:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <MX_TIM14_Init+0x44>)
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	0092      	lsls	r2, r2, #2
 8004758:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <MX_TIM14_Init+0x44>)
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <MX_TIM14_Init+0x44>)
 8004762:	0018      	movs	r0, r3
 8004764:	f004 f8fa 	bl	800895c <HAL_TIM_Base_Init>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800476c:	f000 f902 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	200003b8 	.word	0x200003b8
 800477c:	40002000 	.word	0x40002000
 8004780:	0000ffff 	.word	0x0000ffff

08004784 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <MX_TSC_Init+0x80>)
 800478a:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <MX_TSC_Init+0x84>)
 800478c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <MX_TSC_Init+0x80>)
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	0552      	lsls	r2, r2, #21
 8004794:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <MX_TSC_Init+0x80>)
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	0452      	lsls	r2, r2, #17
 800479c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <MX_TSC_Init+0x80>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <MX_TSC_Init+0x80>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <MX_TSC_Init+0x80>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80047b0:	4b14      	ldr	r3, [pc, #80]	; (8004804 <MX_TSC_Init+0x80>)
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0192      	lsls	r2, r2, #6
 80047b6:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <MX_TSC_Init+0x80>)
 80047ba:	22a0      	movs	r2, #160	; 0xa0
 80047bc:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <MX_TSC_Init+0x80>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <MX_TSC_Init+0x80>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <MX_TSC_Init+0x80>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <MX_TSC_Init+0x80>)
 80047d2:	222c      	movs	r2, #44	; 0x2c
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <MX_TSC_Init+0x80>)
 80047da:	2291      	movs	r2, #145	; 0x91
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <MX_TSC_Init+0x80>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <MX_TSC_Init+0x80>)
 80047e8:	2291      	movs	r2, #145	; 0x91
 80047ea:	00d2      	lsls	r2, r2, #3
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <MX_TSC_Init+0x80>)
 80047f0:	0018      	movs	r0, r3
 80047f2:	f004 fba7 	bl	8008f44 <HAL_TSC_Init>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d001      	beq.n	80047fe <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80047fa:	f000 f8bb 	bl	8004974 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000400 	.word	0x20000400
 8004808:	40024000 	.word	0x40024000

0800480c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004812:	240c      	movs	r4, #12
 8004814:	193b      	adds	r3, r7, r4
 8004816:	0018      	movs	r0, r3
 8004818:	2314      	movs	r3, #20
 800481a:	001a      	movs	r2, r3
 800481c:	2100      	movs	r1, #0
 800481e:	f004 fc7e 	bl	800911e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <MX_GPIO_Init+0x158>)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <MX_GPIO_Init+0x158>)
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	0309      	lsls	r1, r1, #12
 800482c:	430a      	orrs	r2, r1
 800482e:	615a      	str	r2, [r3, #20]
 8004830:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <MX_GPIO_Init+0x158>)
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	031b      	lsls	r3, r3, #12
 8004838:	4013      	ands	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800483e:	4b49      	ldr	r3, [pc, #292]	; (8004964 <MX_GPIO_Init+0x158>)
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	4b48      	ldr	r3, [pc, #288]	; (8004964 <MX_GPIO_Init+0x158>)
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0289      	lsls	r1, r1, #10
 8004848:	430a      	orrs	r2, r1
 800484a:	615a      	str	r2, [r3, #20]
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <MX_GPIO_Init+0x158>)
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800485a:	4b42      	ldr	r3, [pc, #264]	; (8004964 <MX_GPIO_Init+0x158>)
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <MX_GPIO_Init+0x158>)
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	02c9      	lsls	r1, r1, #11
 8004864:	430a      	orrs	r2, r1
 8004866:	615a      	str	r2, [r3, #20]
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <MX_GPIO_Init+0x158>)
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	02db      	lsls	r3, r3, #11
 8004870:	4013      	ands	r3, r2
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8004876:	493c      	ldr	r1, [pc, #240]	; (8004968 <MX_GPIO_Init+0x15c>)
 8004878:	4b3c      	ldr	r3, [pc, #240]	; (800496c <MX_GPIO_Init+0x160>)
 800487a:	2200      	movs	r2, #0
 800487c:	0018      	movs	r0, r3
 800487e:	f001 fd2f 	bl	80062e0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8004882:	193b      	adds	r3, r7, r4
 8004884:	4a38      	ldr	r2, [pc, #224]	; (8004968 <MX_GPIO_Init+0x15c>)
 8004886:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	193b      	adds	r3, r7, r4
 800488a:	2201      	movs	r2, #1
 800488c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	193b      	adds	r3, r7, r4
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004894:	193b      	adds	r3, r7, r4
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800489a:	193b      	adds	r3, r7, r4
 800489c:	4a33      	ldr	r2, [pc, #204]	; (800496c <MX_GPIO_Init+0x160>)
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f001 fba5 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80048a6:	0021      	movs	r1, r4
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	2206      	movs	r2, #6
 80048ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	2290      	movs	r2, #144	; 0x90
 80048b2:	0352      	lsls	r2, r2, #13
 80048b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	000c      	movs	r4, r1
 80048b8:	193b      	adds	r3, r7, r4
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <MX_GPIO_Init+0x160>)
 80048c2:	0019      	movs	r1, r3
 80048c4:	0010      	movs	r0, r2
 80048c6:	f001 fb93 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048d0:	193b      	adds	r3, r7, r4
 80048d2:	2288      	movs	r2, #136	; 0x88
 80048d4:	0352      	lsls	r2, r2, #13
 80048d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d8:	193b      	adds	r3, r7, r4
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048de:	193a      	adds	r2, r7, r4
 80048e0:	2390      	movs	r3, #144	; 0x90
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f001 fb82 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80048ec:	0021      	movs	r1, r4
 80048ee:	187b      	adds	r3, r7, r1
 80048f0:	22c0      	movs	r2, #192	; 0xc0
 80048f2:	0112      	lsls	r2, r2, #4
 80048f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048f6:	000c      	movs	r4, r1
 80048f8:	193b      	adds	r3, r7, r4
 80048fa:	2212      	movs	r2, #18
 80048fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	2201      	movs	r2, #1
 8004902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004904:	193b      	adds	r3, r7, r4
 8004906:	2203      	movs	r2, #3
 8004908:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800490a:	193b      	adds	r3, r7, r4
 800490c:	2201      	movs	r2, #1
 800490e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004910:	193b      	adds	r3, r7, r4
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <MX_GPIO_Init+0x164>)
 8004914:	0019      	movs	r1, r3
 8004916:	0010      	movs	r0, r2
 8004918:	f001 fb6a 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SCK_Pin SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800491c:	0021      	movs	r1, r4
 800491e:	187b      	adds	r3, r7, r1
 8004920:	22e0      	movs	r2, #224	; 0xe0
 8004922:	0212      	lsls	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	187b      	adds	r3, r7, r1
 8004928:	2202      	movs	r2, #2
 800492a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	187b      	adds	r3, r7, r1
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004932:	187b      	adds	r3, r7, r1
 8004934:	2203      	movs	r2, #3
 8004936:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004938:	187b      	adds	r3, r7, r1
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493e:	187b      	adds	r3, r7, r1
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <MX_GPIO_Init+0x164>)
 8004942:	0019      	movs	r1, r3
 8004944:	0010      	movs	r0, r2
 8004946:	f001 fb53 	bl	8005ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2101      	movs	r1, #1
 800494e:	2005      	movs	r0, #5
 8004950:	f001 faca 	bl	8005ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004954:	2005      	movs	r0, #5
 8004956:	f001 fadc 	bl	8005f12 <HAL_NVIC_EnableIRQ>

}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b009      	add	sp, #36	; 0x24
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40021000 	.word	0x40021000
 8004968:	000003e1 	.word	0x000003e1
 800496c:	48000800 	.word	0x48000800
 8004970:	48000400 	.word	0x48000400

08004974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
}
 800497a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800497c:	e7fe      	b.n	800497c <Error_Handler+0x8>

0800497e <empty_action_false>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int empty_action_false(void *data)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
    return -1;
 8004986:	2301      	movs	r3, #1
 8004988:	425b      	negs	r3, r3
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}

08004992 <empty_action_true>:

int empty_action_true(void *data)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
    return 0;
 800499a:	2300      	movs	r3, #0
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <place_create>:

/* PLACES INTERFACE */
pn_place *place_create(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
    pn_place *place = malloc(sizeof(*place));
 80049aa:	2014      	movs	r0, #20
 80049ac:	f004 fb9a 	bl	80090e4 <malloc>
 80049b0:	0003      	movs	r3, r0
 80049b2:	607b      	str	r3, [r7, #4]
    place_init(place, "P", 0);
 80049b4:	4908      	ldr	r1, [pc, #32]	; (80049d8 <place_create+0x34>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 f853 	bl	8004a66 <place_init>
    memalloc += sizeof(*place);
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <place_create+0x38>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	001a      	movs	r2, r3
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <place_create+0x38>)
 80049ca:	601a      	str	r2, [r3, #0]
    return place;
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	0800cf74 	.word	0x0800cf74
 80049dc:	200003b4 	.word	0x200003b4

080049e0 <place_free>:

int place_free(pn_place *place)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    if (!place)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <place_free+0x14>
        return -1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	425b      	negs	r3, r3
 80049f2:	e00a      	b.n	8004a0a <place_free+0x2a>

    memalloc -= sizeof(*place);
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <place_free+0x34>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3b14      	subs	r3, #20
 80049fa:	001a      	movs	r2, r3
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <place_free+0x34>)
 80049fe:	601a      	str	r2, [r3, #0]
    free(place);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f004 fb78 	bl	80090f8 <free>
    return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	200003b4 	.word	0x200003b4

08004a18 <place_set_name>:

void place_set_name(pn_place *place, const char *name)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
    uint32_t length = strlen(name);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fb fb79 	bl	800011c <strlen>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	60fb      	str	r3, [r7, #12]
    strncpy(place->name, name, (length < MAX_NAME) ? length + 1 : MAX_NAME - 1);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d802      	bhi.n	8004a3c <place_set_name+0x24>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	e000      	b.n	8004a3e <place_set_name+0x26>
 8004a3c:	230f      	movs	r3, #15
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	001a      	movs	r2, r3
 8004a42:	f004 fd38 	bl	80094b6 <strncpy>
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <place_set_tokens>:

void place_set_tokens(pn_place *place, uint32_t tokens)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
    place->tokens = tokens;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	611a      	str	r2, [r3, #16]
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b002      	add	sp, #8
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <place_init>:

int place_init(pn_place *place, const char *name, uint32_t tokens)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
    if (!place)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <place_init+0x18>
        return -1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	425b      	negs	r3, r3
 8004a7c:	e00c      	b.n	8004a98 <place_init+0x32>

    place_set_name(place, name);
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ffc7 	bl	8004a18 <place_set_name>
    place_set_tokens(place, tokens);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0011      	movs	r1, r2
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7ff ffdc 	bl	8004a4e <place_set_tokens>

    return 0;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b004      	add	sp, #16
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <place_has_tokens>:

bool place_has_tokens(pn_place *place)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    if (!place)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <place_has_tokens+0x12>
        return false;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e004      	b.n	8004abc <place_has_tokens+0x1c>

    return (place->tokens > 0);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	4193      	sbcs	r3, r2
 8004aba:	b2db      	uxtb	r3, r3
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <place_add_tokens>:
    
    return place->tokens;
}

int place_add_tokens(pn_place *place, uint32_t n)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
    if (!place)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <place_add_tokens+0x16>
        return -1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	e015      	b.n	8004b06 <place_add_tokens+0x42>
    
    /* check for overflow */
    if (place->tokens + n < place->tokens) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	18d2      	adds	r2, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d206      	bcs.n	8004af8 <place_add_tokens+0x34>
        place->tokens = UINT32_MAX;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	4252      	negs	r2, r2
 8004af0:	611a      	str	r2, [r3, #16]
        return -2;
 8004af2:	2302      	movs	r3, #2
 8004af4:	425b      	negs	r3, r3
 8004af6:	e006      	b.n	8004b06 <place_add_tokens+0x42>
    }

    place->tokens = place->tokens + n;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	18d2      	adds	r2, r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	611a      	str	r2, [r3, #16]

    return 0;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b002      	add	sp, #8
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <place_rm_tokens>:

int place_rm_tokens(pn_place *place, uint32_t n)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
    if (!place)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <place_rm_tokens+0x16>
        return -1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	425b      	negs	r3, r3
 8004b22:	e011      	b.n	8004b48 <place_rm_tokens+0x3a>
    
    /* check for overflow */
    if (place->tokens - n > place->tokens) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d905      	bls.n	8004b3a <place_rm_tokens+0x2c>
        place->tokens = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
        return -2;
 8004b34:	2302      	movs	r3, #2
 8004b36:	425b      	negs	r3, r3
 8004b38:	e006      	b.n	8004b48 <place_rm_tokens+0x3a>
    }

    place->tokens = place->tokens - n;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]

    return 0;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <place_inc_token>:

inline int place_inc_token(pn_place *place)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    return place_add_tokens(place, 1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff ffb1 	bl	8004ac4 <place_add_tokens>
 8004b62:	0003      	movs	r3, r0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <place_dec_token>:

inline int place_dec_token(pn_place *place)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
    return place_rm_tokens(place, 1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2101      	movs	r1, #1
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7ff ffc8 	bl	8004b0e <place_rm_tokens>
 8004b7e:	0003      	movs	r3, r0
}
 8004b80:	0018      	movs	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <place_deserialize>:

    return jplace;
}

int place_deserialize(pn_place *place, cJSON *jplace)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
    if (!place || !jplace)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <place_deserialize+0x16>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <place_deserialize+0x1c>
        return -1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	425b      	negs	r3, r3
 8004ba2:	e02f      	b.n	8004c04 <place_deserialize+0x7c>

    /* field is borrowed object, do not free */
    cJSON *field = cJSON_GetObjectItemCaseSensitive(jplace, "name"); 
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <place_deserialize+0x84>)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	0011      	movs	r1, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe ff1d 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	60fb      	str	r3, [r7, #12]
    /* get fields */
    if (cJSON_IsString(field) && (field->valuestring != NULL)) { 
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7fe ff3c 	bl	8003a34 <cJSON_IsString>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d00a      	beq.n	8004bd6 <place_deserialize+0x4e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <place_deserialize+0x4e>
        place_set_name(place, field->valuestring);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0011      	movs	r1, r2
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff ff21 	bl	8004a18 <place_set_name>
    }
    field = cJSON_GetObjectItemCaseSensitive(jplace, "tokens");
 8004bd6:	4a0e      	ldr	r2, [pc, #56]	; (8004c10 <place_deserialize+0x88>)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fe ff04 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004be2:	0003      	movs	r3, r0
 8004be4:	60fb      	str	r3, [r7, #12]
    if (cJSON_IsNumber(field)) { 
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7fe ff0e 	bl	8003a0a <cJSON_IsNumber>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d007      	beq.n	8004c02 <place_deserialize+0x7a>
        place_set_tokens(place, field->valueint);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7ff ff26 	bl	8004a4e <place_set_tokens>
    }

    return 0;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b004      	add	sp, #16
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	0800cf78 	.word	0x0800cf78
 8004c10:	0800cf80 	.word	0x0800cf80

08004c14 <trans_create>:
    return 0;
}

/* TRANSITIONS INTERFACE */
pn_trans *trans_create(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
    pn_trans *trans = malloc(sizeof(*trans));
 8004c1a:	2060      	movs	r0, #96	; 0x60
 8004c1c:	f004 fa62 	bl	80090e4 <malloc>
 8004c20:	0003      	movs	r3, r0
 8004c22:	607b      	str	r3, [r7, #4]
    trans_init(trans, "t");
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <trans_create+0x34>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0011      	movs	r1, r2
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 f85e 	bl	8004cec <trans_init>
    memalloc += sizeof(*trans);
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <trans_create+0x38>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3360      	adds	r3, #96	; 0x60
 8004c36:	001a      	movs	r2, r3
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <trans_create+0x38>)
 8004c3a:	601a      	str	r2, [r3, #0]
    return trans;
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	0800cf98 	.word	0x0800cf98
 8004c4c:	200003b4 	.word	0x200003b4

08004c50 <trans_free>:

int trans_free(pn_trans *trans)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    if (!trans)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <trans_free+0x14>
        return -1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	425b      	negs	r3, r3
 8004c62:	e00a      	b.n	8004c7a <trans_free+0x2a>

    memalloc -= sizeof(*trans);
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <trans_free+0x34>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b60      	subs	r3, #96	; 0x60
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <trans_free+0x34>)
 8004c6e:	601a      	str	r2, [r3, #0]
    free(trans);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f004 fa40 	bl	80090f8 <free>
    return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	200003b4 	.word	0x200003b4

08004c88 <trans_set_name>:

void trans_set_name(pn_trans *trans, const char *name)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
    uint32_t length = strlen(name);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fb fa41 	bl	800011c <strlen>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	60fb      	str	r3, [r7, #12]
    strncpy(trans->name, name, (length < MAX_NAME) ? length + 1 : MAX_NAME - 1);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d802      	bhi.n	8004cac <trans_set_name+0x24>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e000      	b.n	8004cae <trans_set_name+0x26>
 8004cac:	230f      	movs	r3, #15
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	f004 fc00 	bl	80094b6 <strncpy>
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <trans_set_action>:

int trans_set_action(pn_trans *trans, int (*action)(void *data), void *data)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
    if (!trans)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <trans_set_action+0x18>
        return -1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	e006      	b.n	8004ce4 <trans_set_action+0x26>

    trans->action = action;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	611a      	str	r2, [r3, #16]
    trans->data = data;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	615a      	str	r2, [r3, #20]

    return 0;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b004      	add	sp, #16
 8004cea:	bd80      	pop	{r7, pc}

08004cec <trans_init>:

int trans_init(pn_trans *trans, const char *name)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
    if (!trans)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <trans_init+0x16>
        return -1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	425b      	negs	r3, r3
 8004d00:	e029      	b.n	8004d56 <trans_init+0x6a>

    trans_set_name(trans, name);
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7ff ffbd 	bl	8004c88 <trans_set_name>
    trans_set_action(trans, empty_action_true, NULL);
 8004d0e:	4914      	ldr	r1, [pc, #80]	; (8004d60 <trans_init+0x74>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ffd2 	bl	8004cbe <trans_set_action>

    trans->in_count = 0;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    trans->out_count = 0;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	65da      	str	r2, [r3, #92]	; 0x5c
    for (uint32_t i = 0; i < MAX_PLACES_IN_TRANS; i++) {
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e010      	b.n	8004d4e <trans_init+0x62>
        trans->in_places[i] = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	3206      	adds	r2, #6
 8004d32:	0092      	lsls	r2, r2, #2
 8004d34:	2100      	movs	r1, #0
 8004d36:	50d1      	str	r1, [r2, r3]
        trans->out_places[i] = NULL;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	330e      	adds	r3, #14
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	3304      	adds	r3, #4
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < MAX_PLACES_IN_TRANS; i++) {
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	d9eb      	bls.n	8004d2c <trans_init+0x40>
    }

    return 0;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b004      	add	sp, #16
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	08004993 	.word	0x08004993

08004d64 <trans_add_input>:

int trans_add_input(pn_trans *trans, pn_place *place)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
    if (!trans || !place)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <trans_add_input+0x16>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <trans_add_input+0x1c>
        return -1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	e013      	b.n	8004da8 <trans_add_input+0x44>

    if (trans->in_count >= MAX_PLACES_IN_TRANS)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	2b07      	cmp	r3, #7
 8004d86:	d902      	bls.n	8004d8e <trans_add_input+0x2a>
        return -2;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	425b      	negs	r3, r3
 8004d8c:	e00c      	b.n	8004da8 <trans_add_input+0x44>

    trans->in_places[trans->in_count] = place;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3206      	adds	r2, #6
 8004d96:	0092      	lsls	r2, r2, #2
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	50d1      	str	r1, [r2, r3]
    trans->in_count++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38

    return 0;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <trans_add_output>:

int trans_add_output(pn_trans *trans, pn_place *place)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
    if (!trans || !place)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <trans_add_output+0x16>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <trans_add_output+0x1c>
        return -1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	425b      	negs	r3, r3
 8004dca:	e015      	b.n	8004df8 <trans_add_output+0x48>

    if (trans->out_count >= MAX_PLACES_IN_TRANS)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd0:	2b07      	cmp	r3, #7
 8004dd2:	d902      	bls.n	8004dda <trans_add_output+0x2a>
        return -2;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	425b      	negs	r3, r3
 8004dd8:	e00e      	b.n	8004df8 <trans_add_output+0x48>

    trans->out_places[trans->out_count] = place;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	330e      	adds	r3, #14
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	18d3      	adds	r3, r2, r3
 8004de6:	3304      	adds	r3, #4
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	601a      	str	r2, [r3, #0]
    trans->out_count++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	65da      	str	r2, [r3, #92]	; 0x5c

    return 0;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <trans_fire>:

    return true;
}

int trans_fire(pn_trans *trans)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
    if (!trans)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <trans_fire+0x14>
        return -1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	425b      	negs	r3, r3
 8004e12:	e054      	b.n	8004ebe <trans_fire+0xbe>
    
    /* check if inputs are full */
    for (uint32_t i = 0; i < trans->in_count; i++) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e014      	b.n	8004e44 <trans_fire+0x44>
        if (!place_has_tokens(trans->in_places[i]))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	3206      	adds	r2, #6
 8004e20:	0092      	lsls	r2, r2, #2
 8004e22:	58d3      	ldr	r3, [r2, r3]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7ff fe3b 	bl	8004aa0 <place_has_tokens>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4053      	eors	r3, r2
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <trans_fire+0x3e>
            return -2;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	425b      	negs	r3, r3
 8004e3c:	e03f      	b.n	8004ebe <trans_fire+0xbe>
    for (uint32_t i = 0; i < trans->in_count; i++) {
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	3301      	adds	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3e5      	bcc.n	8004e1a <trans_fire+0x1a>
    }
    /* do an action */
    if (!trans->action || trans->action(trans->data))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <trans_fire+0x66>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	4790      	blx	r2
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d002      	beq.n	8004e6c <trans_fire+0x6c>
        return -3;
 8004e66:	2303      	movs	r3, #3
 8004e68:	425b      	negs	r3, r3
 8004e6a:	e028      	b.n	8004ebe <trans_fire+0xbe>

    /* if full then decrement inputs and increment outputs*/
    for (uint32_t i = 0; i < trans->in_count; i++)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e00a      	b.n	8004e88 <trans_fire+0x88>
        place_dec_token(trans->in_places[i]);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	3206      	adds	r2, #6
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	58d3      	ldr	r3, [r2, r3]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7ff fe75 	bl	8004b6c <place_dec_token>
    for (uint32_t i = 0; i < trans->in_count; i++)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3301      	adds	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3ef      	bcc.n	8004e72 <trans_fire+0x72>

    for (uint32_t i = 0; i < trans->out_count; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e00c      	b.n	8004eb2 <trans_fire+0xb2>
        place_inc_token(trans->out_places[i]);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	330e      	adds	r3, #14
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff fe52 	bl	8004b50 <place_inc_token>
    for (uint32_t i = 0; i < trans->out_count; i++)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d3ed      	bcc.n	8004e98 <trans_fire+0x98>

    return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b006      	add	sp, #24
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <trans_deserialize_with_net>:

int trans_deserialize_with_net(pn_trans *trans, cJSON *jtrans, pnet_t *net)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
    if (!trans || !jtrans || !net)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <trans_deserialize_with_net+0x1e>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <trans_deserialize_with_net+0x1e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <trans_deserialize_with_net+0x24>
        return -1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	425b      	negs	r3, r3
 8004eea:	e07d      	b.n	8004fe8 <trans_deserialize_with_net+0x120>

    cJSON *jplace = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24

    /* field is borrowed object, do not free */
    cJSON *field = cJSON_GetObjectItemCaseSensitive(jtrans, "name"); 
 8004ef0:	4a3f      	ldr	r2, [pc, #252]	; (8004ff0 <trans_deserialize_with_net+0x128>)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7fe fd77 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004efc:	0003      	movs	r3, r0
 8004efe:	623b      	str	r3, [r7, #32]
    /* get fields */
    if (cJSON_IsString(field) && (field->valuestring != NULL)) { 
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7fe fd96 	bl	8003a34 <cJSON_IsString>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d00a      	beq.n	8004f22 <trans_deserialize_with_net+0x5a>
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d006      	beq.n	8004f22 <trans_deserialize_with_net+0x5a>
        trans_set_name(trans, field->valuestring);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	0011      	movs	r1, r2
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff feb3 	bl	8004c88 <trans_set_name>
    }

    /* get all inputs */
    field = cJSON_GetObjectItemCaseSensitive(jtrans, "inputs");
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <trans_deserialize_with_net+0x12c>)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	0011      	movs	r1, r2
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7fe fd5e 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	623b      	str	r3, [r7, #32]
    cJSON_ArrayForEach(jplace, field) {
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <trans_deserialize_with_net+0x76>
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	e000      	b.n	8004f40 <trans_deserialize_with_net+0x78>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e01c      	b.n	8004f7e <trans_deserialize_with_net+0xb6>
        cJSON *name = cJSON_GetObjectItemCaseSensitive(jplace, "name");
 8004f44:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <trans_deserialize_with_net+0x128>)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	0011      	movs	r1, r2
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7fe fd4d 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004f50:	0003      	movs	r3, r0
 8004f52:	617b      	str	r3, [r7, #20]
        pn_place *place = pnet_find_place(net, name->valuestring);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0011      	movs	r1, r2
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 f959 	bl	8005214 <pnet_find_place>
 8004f62:	0003      	movs	r3, r0
 8004f64:	613b      	str	r3, [r7, #16]

        if (place) {
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <trans_deserialize_with_net+0xb0>
            trans_add_input(trans, place);
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	0011      	movs	r1, r2
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7ff fef6 	bl	8004d64 <trans_add_input>
    cJSON_ArrayForEach(jplace, field) {
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1df      	bne.n	8004f44 <trans_deserialize_with_net+0x7c>
        }
    }
    /* get all outputs */
    field = cJSON_GetObjectItemCaseSensitive(jtrans, "outputs");
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <trans_deserialize_with_net+0x130>)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	0011      	movs	r1, r2
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7fe fd2d 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004f90:	0003      	movs	r3, r0
 8004f92:	623b      	str	r3, [r7, #32]
    cJSON_ArrayForEach(jplace, field) {
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <trans_deserialize_with_net+0xd8>
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	e000      	b.n	8004fa2 <trans_deserialize_with_net+0xda>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e01c      	b.n	8004fe0 <trans_deserialize_with_net+0x118>
        cJSON *name = cJSON_GetObjectItemCaseSensitive(jplace, "name");
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <trans_deserialize_with_net+0x128>)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	0011      	movs	r1, r2
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7fe fd1c 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	61fb      	str	r3, [r7, #28]
        pn_place *place = pnet_find_place(net, name->valuestring);
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0011      	movs	r1, r2
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 f928 	bl	8005214 <pnet_find_place>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	61bb      	str	r3, [r7, #24]

        if (place) {
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <trans_deserialize_with_net+0x112>
            trans_add_output(trans, place);
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	0011      	movs	r1, r2
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff feeb 	bl	8004db0 <trans_add_output>
    cJSON_ArrayForEach(jplace, field) {
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1df      	bne.n	8004fa6 <trans_deserialize_with_net+0xde>
        }
    }

    return 0;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b00a      	add	sp, #40	; 0x28
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	0800cf78 	.word	0x0800cf78
 8004ff4:	0800cf9c 	.word	0x0800cf9c
 8004ff8:	0800cfa4 	.word	0x0800cfa4

08004ffc <pnet_create>:
    return 0;
}

/* NET INTERFACE */
pnet_t *pnet_create(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
    pnet_t *net = malloc(sizeof(*net));
 8005002:	2098      	movs	r0, #152	; 0x98
 8005004:	f004 f86e 	bl	80090e4 <malloc>
 8005008:	0003      	movs	r3, r0
 800500a:	607b      	str	r3, [r7, #4]
    pnet_init(net, "");
 800500c:	4a08      	ldr	r2, [pc, #32]	; (8005030 <pnet_create+0x34>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0011      	movs	r1, r2
 8005012:	0018      	movs	r0, r3
 8005014:	f000 f86f 	bl	80050f6 <pnet_init>
    memalloc += sizeof(*net);
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <pnet_create+0x38>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3398      	adds	r3, #152	; 0x98
 800501e:	001a      	movs	r2, r3
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <pnet_create+0x38>)
 8005022:	601a      	str	r2, [r3, #0]
    return net;
 8005024:	687b      	ldr	r3, [r7, #4]
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b002      	add	sp, #8
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	0800cfc4 	.word	0x0800cfc4
 8005034:	200003b4 	.word	0x200003b4

08005038 <pnet_free>:

int pnet_free(pnet_t *net)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    if (!net)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <pnet_free+0x14>
        return -1;
 8005046:	2301      	movs	r3, #1
 8005048:	425b      	negs	r3, r3
 800504a:	e033      	b.n	80050b4 <pnet_free+0x7c>
    
    for (uint32_t i = 0; i < net->place_count; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e00a      	b.n	8005068 <pnet_free+0x30>
        place_free(net->places[i]);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	3204      	adds	r2, #4
 8005058:	0092      	lsls	r2, r2, #2
 800505a:	58d3      	ldr	r3, [r2, r3]
 800505c:	0018      	movs	r0, r3
 800505e:	f7ff fcbf 	bl	80049e0 <place_free>
    for (uint32_t i = 0; i < net->place_count; i++)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3ef      	bcc.n	8005052 <pnet_free+0x1a>
    
    for (uint32_t i = 0; i < net->trans_count; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	e00c      	b.n	8005092 <pnet_free+0x5a>
        trans_free(net->trans[i]);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3314      	adds	r3, #20
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	18d3      	adds	r3, r2, r3
 8005082:	3304      	adds	r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff fde2 	bl	8004c50 <trans_free>
    for (uint32_t i = 0; i < net->trans_count; i++)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2294      	movs	r2, #148	; 0x94
 8005096:	589b      	ldr	r3, [r3, r2]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d3ec      	bcc.n	8005078 <pnet_free+0x40>

    memalloc -= sizeof(*net);
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <pnet_free+0x84>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3b98      	subs	r3, #152	; 0x98
 80050a4:	001a      	movs	r2, r3
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <pnet_free+0x84>)
 80050a8:	601a      	str	r2, [r3, #0]
    free(net);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f004 f823 	bl	80090f8 <free>

    return 0;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200003b4 	.word	0x200003b4

080050c0 <pnet_set_name>:

void pnet_set_name(pnet_t *net, const char *name)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
    uint32_t length = strlen(name);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fb f825 	bl	800011c <strlen>
 80050d2:	0003      	movs	r3, r0
 80050d4:	60fb      	str	r3, [r7, #12]
    strncpy(net->name, name, (length < MAX_NAME) ? length + 1 : MAX_NAME - 1);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d802      	bhi.n	80050e4 <pnet_set_name+0x24>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	e000      	b.n	80050e6 <pnet_set_name+0x26>
 80050e4:	230f      	movs	r3, #15
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	001a      	movs	r2, r3
 80050ea:	f004 f9e4 	bl	80094b6 <strncpy>
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b004      	add	sp, #16
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <pnet_init>:

int pnet_init(pnet_t *net, const char *name)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
    if (!net)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <pnet_init+0x16>
        return -1;
 8005106:	2301      	movs	r3, #1
 8005108:	425b      	negs	r3, r3
 800510a:	e02d      	b.n	8005168 <pnet_init+0x72>

    // strncpy(net->name, name, strlen(name) + 1);
    pnet_set_name(net, name);
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0011      	movs	r1, r2
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff ffd4 	bl	80050c0 <pnet_set_name>

    net->place_count = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	651a      	str	r2, [r3, #80]	; 0x50
    net->trans_count = 0;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2294      	movs	r2, #148	; 0x94
 8005122:	2100      	movs	r1, #0
 8005124:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 0; i < MAX_PLACES; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e008      	b.n	800513e <pnet_init+0x48>
        net->places[i] = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	3204      	adds	r2, #4
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	2100      	movs	r1, #0
 8005136:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < MAX_PLACES; i++)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d9f3      	bls.n	800512c <pnet_init+0x36>

    for (uint32_t i = 0; i < MAX_TRANSITIONS; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	e00a      	b.n	8005160 <pnet_init+0x6a>
        net->trans[i] = NULL;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3314      	adds	r3, #20
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	18d3      	adds	r3, r2, r3
 8005154:	3304      	adds	r3, #4
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < MAX_TRANSITIONS; i++)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3301      	adds	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d9f1      	bls.n	800514a <pnet_init+0x54>

    return 0;
 8005166:	2300      	movs	r3, #0
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b004      	add	sp, #16
 800516e:	bd80      	pop	{r7, pc}

08005170 <pnet_add_place>:

int pnet_add_place(pnet_t *net, pn_place *place)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
    if (!net || !place)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <pnet_add_place+0x16>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <pnet_add_place+0x1c>
        return -1;
 8005186:	2301      	movs	r3, #1
 8005188:	425b      	negs	r3, r3
 800518a:	e013      	b.n	80051b4 <pnet_add_place+0x44>

    if (net->place_count >= MAX_PLACES)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	2b0f      	cmp	r3, #15
 8005192:	d902      	bls.n	800519a <pnet_add_place+0x2a>
        return -2;
 8005194:	2302      	movs	r3, #2
 8005196:	425b      	negs	r3, r3
 8005198:	e00c      	b.n	80051b4 <pnet_add_place+0x44>

    net->places[net->place_count] = place;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3204      	adds	r2, #4
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	50d1      	str	r1, [r2, r3]
    net->place_count++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50

    return 0;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <pnet_add_trans>:

int pnet_add_trans(pnet_t *net, pn_trans *trans)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
    if (!net || !trans)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <pnet_add_trans+0x16>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <pnet_add_trans+0x1c>
        return -1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	425b      	negs	r3, r3
 80051d6:	e019      	b.n	800520c <pnet_add_trans+0x50>

    if (net->trans_count >= MAX_TRANSITIONS)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2294      	movs	r2, #148	; 0x94
 80051dc:	589b      	ldr	r3, [r3, r2]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d902      	bls.n	80051e8 <pnet_add_trans+0x2c>
        return -2;
 80051e2:	2302      	movs	r3, #2
 80051e4:	425b      	negs	r3, r3
 80051e6:	e011      	b.n	800520c <pnet_add_trans+0x50>

    net->trans[net->trans_count] = trans;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2294      	movs	r2, #148	; 0x94
 80051ec:	589b      	ldr	r3, [r3, r2]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	3314      	adds	r3, #20
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	3304      	adds	r3, #4
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	601a      	str	r2, [r3, #0]
    net->trans_count++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2294      	movs	r2, #148	; 0x94
 8005200:	589b      	ldr	r3, [r3, r2]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2194      	movs	r1, #148	; 0x94
 8005208:	505a      	str	r2, [r3, r1]

    return 0;
 800520a:	2300      	movs	r3, #0
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	b002      	add	sp, #8
 8005212:	bd80      	pop	{r7, pc}

08005214 <pnet_find_place>:

    return 0;
}

pn_place *pnet_find_place(pnet_t *net, const char *name)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
    pn_place *ret = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
    if (!net)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <pnet_find_place+0x18>
        return ret;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	e01f      	b.n	800526c <pnet_find_place+0x58>

    for (uint32_t i = 0; i < net->place_count; i++) {
 800522c:	2300      	movs	r3, #0
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	e016      	b.n	8005260 <pnet_find_place+0x4c>
        if (!strncmp(net->places[i]->name, name, MAX_NAME)) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	3204      	adds	r2, #4
 8005238:	0092      	lsls	r2, r2, #2
 800523a:	58d3      	ldr	r3, [r2, r3]
 800523c:	0018      	movs	r0, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	0019      	movs	r1, r3
 8005244:	f004 f926 	bl	8009494 <strncmp>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d106      	bne.n	800525a <pnet_find_place+0x46>
            ret = net->places[i];
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	3204      	adds	r2, #4
 8005252:	0092      	lsls	r2, r2, #2
 8005254:	58d3      	ldr	r3, [r2, r3]
 8005256:	60fb      	str	r3, [r7, #12]
            break;
 8005258:	e007      	b.n	800526a <pnet_find_place+0x56>
    for (uint32_t i = 0; i < net->place_count; i++) {
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3301      	adds	r3, #1
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3e3      	bcc.n	8005232 <pnet_find_place+0x1e>
        }
    }

    return ret;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b004      	add	sp, #16
 8005272:	bd80      	pop	{r7, pc}

08005274 <pnet_fire_sequence>:

    return ret;
}

int pnet_fire_sequence(pnet_t *net)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
    if (!net)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <pnet_fire_sequence+0x14>
        return -1;
 8005282:	2301      	movs	r3, #1
 8005284:	425b      	negs	r3, r3
 8005286:	e016      	b.n	80052b6 <pnet_fire_sequence+0x42>

    for (uint32_t i = 0; i < net->trans_count; i++)
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e00c      	b.n	80052a8 <pnet_fire_sequence+0x34>
        trans_fire(net->trans[i]);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3314      	adds	r3, #20
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	18d3      	adds	r3, r2, r3
 8005298:	3304      	adds	r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0018      	movs	r0, r3
 800529e:	f7ff fdaf 	bl	8004e00 <trans_fire>
    for (uint32_t i = 0; i < net->trans_count; i++)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2294      	movs	r2, #148	; 0x94
 80052ac:	589b      	ldr	r3, [r3, r2]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3ec      	bcc.n	800528e <pnet_fire_sequence+0x1a>

    return 0;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b004      	add	sp, #16
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <pnet_deserialize>:

    return 0;
}

int pnet_deserialize(pnet_t *net, char *jstr)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
    int ret = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
    if (!net) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <pnet_deserialize+0x1e>
        ret = -1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	425b      	negs	r3, r3
 80052d8:	61fb      	str	r3, [r7, #28]
        return ret;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	e075      	b.n	80053ca <pnet_deserialize+0x10a>
    }

    /* try to parse json data */
    cJSON *jnet = cJSON_Parse(jstr);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7fe f869 	bl	80033b8 <cJSON_Parse>
 80052e6:	0003      	movs	r3, r0
 80052e8:	617b      	str	r3, [r7, #20]
    if (!jnet) { 
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <pnet_deserialize+0x38>
        ret = -2;
 80052f0:	2302      	movs	r3, #2
 80052f2:	425b      	negs	r3, r3
 80052f4:	61fb      	str	r3, [r7, #28]
        goto end_full;
 80052f6:	e063      	b.n	80053c0 <pnet_deserialize+0x100>
    }

    /* deserialize all places */
    cJSON *jfields = cJSON_GetObjectItemCaseSensitive(jnet, "places"); 
 80052f8:	4a36      	ldr	r2, [pc, #216]	; (80053d4 <pnet_deserialize+0x114>)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f7fe fb73 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 8005304:	0003      	movs	r3, r0
 8005306:	613b      	str	r3, [r7, #16]
    if (!cJSON_IsArray(jfields)) {
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	0018      	movs	r0, r3
 800530c:	f7fe fba7 	bl	8003a5e <cJSON_IsArray>
 8005310:	1e03      	subs	r3, r0, #0
 8005312:	d103      	bne.n	800531c <pnet_deserialize+0x5c>
    	ret = -3;
 8005314:	2303      	movs	r3, #3
 8005316:	425b      	negs	r3, r3
 8005318:	61fb      	str	r3, [r7, #28]
        goto end_full;
 800531a:	e051      	b.n	80053c0 <pnet_deserialize+0x100>
    }

        /* loop through places */
    cJSON *field = NULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
    cJSON_ArrayForEach(field, jfields) {
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <pnet_deserialize+0x6c>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	e000      	b.n	800532e <pnet_deserialize+0x6e>
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e012      	b.n	8005358 <pnet_deserialize+0x98>
        pn_place *place = place_create();
 8005332:	f7ff fb37 	bl	80049a4 <place_create>
 8005336:	0003      	movs	r3, r0
 8005338:	60bb      	str	r3, [r7, #8]
        place_deserialize(place, field);
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	0011      	movs	r1, r2
 8005340:	0018      	movs	r0, r3
 8005342:	f7ff fc21 	bl	8004b88 <place_deserialize>
        pnet_add_place(net, place);
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0011      	movs	r1, r2
 800534c:	0018      	movs	r0, r3
 800534e:	f7ff ff0f 	bl	8005170 <pnet_add_place>
    cJSON_ArrayForEach(field, jfields) {
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e9      	bne.n	8005332 <pnet_deserialize+0x72>
    }

    /* deserialize all transitions */
    jfields = cJSON_GetObjectItemCaseSensitive(jnet, "transitions"); 
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <pnet_deserialize+0x118>)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f7fe fb40 	bl	80039ea <cJSON_GetObjectItemCaseSensitive>
 800536a:	0003      	movs	r3, r0
 800536c:	613b      	str	r3, [r7, #16]
    if (!cJSON_IsArray(jfields))
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	0018      	movs	r0, r3
 8005372:	f7fe fb74 	bl	8003a5e <cJSON_IsArray>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d021      	beq.n	80053be <pnet_deserialize+0xfe>
        goto end_full;
    
        /* loop through transitions */
    field = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
    cJSON_ArrayForEach(field, jfields) {
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <pnet_deserialize+0xca>
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	e000      	b.n	800538c <pnet_deserialize+0xcc>
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e012      	b.n	80053b6 <pnet_deserialize+0xf6>
        pn_trans *trans = trans_create();
 8005390:	f7ff fc40 	bl	8004c14 <trans_create>
 8005394:	0003      	movs	r3, r0
 8005396:	60fb      	str	r3, [r7, #12]
        trans_deserialize_with_net(trans, field, net);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	69b9      	ldr	r1, [r7, #24]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f7ff fd92 	bl	8004ec8 <trans_deserialize_with_net>
        pnet_add_trans(net, trans);
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0011      	movs	r1, r2
 80053aa:	0018      	movs	r0, r3
 80053ac:	f7ff ff06 	bl	80051bc <pnet_add_trans>
    cJSON_ArrayForEach(field, jfields) {
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e9      	bne.n	8005390 <pnet_deserialize+0xd0>
    }

end_full:
 80053bc:	e000      	b.n	80053c0 <pnet_deserialize+0x100>
        goto end_full;
 80053be:	46c0      	nop			; (mov r8, r8)
    cJSON_Delete(jnet);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7fd fb26 	bl	8002a14 <cJSON_Delete>

    return ret;
 80053c8:	69fb      	ldr	r3, [r7, #28]
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b008      	add	sp, #32
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	0800cfc8 	.word	0x0800cfc8
 80053d8:	0800cfd0 	.word	0x0800cfd0

080053dc <pnet_dump_state_as_str>:

int pnet_dump_state_as_str(pnet_t *net, char *str)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
    if (!net || !str)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <pnet_dump_state_as_str+0x16>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <pnet_dump_state_as_str+0x1c>
        return -1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	425b      	negs	r3, r3
 80053f6:	e023      	b.n	8005440 <pnet_dump_state_as_str+0x64>

    memset(str, 0, MAX_PLACES);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	2100      	movs	r1, #0
 80053fe:	0018      	movs	r0, r3
 8005400:	f003 fe8d 	bl	800911e <memset>
    for (uint32_t i = 0; i < net->place_count; i++) {
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e014      	b.n	8005434 <pnet_dump_state_as_str+0x58>
        str[i] = "0123456789"[net->places[i]->tokens % 10];
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	3204      	adds	r2, #4
 8005410:	0092      	lsls	r2, r2, #2
 8005412:	58d3      	ldr	r3, [r2, r3]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	210a      	movs	r1, #10
 8005418:	0018      	movs	r0, r3
 800541a:	f7fa ff21 	bl	8000260 <__aeabi_uidivmod>
 800541e:	000b      	movs	r3, r1
 8005420:	0019      	movs	r1, r3
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	4a07      	ldr	r2, [pc, #28]	; (8005448 <pnet_dump_state_as_str+0x6c>)
 800542a:	5c52      	ldrb	r2, [r2, r1]
 800542c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < net->place_count; i++) {
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	429a      	cmp	r2, r3
 800543c:	d3e5      	bcc.n	800540a <pnet_dump_state_as_str+0x2e>
    }
    return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b004      	add	sp, #16
 8005446:	bd80      	pop	{r7, pc}
 8005448:	0800cfdc 	.word	0x0800cfdc

0800544c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <HAL_MspInit+0x44>)
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <HAL_MspInit+0x44>)
 8005458:	2101      	movs	r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <HAL_MspInit+0x44>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2201      	movs	r2, #1
 8005464:	4013      	ands	r3, r2
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_MspInit+0x44>)
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <HAL_MspInit+0x44>)
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	0549      	lsls	r1, r1, #21
 8005474:	430a      	orrs	r2, r1
 8005476:	61da      	str	r2, [r3, #28]
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_MspInit+0x44>)
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	055b      	lsls	r3, r3, #21
 8005480:	4013      	ands	r3, r2
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b002      	add	sp, #8
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	40021000 	.word	0x40021000

08005494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b08b      	sub	sp, #44	; 0x2c
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	2414      	movs	r4, #20
 800549e:	193b      	adds	r3, r7, r4
 80054a0:	0018      	movs	r0, r3
 80054a2:	2314      	movs	r3, #20
 80054a4:	001a      	movs	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f003 fe39 	bl	800911e <memset>
  if(hi2c->Instance==I2C1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a20      	ldr	r2, [pc, #128]	; (8005534 <HAL_I2C_MspInit+0xa0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d139      	bne.n	800552a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	02c9      	lsls	r1, r1, #11
 80054c0:	430a      	orrs	r2, r1
 80054c2:	615a      	str	r2, [r3, #20]
 80054c4:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	02db      	lsls	r3, r3, #11
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054d2:	0021      	movs	r1, r4
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	22c0      	movs	r2, #192	; 0xc0
 80054d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	2212      	movs	r2, #18
 80054de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	2203      	movs	r2, #3
 80054ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	2201      	movs	r2, #1
 80054f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f2:	187b      	adds	r3, r7, r1
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <HAL_I2C_MspInit+0xa8>)
 80054f6:	0019      	movs	r1, r3
 80054f8:	0010      	movs	r0, r2
 80054fa:	f000 fd79 	bl	8005ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054fe:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	0389      	lsls	r1, r1, #14
 8005508:	430a      	orrs	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_I2C_MspInit+0xa4>)
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	039b      	lsls	r3, r3, #14
 8005514:	4013      	ands	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	2017      	movs	r0, #23
 8005520:	f000 fce2 	bl	8005ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005524:	2017      	movs	r0, #23
 8005526:	f000 fcf4 	bl	8005f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b00b      	add	sp, #44	; 0x2c
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40005400 	.word	0x40005400
 8005538:	40021000 	.word	0x40021000
 800553c:	48000400 	.word	0x48000400

08005540 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a06      	ldr	r2, [pc, #24]	; (8005568 <HAL_RTC_MspInit+0x28>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d106      	bne.n	8005560 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RTC_MspInit+0x2c>)
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RTC_MspInit+0x2c>)
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	0209      	lsls	r1, r1, #8
 800555c:	430a      	orrs	r2, r1
 800555e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40002800 	.word	0x40002800
 800556c:	40021000 	.word	0x40021000

08005570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_TIM_Base_MspInit+0x7c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d114      	bne.n	80055ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 8005588:	2110      	movs	r1, #16
 800558a:	430a      	orrs	r2, r1
 800558c:	61da      	str	r2, [r3, #28]
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	2210      	movs	r2, #16
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800559a:	2200      	movs	r2, #0
 800559c:	2101      	movs	r1, #1
 800559e:	2011      	movs	r0, #17
 80055a0:	f000 fca2 	bl	8005ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055a4:	2011      	movs	r0, #17
 80055a6:	f000 fcb4 	bl	8005f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80055aa:	e01a      	b.n	80055e2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <HAL_TIM_Base_MspInit+0x84>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d115      	bne.n	80055e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 80055bc:	2180      	movs	r1, #128	; 0x80
 80055be:	0049      	lsls	r1, r1, #1
 80055c0:	430a      	orrs	r2, r1
 80055c2:	61da      	str	r2, [r3, #28]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_TIM_Base_MspInit+0x80>)
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	2013      	movs	r0, #19
 80055d8:	f000 fc86 	bl	8005ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80055dc:	2013      	movs	r0, #19
 80055de:	f000 fc98 	bl	8005f12 <HAL_NVIC_EnableIRQ>
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b004      	add	sp, #16
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	40001000 	.word	0x40001000
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40002000 	.word	0x40002000

080055f8 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b08b      	sub	sp, #44	; 0x2c
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	2414      	movs	r4, #20
 8005602:	193b      	adds	r3, r7, r4
 8005604:	0018      	movs	r0, r3
 8005606:	2314      	movs	r3, #20
 8005608:	001a      	movs	r2, r3
 800560a:	2100      	movs	r1, #0
 800560c:	f003 fd87 	bl	800911e <memset>
  if(htsc->Instance==TSC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a44      	ldr	r2, [pc, #272]	; (8005728 <HAL_TSC_MspInit+0x130>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d000      	beq.n	800561c <HAL_TSC_MspInit+0x24>
 800561a:	e080      	b.n	800571e <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800561c:	4b43      	ldr	r3, [pc, #268]	; (800572c <HAL_TSC_MspInit+0x134>)
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	4b42      	ldr	r3, [pc, #264]	; (800572c <HAL_TSC_MspInit+0x134>)
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0449      	lsls	r1, r1, #17
 8005626:	430a      	orrs	r2, r1
 8005628:	615a      	str	r2, [r3, #20]
 800562a:	4b40      	ldr	r3, [pc, #256]	; (800572c <HAL_TSC_MspInit+0x134>)
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	045b      	lsls	r3, r3, #17
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005638:	4b3c      	ldr	r3, [pc, #240]	; (800572c <HAL_TSC_MspInit+0x134>)
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_TSC_MspInit+0x134>)
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	0289      	lsls	r1, r1, #10
 8005642:	430a      	orrs	r2, r1
 8005644:	615a      	str	r2, [r3, #20]
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_TSC_MspInit+0x134>)
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <HAL_TSC_MspInit+0x134>)
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_TSC_MspInit+0x134>)
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	02c9      	lsls	r1, r1, #11
 800565e:	430a      	orrs	r2, r1
 8005660:	615a      	str	r2, [r3, #20]
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <HAL_TSC_MspInit+0x134>)
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	02db      	lsls	r3, r3, #11
 800566a:	4013      	ands	r3, r2
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8005670:	193b      	adds	r3, r7, r4
 8005672:	2244      	movs	r2, #68	; 0x44
 8005674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	193b      	adds	r3, r7, r4
 8005678:	2202      	movs	r2, #2
 800567a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	193b      	adds	r3, r7, r4
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005682:	193b      	adds	r3, r7, r4
 8005684:	2200      	movs	r2, #0
 8005686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8005688:	193b      	adds	r3, r7, r4
 800568a:	2203      	movs	r2, #3
 800568c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800568e:	193a      	adds	r2, r7, r4
 8005690:	2390      	movs	r3, #144	; 0x90
 8005692:	05db      	lsls	r3, r3, #23
 8005694:	0011      	movs	r1, r2
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fcaa 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 800569c:	193b      	adds	r3, r7, r4
 800569e:	2288      	movs	r2, #136	; 0x88
 80056a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056a2:	193b      	adds	r3, r7, r4
 80056a4:	2212      	movs	r2, #18
 80056a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	193b      	adds	r3, r7, r4
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ae:	193b      	adds	r3, r7, r4
 80056b0:	2200      	movs	r2, #0
 80056b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80056b4:	193b      	adds	r3, r7, r4
 80056b6:	2203      	movs	r2, #3
 80056b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ba:	193a      	adds	r2, r7, r4
 80056bc:	2390      	movs	r3, #144	; 0x90
 80056be:	05db      	lsls	r3, r3, #23
 80056c0:	0011      	movs	r1, r2
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 fc94 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056c8:	193b      	adds	r3, r7, r4
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ce:	193b      	adds	r3, r7, r4
 80056d0:	2202      	movs	r2, #2
 80056d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	2200      	movs	r2, #0
 80056d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	2200      	movs	r2, #0
 80056de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	2203      	movs	r2, #3
 80056e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	4a11      	ldr	r2, [pc, #68]	; (8005730 <HAL_TSC_MspInit+0x138>)
 80056ea:	0019      	movs	r1, r3
 80056ec:	0010      	movs	r0, r2
 80056ee:	f000 fc7f 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056f2:	0021      	movs	r1, r4
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	2202      	movs	r2, #2
 80056f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056fa:	187b      	adds	r3, r7, r1
 80056fc:	2212      	movs	r2, #18
 80056fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	187b      	adds	r3, r7, r1
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005706:	187b      	adds	r3, r7, r1
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800570c:	187b      	adds	r3, r7, r1
 800570e:	2203      	movs	r2, #3
 8005710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005712:	187b      	adds	r3, r7, r1
 8005714:	4a06      	ldr	r2, [pc, #24]	; (8005730 <HAL_TSC_MspInit+0x138>)
 8005716:	0019      	movs	r1, r3
 8005718:	0010      	movs	r0, r2
 800571a:	f000 fc69 	bl	8005ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b00b      	add	sp, #44	; 0x2c
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	40024000 	.word	0x40024000
 800572c:	40021000 	.word	0x40021000
 8005730:	48000400 	.word	0x48000400

08005734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005738:	e7fe      	b.n	8005738 <NMI_Handler+0x4>

0800573a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800573e:	e7fe      	b.n	800573e <HardFault_Handler+0x4>

08005740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005758:	f000 fada 	bl	8005d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
//	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {};
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005766:	2001      	movs	r0, #1
 8005768:	f000 fdd8 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <TIM6_DAC_IRQHandler+0x14>)
 800577a:	0018      	movs	r0, r3
 800577c:	f003 f9be 	bl	8008afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	2000036c 	.word	0x2000036c

0800578c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <TIM14_IRQHandler+0x14>)
 8005792:	0018      	movs	r0, r3
 8005794:	f003 f9b2 	bl	8008afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	200003b8 	.word	0x200003b8

080057a4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <I2C1_IRQHandler+0x2c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	23e0      	movs	r3, #224	; 0xe0
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4013      	ands	r3, r2
 80057b4:	d004      	beq.n	80057c0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <I2C1_IRQHandler+0x2c>)
 80057b8:	0018      	movs	r0, r3
 80057ba:	f001 f89d 	bl	80068f8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80057be:	e003      	b.n	80057c8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <I2C1_IRQHandler+0x2c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f001 f87e 	bl	80068c4 <HAL_I2C_EV_IRQHandler>
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000300 	.word	0x20000300

080057d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
	return 1;
 80057d8:	2301      	movs	r3, #1
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_kill>:

int _kill(int pid, int sig)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057ea:	f003 fc51 	bl	8009090 <__errno>
 80057ee:	0003      	movs	r3, r0
 80057f0:	2216      	movs	r2, #22
 80057f2:	601a      	str	r2, [r3, #0]
	return -1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	425b      	negs	r3, r3
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_exit>:

void _exit (int status)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005808:	2301      	movs	r3, #1
 800580a:	425a      	negs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0011      	movs	r1, r2
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff ffe5 	bl	80057e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005816:	e7fe      	b.n	8005816 <_exit+0x16>

08005818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e00a      	b.n	8005840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800582a:	e000      	b.n	800582e <_read+0x16>
 800582c:	bf00      	nop
 800582e:	0001      	movs	r1, r0
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	60ba      	str	r2, [r7, #8]
 8005836:	b2ca      	uxtb	r2, r1
 8005838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3301      	adds	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	dbf0      	blt.n	800582a <_read+0x12>
	}

return len;
 8005848:	687b      	ldr	r3, [r7, #4]
}
 800584a:	0018      	movs	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	b006      	add	sp, #24
 8005850:	bd80      	pop	{r7, pc}

08005852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e009      	b.n	8005878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	60ba      	str	r2, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	0018      	movs	r0, r3
 800586e:	e000      	b.n	8005872 <_write+0x20>
 8005870:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3301      	adds	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	dbf1      	blt.n	8005864 <_write+0x12>
	}
	return len;
 8005880:	687b      	ldr	r3, [r7, #4]
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b006      	add	sp, #24
 8005888:	bd80      	pop	{r7, pc}

0800588a <_close>:

int _close(int file)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
	return -1;
 8005892:	2301      	movs	r3, #1
 8005894:	425b      	negs	r3, r3
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b002      	add	sp, #8
 800589c:	bd80      	pop	{r7, pc}

0800589e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2280      	movs	r2, #128	; 0x80
 80058ac:	0192      	lsls	r2, r2, #6
 80058ae:	605a      	str	r2, [r3, #4]
	return 0;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_isatty>:

int _isatty(int file)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
	return 1;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	0018      	movs	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
	return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <_sbrk+0x64>)
 80058ee:	4b17      	ldr	r3, [pc, #92]	; (800594c <_sbrk+0x68>)
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <_sbrk+0x6c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d102      	bne.n	8005906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <_sbrk+0x6c>)
 8005902:	4a14      	ldr	r2, [pc, #80]	; (8005954 <_sbrk+0x70>)
 8005904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <_sbrk+0x6c>)
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	18d3      	adds	r3, r2, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d207      	bcs.n	8005924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005914:	f003 fbbc 	bl	8009090 <__errno>
 8005918:	0003      	movs	r3, r0
 800591a:	220c      	movs	r2, #12
 800591c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800591e:	2301      	movs	r3, #1
 8005920:	425b      	negs	r3, r3
 8005922:	e00d      	b.n	8005940 <_sbrk+0x5c>
  }

  prev_heap_end = __sbrk_heap_end;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <_sbrk+0x6c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <_sbrk+0x6c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <_sbrk+0x6c>)
 8005934:	601a      	str	r2, [r3, #0]

  /* USER DEBUG BEGIN */
  heap_ptr = __sbrk_heap_end;
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <_sbrk+0x6c>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <_sbrk+0x74>)
 800593c:	601a      	str	r2, [r3, #0]
  /* USER DEBUG END */

  return (void *)prev_heap_end;
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b006      	add	sp, #24
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20004000 	.word	0x20004000
 800594c:	00000400 	.word	0x00000400
 8005950:	20000270 	.word	0x20000270
 8005954:	20000458 	.word	0x20000458
 8005958:	20000274 	.word	0x20000274

0800595c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <term_goto>:
	term->flags.update_req = false;
}

/* sets cursor xpos to @x, ypos to @y */
void term_goto(term_win *term, const uint8_t x, const uint8_t y)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	0008      	movs	r0, r1
 8005970:	0011      	movs	r1, r2
 8005972:	1cfb      	adds	r3, r7, #3
 8005974:	1c02      	adds	r2, r0, #0
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	1cbb      	adds	r3, r7, #2
 800597a:	1c0a      	adds	r2, r1, #0
 800597c:	701a      	strb	r2, [r3, #0]
	term->cx = x;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	1cfa      	adds	r2, r7, #3
 8005982:	2123      	movs	r1, #35	; 0x23
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	545a      	strb	r2, [r3, r1]
	term->cy = y;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1cba      	adds	r2, r7, #2
 800598c:	2124      	movs	r1, #36	; 0x24
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	545a      	strb	r2, [r3, r1]
}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	46bd      	mov	sp, r7
 8005996:	b002      	add	sp, #8
 8005998:	bd80      	pop	{r7, pc}

0800599a <term_cls>:

/* clears terminal primary buffer */
void term_cls(term_win *term)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
	term_goto(term, 0, 0);	//return home
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2100      	movs	r1, #0
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7ff ffdc 	bl	8005966 <term_goto>
	memset(term->win, ' ', term->size);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	001a      	movs	r2, r3
 80059b8:	2120      	movs	r1, #32
 80059ba:	f003 fbb0 	bl	800911e <memset>

	term_refresh(term);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2225      	movs	r2, #37	; 0x25
 80059c2:	5c99      	ldrb	r1, [r3, r2]
 80059c4:	2001      	movs	r0, #1
 80059c6:	4301      	orrs	r1, r0
 80059c8:	5499      	strb	r1, [r3, r2]
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b002      	add	sp, #8
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <term_draw>:

/* sends  */
void term_draw(term_win *term)
{
 80059d2:	b5b0      	push	{r4, r5, r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	if (term->flags.update_req) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2225      	movs	r2, #37	; 0x25
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	2201      	movs	r2, #1
 80059e2:	4013      	ands	r3, r2
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d042      	beq.n	8005a70 <term_draw+0x9e>
		term_skip(term);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2225      	movs	r2, #37	; 0x25
 80059ee:	5c99      	ldrb	r1, [r3, r2]
 80059f0:	2001      	movs	r0, #1
 80059f2:	4301      	orrs	r1, r0
 80059f4:	5499      	strb	r1, [r3, r2]

		for (uint8_t i = 0; i < term->rows; i++) {
 80059f6:	230f      	movs	r3, #15
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e02f      	b.n	8005a60 <term_draw+0x8e>
			for (uint8_t j = 0; j < term->cols; j++) {
 8005a00:	230e      	movs	r3, #14
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e01c      	b.n	8005a44 <term_draw+0x72>
				lcd_goto(i, j);
 8005a0a:	240e      	movs	r4, #14
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	250f      	movs	r5, #15
 8005a12:	197b      	adds	r3, r7, r5
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7fe f8c8 	bl	8003bae <lcd_goto>
				lcd_putch(term->win[i * term->cols + j]);
 8005a1e:	197b      	adds	r3, r7, r5
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	2122      	movs	r1, #34	; 0x22
 8005a26:	5c52      	ldrb	r2, [r2, r1]
 8005a28:	435a      	muls	r2, r3
 8005a2a:	193b      	adds	r3, r7, r4
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	18d3      	adds	r3, r2, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fe f8a7 	bl	8003b88 <lcd_putch>
			for (uint8_t j = 0; j < term->cols; j++) {
 8005a3a:	193b      	adds	r3, r7, r4
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	3201      	adds	r2, #1
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2222      	movs	r2, #34	; 0x22
 8005a48:	5c9b      	ldrb	r3, [r3, r2]
 8005a4a:	220e      	movs	r2, #14
 8005a4c:	18ba      	adds	r2, r7, r2
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3da      	bcc.n	8005a0a <term_draw+0x38>
		for (uint8_t i = 0; i < term->rows; i++) {
 8005a54:	210f      	movs	r1, #15
 8005a56:	187b      	adds	r3, r7, r1
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	187b      	adds	r3, r7, r1
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2221      	movs	r2, #33	; 0x21
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	220f      	movs	r2, #15
 8005a68:	18ba      	adds	r2, r7, r2
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3c7      	bcc.n	8005a00 <term_draw+0x2e>
				//HAL_Delay(1);
			}
		}
	}
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b004      	add	sp, #16
 8005a76:	bdb0      	pop	{r4, r5, r7, pc}

08005a78 <term_putch>:
	}
}

/* prints a @ch at current cursor position and advances cursor once */
void term_putch(term_win *term, const char ch)
{
 8005a78:	b5b0      	push	{r4, r5, r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	000a      	movs	r2, r1
 8005a82:	1cfb      	adds	r3, r7, #3
 8005a84:	701a      	strb	r2, [r3, #0]
	uint8_t x = term->cx;
 8005a86:	240f      	movs	r4, #15
 8005a88:	193b      	adds	r3, r7, r4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	2123      	movs	r1, #35	; 0x23
 8005a8e:	5c52      	ldrb	r2, [r2, r1]
 8005a90:	701a      	strb	r2, [r3, #0]
	uint8_t y = term->cy;
 8005a92:	250e      	movs	r5, #14
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	2124      	movs	r1, #36	; 0x24
 8005a9a:	5c52      	ldrb	r2, [r2, r1]
 8005a9c:	701a      	strb	r2, [r3, #0]
	term->flags.h_overflow = false;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2225      	movs	r2, #37	; 0x25
 8005aa2:	5c99      	ldrb	r1, [r3, r2]
 8005aa4:	2002      	movs	r0, #2
 8005aa6:	4381      	bics	r1, r0
 8005aa8:	5499      	strb	r1, [r3, r2]
	term->flags.v_overflow = false;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2225      	movs	r2, #37	; 0x25
 8005aae:	5c99      	ldrb	r1, [r3, r2]
 8005ab0:	2004      	movs	r0, #4
 8005ab2:	4381      	bics	r1, r0
 8005ab4:	5499      	strb	r1, [r3, r2]

	if (ch != '\n')
 8005ab6:	1cfb      	adds	r3, r7, #3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	d00c      	beq.n	8005ad8 <term_putch+0x60>
		term->win[y * term->cols + x] = ch;
 8005abe:	197b      	adds	r3, r7, r5
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	2122      	movs	r1, #34	; 0x22
 8005ac6:	5c52      	ldrb	r2, [r2, r1]
 8005ac8:	435a      	muls	r2, r3
 8005aca:	193b      	adds	r3, r7, r4
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	18d3      	adds	r3, r2, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	1cf9      	adds	r1, r7, #3
 8005ad4:	7809      	ldrb	r1, [r1, #0]
 8005ad6:	54d1      	strb	r1, [r2, r3]

	term->cx++;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2223      	movs	r2, #35	; 0x23
 8005adc:	5c9b      	ldrb	r3, [r3, r2]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	b2d9      	uxtb	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2223      	movs	r2, #35	; 0x23
 8005ae6:	5499      	strb	r1, [r3, r2]
	term_refresh(term);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2225      	movs	r2, #37	; 0x25
 8005aec:	5c99      	ldrb	r1, [r3, r2]
 8005aee:	2001      	movs	r0, #1
 8005af0:	4301      	orrs	r1, r0
 8005af2:	5499      	strb	r1, [r3, r2]

	/* line overflow */
	if (term->cx > term->cols - 1 || ch == '\n') {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2222      	movs	r2, #34	; 0x22
 8005af8:	5c9a      	ldrb	r2, [r3, r2]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2123      	movs	r1, #35	; 0x23
 8005afe:	5c5b      	ldrb	r3, [r3, r1]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <term_putch+0x94>
 8005b04:	1cfb      	adds	r3, r7, #3
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b0a      	cmp	r3, #10
 8005b0a:	d111      	bne.n	8005b30 <term_putch+0xb8>
		term->cx = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2223      	movs	r2, #35	; 0x23
 8005b10:	2100      	movs	r1, #0
 8005b12:	5499      	strb	r1, [r3, r2]
		term->cy++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2224      	movs	r2, #36	; 0x24
 8005b18:	5c9b      	ldrb	r3, [r3, r2]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b2d9      	uxtb	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	5499      	strb	r1, [r3, r2]
		term->flags.h_overflow = true;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2225      	movs	r2, #37	; 0x25
 8005b28:	5c99      	ldrb	r1, [r3, r2]
 8005b2a:	2002      	movs	r0, #2
 8005b2c:	4301      	orrs	r1, r0
 8005b2e:	5499      	strb	r1, [r3, r2]
	}
	/* vertical overflow */
	if (term->cy > term->rows) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	5c9a      	ldrb	r2, [r3, r2]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2121      	movs	r1, #33	; 0x21
 8005b3a:	5c5b      	ldrb	r3, [r3, r1]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d909      	bls.n	8005b54 <term_putch+0xdc>
		term->cy = 0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	; 0x24
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]
		term->flags.v_overflow = true;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2225      	movs	r2, #37	; 0x25
 8005b4c:	5c99      	ldrb	r1, [r3, r2]
 8005b4e:	2004      	movs	r0, #4
 8005b50:	4301      	orrs	r1, r0
 8005b52:	5499      	strb	r1, [r3, r2]
	}
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bdb0      	pop	{r4, r5, r7, pc}

08005b5c <term_putsyx>:
	if (term->cx > 0)
		term->cx--;
}

void term_putsyx(term_win *term, const char *str, const uint8_t y, const uint8_t x)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	0019      	movs	r1, r3
 8005b68:	1dfb      	adds	r3, r7, #7
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	1dbb      	adds	r3, r7, #6
 8005b6e:	1c0a      	adds	r2, r1, #0
 8005b70:	701a      	strb	r2, [r3, #0]
	term_goto(term, x, y);
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	1dbb      	adds	r3, r7, #6
 8005b78:	7819      	ldrb	r1, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7ff fef2 	bl	8005966 <term_goto>
	while (*str != '\0') {
 8005b82:	e011      	b.n	8005ba8 <term_putsyx+0x4c>
		term_putch(term, *str);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff ff73 	bl	8005a78 <term_putch>
		if (term->flags.h_overflow)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2225      	movs	r2, #37	; 0x25
 8005b96:	5c9b      	ldrb	r3, [r3, r2]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d107      	bne.n	8005bb2 <term_putsyx+0x56>
			break;

		str++;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	60bb      	str	r3, [r7, #8]
	while (*str != '\0') {
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e9      	bne.n	8005b84 <term_putsyx+0x28>
	}
}
 8005bb0:	e000      	b.n	8005bb4 <term_putsyx+0x58>
			break;
 8005bb2:	46c0      	nop			; (mov r8, r8)
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b004      	add	sp, #16
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <term_putsl>:

inline void term_putsl(term_win *term, const char *str, const uint8_t line)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	1dfb      	adds	r3, r7, #7
 8005bc8:	701a      	strb	r2, [r3, #0]
	term_putsyx(term, str, line, 0);
 8005bca:	1dfb      	adds	r3, r7, #7
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f7ff ffc2 	bl	8005b5c <term_putsyx>
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b004      	add	sp, #16
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <term_init>:

/* initializes std_win terminal */
void term_init(term_win *term)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	term->cx = 0;   // set default cursor position
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2223      	movs	r2, #35	; 0x23
 8005bec:	2100      	movs	r1, #0
 8005bee:	5499      	strb	r1, [r3, r2]
	term->cy = 0;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2224      	movs	r2, #36	; 0x24
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	5499      	strb	r1, [r3, r2]
	term->size = TERM1602_2L_SIZE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	2120      	movs	r1, #32
 8005bfe:	5499      	strb	r1, [r3, r2]
	term->rows = TERM1602_2L_ROWS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2221      	movs	r2, #33	; 0x21
 8005c04:	2102      	movs	r1, #2
 8005c06:	5499      	strb	r1, [r3, r2]
	term->cols = TERM1602_2L_COLS;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2222      	movs	r2, #34	; 0x22
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	5499      	strb	r1, [r3, r2]
	term->flags.update_req = true;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2225      	movs	r2, #37	; 0x25
 8005c14:	5c99      	ldrb	r1, [r3, r2]
 8005c16:	2001      	movs	r0, #1
 8005c18:	4301      	orrs	r1, r0
 8005c1a:	5499      	strb	r1, [r3, r2]
	term_cls(term);     //flush the screen buffer
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff febb 	bl	800599a <term_cls>
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c2c:	480d      	ldr	r0, [pc, #52]	; (8005c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c30:	480d      	ldr	r0, [pc, #52]	; (8005c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c32:	490e      	ldr	r1, [pc, #56]	; (8005c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c34:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <LoopForever+0xe>)
  movs r3, #0
 8005c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c38:	e002      	b.n	8005c40 <LoopCopyDataInit>

08005c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c3e:	3304      	adds	r3, #4

08005c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c44:	d3f9      	bcc.n	8005c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c46:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c48:	4c0b      	ldr	r4, [pc, #44]	; (8005c78 <LoopForever+0x16>)
  movs r3, #0
 8005c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c4c:	e001      	b.n	8005c52 <LoopFillZerobss>

08005c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c50:	3204      	adds	r2, #4

08005c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c54:	d3fb      	bcc.n	8005c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005c56:	f7ff fe81 	bl	800595c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005c5a:	f003 fa1f 	bl	800909c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c5e:	f7fe f95b 	bl	8003f18 <main>

08005c62 <LoopForever>:

LoopForever:
    b LoopForever
 8005c62:	e7fe      	b.n	8005c62 <LoopForever>
  ldr   r0, =_estack
 8005c64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c6c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005c70:	0800d610 	.word	0x0800d610
  ldr r2, =_sbss
 8005c74:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8005c78:	20000458 	.word	0x20000458

08005c7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c7c:	e7fe      	b.n	8005c7c <ADC1_COMP_IRQHandler>
	...

08005c80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_Init+0x24>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <HAL_Init+0x24>)
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005c90:	2000      	movs	r0, #0
 8005c92:	f000 f809 	bl	8005ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c96:	f7ff fbd9 	bl	800544c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	40022000 	.word	0x40022000

08005ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <HAL_InitTick+0x5c>)
 8005cb2:	681c      	ldr	r4, [r3, #0]
 8005cb4:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <HAL_InitTick+0x60>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	0019      	movs	r1, r3
 8005cba:	23fa      	movs	r3, #250	; 0xfa
 8005cbc:	0098      	lsls	r0, r3, #2
 8005cbe:	f7fa fa49 	bl	8000154 <__udivsi3>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	f7fa fa44 	bl	8000154 <__udivsi3>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f92f 	bl	8005f32 <HAL_SYSTICK_Config>
 8005cd4:	1e03      	subs	r3, r0, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e00f      	b.n	8005cfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d80b      	bhi.n	8005cfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	425b      	negs	r3, r3
 8005ce8:	2200      	movs	r2, #0
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 f8fc 	bl	8005ee8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_InitTick+0x64>)
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b003      	add	sp, #12
 8005d02:	bd90      	pop	{r4, r7, pc}
 8005d04:	2000001c 	.word	0x2000001c
 8005d08:	20000024 	.word	0x20000024
 8005d0c:	20000020 	.word	0x20000020

08005d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_IncTick+0x1c>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	001a      	movs	r2, r3
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_IncTick+0x20>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	18d2      	adds	r2, r2, r3
 8005d20:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <HAL_IncTick+0x20>)
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	20000024 	.word	0x20000024
 8005d30:	20000444 	.word	0x20000444

08005d34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  return uwTick;
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <HAL_GetTick+0x10>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	20000444 	.word	0x20000444

08005d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d50:	f7ff fff0 	bl	8005d34 <HAL_GetTick>
 8005d54:	0003      	movs	r3, r0
 8005d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	d005      	beq.n	8005d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_Delay+0x44>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	001a      	movs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	f7ff ffe0 	bl	8005d34 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d8f7      	bhi.n	8005d70 <HAL_Delay+0x28>
  {
  }
}
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b004      	add	sp, #16
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	20000024 	.word	0x20000024

08005d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	0002      	movs	r2, r0
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d9c:	1dfb      	adds	r3, r7, #7
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b7f      	cmp	r3, #127	; 0x7f
 8005da2:	d809      	bhi.n	8005db8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da4:	1dfb      	adds	r3, r7, #7
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	001a      	movs	r2, r3
 8005daa:	231f      	movs	r3, #31
 8005dac:	401a      	ands	r2, r3
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <__NVIC_EnableIRQ+0x30>)
 8005db0:	2101      	movs	r1, #1
 8005db2:	4091      	lsls	r1, r2
 8005db4:	000a      	movs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
  }
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000e100 	.word	0xe000e100

08005dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	0002      	movs	r2, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	1dfb      	adds	r3, r7, #7
 8005dd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005dd2:	1dfb      	adds	r3, r7, #7
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd8:	d828      	bhi.n	8005e2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dda:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <__NVIC_SetPriority+0xd4>)
 8005ddc:	1dfb      	adds	r3, r7, #7
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b25b      	sxtb	r3, r3
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	33c0      	adds	r3, #192	; 0xc0
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	589b      	ldr	r3, [r3, r2]
 8005dea:	1dfa      	adds	r2, r7, #7
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	0011      	movs	r1, r2
 8005df0:	2203      	movs	r2, #3
 8005df2:	400a      	ands	r2, r1
 8005df4:	00d2      	lsls	r2, r2, #3
 8005df6:	21ff      	movs	r1, #255	; 0xff
 8005df8:	4091      	lsls	r1, r2
 8005dfa:	000a      	movs	r2, r1
 8005dfc:	43d2      	mvns	r2, r2
 8005dfe:	401a      	ands	r2, r3
 8005e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	019b      	lsls	r3, r3, #6
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	401a      	ands	r2, r3
 8005e0a:	1dfb      	adds	r3, r7, #7
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	2303      	movs	r3, #3
 8005e12:	4003      	ands	r3, r0
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e18:	481f      	ldr	r0, [pc, #124]	; (8005e98 <__NVIC_SetPriority+0xd4>)
 8005e1a:	1dfb      	adds	r3, r7, #7
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b25b      	sxtb	r3, r3
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	430a      	orrs	r2, r1
 8005e24:	33c0      	adds	r3, #192	; 0xc0
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005e2a:	e031      	b.n	8005e90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <__NVIC_SetPriority+0xd8>)
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	0019      	movs	r1, r3
 8005e34:	230f      	movs	r3, #15
 8005e36:	400b      	ands	r3, r1
 8005e38:	3b08      	subs	r3, #8
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	3306      	adds	r3, #6
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	18d3      	adds	r3, r2, r3
 8005e42:	3304      	adds	r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1dfa      	adds	r2, r7, #7
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	400a      	ands	r2, r1
 8005e50:	00d2      	lsls	r2, r2, #3
 8005e52:	21ff      	movs	r1, #255	; 0xff
 8005e54:	4091      	lsls	r1, r2
 8005e56:	000a      	movs	r2, r1
 8005e58:	43d2      	mvns	r2, r2
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	22ff      	movs	r2, #255	; 0xff
 8005e64:	401a      	ands	r2, r3
 8005e66:	1dfb      	adds	r3, r7, #7
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	4003      	ands	r3, r0
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e74:	4809      	ldr	r0, [pc, #36]	; (8005e9c <__NVIC_SetPriority+0xd8>)
 8005e76:	1dfb      	adds	r3, r7, #7
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	001c      	movs	r4, r3
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	4023      	ands	r3, r4
 8005e80:	3b08      	subs	r3, #8
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	430a      	orrs	r2, r1
 8005e86:	3306      	adds	r3, #6
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	18c3      	adds	r3, r0, r3
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	46c0      	nop			; (mov r8, r8)
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b003      	add	sp, #12
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	e000e100 	.word	0xe000e100
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	1e5a      	subs	r2, r3, #1
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	045b      	lsls	r3, r3, #17
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d301      	bcc.n	8005eb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e010      	b.n	8005eda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <SysTick_Config+0x44>)
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	3a01      	subs	r2, #1
 8005ebe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	425b      	negs	r3, r3
 8005ec4:	2103      	movs	r1, #3
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f7ff ff7c 	bl	8005dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <SysTick_Config+0x44>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ed2:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <SysTick_Config+0x44>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	0018      	movs	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b002      	add	sp, #8
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	e000e010 	.word	0xe000e010

08005ee8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	210f      	movs	r1, #15
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	1c02      	adds	r2, r0, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	0011      	movs	r1, r2
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff ff5d 	bl	8005dc4 <__NVIC_SetPriority>
}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b004      	add	sp, #16
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	0002      	movs	r2, r0
 8005f1a:	1dfb      	adds	r3, r7, #7
 8005f1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f1e:	1dfb      	adds	r3, r7, #7
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7ff ff33 	bl	8005d90 <__NVIC_EnableIRQ>
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7ff ffaf 	bl	8005ea0 <SysTick_Config>
 8005f42:	0003      	movs	r3, r0
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f54:	210f      	movs	r1, #15
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2221      	movs	r2, #33	; 0x21
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d006      	beq.n	8005f76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e028      	b.n	8005fc8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	210e      	movs	r1, #14
 8005f82:	438a      	bics	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2101      	movs	r1, #1
 8005f92:	438a      	bics	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4091      	lsls	r1, r2
 8005fa2:	000a      	movs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2221      	movs	r2, #33	; 0x21
 8005faa:	2101      	movs	r1, #1
 8005fac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	0010      	movs	r0, r2
 8005fc6:	4798      	blx	r3
    } 
  }
  return status;
 8005fc8:	230f      	movs	r3, #15
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	781b      	ldrb	r3, [r3, #0]
}
 8005fce:	0018      	movs	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b004      	add	sp, #16
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2221      	movs	r2, #33	; 0x21
 8005fe2:	5c9b      	ldrb	r3, [r3, r2]
 8005fe4:	b2db      	uxtb	r3, r3
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b002      	add	sp, #8
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ffe:	e155      	b.n	80062ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2101      	movs	r1, #1
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4091      	lsls	r1, r2
 800600a:	000a      	movs	r2, r1
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d100      	bne.n	8006018 <HAL_GPIO_Init+0x28>
 8006016:	e146      	b.n	80062a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2203      	movs	r2, #3
 800601e:	4013      	ands	r3, r2
 8006020:	2b01      	cmp	r3, #1
 8006022:	d005      	beq.n	8006030 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2203      	movs	r2, #3
 800602a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800602c:	2b02      	cmp	r3, #2
 800602e:	d130      	bne.n	8006092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	2203      	movs	r2, #3
 800603c:	409a      	lsls	r2, r3
 800603e:	0013      	movs	r3, r2
 8006040:	43da      	mvns	r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4013      	ands	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	409a      	lsls	r2, r3
 8006052:	0013      	movs	r3, r2
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006066:	2201      	movs	r2, #1
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	409a      	lsls	r2, r3
 800606c:	0013      	movs	r3, r2
 800606e:	43da      	mvns	r2, r3
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4013      	ands	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	2201      	movs	r2, #1
 800607e:	401a      	ands	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	409a      	lsls	r2, r3
 8006084:	0013      	movs	r3, r2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2203      	movs	r2, #3
 8006098:	4013      	ands	r3, r2
 800609a:	2b03      	cmp	r3, #3
 800609c:	d017      	beq.n	80060ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	2203      	movs	r2, #3
 80060aa:	409a      	lsls	r2, r3
 80060ac:	0013      	movs	r3, r2
 80060ae:	43da      	mvns	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	409a      	lsls	r2, r3
 80060c0:	0013      	movs	r3, r2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2203      	movs	r2, #3
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d123      	bne.n	8006122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	08da      	lsrs	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3208      	adds	r2, #8
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	58d3      	ldr	r3, [r2, r3]
 80060e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2207      	movs	r2, #7
 80060ec:	4013      	ands	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	220f      	movs	r2, #15
 80060f2:	409a      	lsls	r2, r3
 80060f4:	0013      	movs	r3, r2
 80060f6:	43da      	mvns	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2107      	movs	r1, #7
 8006106:	400b      	ands	r3, r1
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	409a      	lsls	r2, r3
 800610c:	0013      	movs	r3, r2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	08da      	lsrs	r2, r3, #3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3208      	adds	r2, #8
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	2203      	movs	r2, #3
 800612e:	409a      	lsls	r2, r3
 8006130:	0013      	movs	r3, r2
 8006132:	43da      	mvns	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4013      	ands	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2203      	movs	r2, #3
 8006140:	401a      	ands	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	0013      	movs	r3, r2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	23c0      	movs	r3, #192	; 0xc0
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	4013      	ands	r3, r2
 8006160:	d100      	bne.n	8006164 <HAL_GPIO_Init+0x174>
 8006162:	e0a0      	b.n	80062a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006164:	4b57      	ldr	r3, [pc, #348]	; (80062c4 <HAL_GPIO_Init+0x2d4>)
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	4b56      	ldr	r3, [pc, #344]	; (80062c4 <HAL_GPIO_Init+0x2d4>)
 800616a:	2101      	movs	r1, #1
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
 8006170:	4b54      	ldr	r3, [pc, #336]	; (80062c4 <HAL_GPIO_Init+0x2d4>)
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2201      	movs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800617c:	4a52      	ldr	r2, [pc, #328]	; (80062c8 <HAL_GPIO_Init+0x2d8>)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	089b      	lsrs	r3, r3, #2
 8006182:	3302      	adds	r3, #2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	589b      	ldr	r3, [r3, r2]
 8006188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2203      	movs	r2, #3
 800618e:	4013      	ands	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	220f      	movs	r2, #15
 8006194:	409a      	lsls	r2, r3
 8006196:	0013      	movs	r3, r2
 8006198:	43da      	mvns	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4013      	ands	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	2390      	movs	r3, #144	; 0x90
 80061a4:	05db      	lsls	r3, r3, #23
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d019      	beq.n	80061de <HAL_GPIO_Init+0x1ee>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a47      	ldr	r2, [pc, #284]	; (80062cc <HAL_GPIO_Init+0x2dc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_GPIO_Init+0x1ea>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a46      	ldr	r2, [pc, #280]	; (80062d0 <HAL_GPIO_Init+0x2e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00d      	beq.n	80061d6 <HAL_GPIO_Init+0x1e6>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a45      	ldr	r2, [pc, #276]	; (80062d4 <HAL_GPIO_Init+0x2e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <HAL_GPIO_Init+0x1e2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a44      	ldr	r2, [pc, #272]	; (80062d8 <HAL_GPIO_Init+0x2e8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_GPIO_Init+0x1de>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e008      	b.n	80061e0 <HAL_GPIO_Init+0x1f0>
 80061ce:	2305      	movs	r3, #5
 80061d0:	e006      	b.n	80061e0 <HAL_GPIO_Init+0x1f0>
 80061d2:	2303      	movs	r3, #3
 80061d4:	e004      	b.n	80061e0 <HAL_GPIO_Init+0x1f0>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e002      	b.n	80061e0 <HAL_GPIO_Init+0x1f0>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <HAL_GPIO_Init+0x1f0>
 80061de:	2300      	movs	r3, #0
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	2103      	movs	r1, #3
 80061e4:	400a      	ands	r2, r1
 80061e6:	0092      	lsls	r2, r2, #2
 80061e8:	4093      	lsls	r3, r2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80061f0:	4935      	ldr	r1, [pc, #212]	; (80062c8 <HAL_GPIO_Init+0x2d8>)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	3302      	adds	r3, #2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	43da      	mvns	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	025b      	lsls	r3, r3, #9
 8006216:	4013      	ands	r3, r2
 8006218:	d003      	beq.n	8006222 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006228:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	43da      	mvns	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4013      	ands	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	4013      	ands	r3, r2
 8006242:	d003      	beq.n	800624c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800624c:	4b23      	ldr	r3, [pc, #140]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006252:	4b22      	ldr	r3, [pc, #136]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	43da      	mvns	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4013      	ands	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	035b      	lsls	r3, r3, #13
 800626a:	4013      	ands	r3, r2
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006276:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	43da      	mvns	r2, r3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4013      	ands	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	039b      	lsls	r3, r3, #14
 8006294:	4013      	ands	r3, r2
 8006296:	d003      	beq.n	80062a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_GPIO_Init+0x2ec>)
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	3301      	adds	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	40da      	lsrs	r2, r3
 80062b4:	1e13      	subs	r3, r2, #0
 80062b6:	d000      	beq.n	80062ba <HAL_GPIO_Init+0x2ca>
 80062b8:	e6a2      	b.n	8006000 <HAL_GPIO_Init+0x10>
  } 
}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b006      	add	sp, #24
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40021000 	.word	0x40021000
 80062c8:	40010000 	.word	0x40010000
 80062cc:	48000400 	.word	0x48000400
 80062d0:	48000800 	.word	0x48000800
 80062d4:	48000c00 	.word	0x48000c00
 80062d8:	48001000 	.word	0x48001000
 80062dc:	40010400 	.word	0x40010400

080062e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	0008      	movs	r0, r1
 80062ea:	0011      	movs	r1, r2
 80062ec:	1cbb      	adds	r3, r7, #2
 80062ee:	1c02      	adds	r2, r0, #0
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	1c7b      	adds	r3, r7, #1
 80062f4:	1c0a      	adds	r2, r1, #0
 80062f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062f8:	1c7b      	adds	r3, r7, #1
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006300:	1cbb      	adds	r3, r7, #2
 8006302:	881a      	ldrh	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006308:	e003      	b.n	8006312 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800630a:	1cbb      	adds	r3, r7, #2
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	46bd      	mov	sp, r7
 8006316:	b002      	add	sp, #8
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	0002      	movs	r2, r0
 8006324:	1dbb      	adds	r3, r7, #6
 8006326:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	1dba      	adds	r2, r7, #6
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	4013      	ands	r3, r2
 8006332:	d008      	beq.n	8006346 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006336:	1dba      	adds	r2, r7, #6
 8006338:	8812      	ldrh	r2, [r2, #0]
 800633a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	0018      	movs	r0, r3
 8006342:	f7fd fc8b 	bl	8003c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	b002      	add	sp, #8
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	40010400 	.word	0x40010400

08006354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e082      	b.n	800646c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2241      	movs	r2, #65	; 0x41
 800636a:	5c9b      	ldrb	r3, [r3, r2]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d107      	bne.n	8006382 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2240      	movs	r2, #64	; 0x40
 8006376:	2100      	movs	r1, #0
 8006378:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0018      	movs	r0, r3
 800637e:	f7ff f889 	bl	8005494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2241      	movs	r2, #65	; 0x41
 8006386:	2124      	movs	r1, #36	; 0x24
 8006388:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	438a      	bics	r2, r1
 8006398:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4934      	ldr	r1, [pc, #208]	; (8006474 <HAL_I2C_Init+0x120>)
 80063a4:	400a      	ands	r2, r1
 80063a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4931      	ldr	r1, [pc, #196]	; (8006478 <HAL_I2C_Init+0x124>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d108      	bne.n	80063d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	0209      	lsls	r1, r1, #8
 80063cc:	430a      	orrs	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]
 80063d0:	e007      	b.n	80063e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2184      	movs	r1, #132	; 0x84
 80063dc:	0209      	lsls	r1, r1, #8
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d104      	bne.n	80063f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2280      	movs	r2, #128	; 0x80
 80063f0:	0112      	lsls	r2, r2, #4
 80063f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	491f      	ldr	r1, [pc, #124]	; (800647c <HAL_I2C_Init+0x128>)
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	491a      	ldr	r1, [pc, #104]	; (8006478 <HAL_I2C_Init+0x124>)
 8006410:	400a      	ands	r2, r1
 8006412:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	431a      	orrs	r2, r3
 800641e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69d9      	ldr	r1, [r3, #28]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2241      	movs	r2, #65	; 0x41
 8006458:	2120      	movs	r1, #32
 800645a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2242      	movs	r2, #66	; 0x42
 8006466:	2100      	movs	r1, #0
 8006468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}
 8006474:	f0ffffff 	.word	0xf0ffffff
 8006478:	ffff7fff 	.word	0xffff7fff
 800647c:	02008000 	.word	0x02008000

08006480 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	0008      	movs	r0, r1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	0019      	movs	r1, r3
 800648e:	230a      	movs	r3, #10
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	1c02      	adds	r2, r0, #0
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	2308      	movs	r3, #8
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	1c0a      	adds	r2, r1, #0
 800649c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2241      	movs	r2, #65	; 0x41
 80064a2:	5c9b      	ldrb	r3, [r3, r2]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d000      	beq.n	80064ac <HAL_I2C_Master_Transmit+0x2c>
 80064aa:	e0e7      	b.n	800667c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	5c9b      	ldrb	r3, [r3, r2]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Master_Transmit+0x3a>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0e1      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2240      	movs	r2, #64	; 0x40
 80064be:	2101      	movs	r1, #1
 80064c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064c2:	f7ff fc37 	bl	8005d34 <HAL_GetTick>
 80064c6:	0003      	movs	r3, r0
 80064c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	0219      	lsls	r1, r3, #8
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2319      	movs	r3, #25
 80064d6:	2201      	movs	r2, #1
 80064d8:	f000 ff90 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 80064dc:	1e03      	subs	r3, r0, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0cc      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2241      	movs	r2, #65	; 0x41
 80064e8:	2121      	movs	r1, #33	; 0x21
 80064ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2242      	movs	r2, #66	; 0x42
 80064f0:	2110      	movs	r1, #16
 80064f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2208      	movs	r2, #8
 8006504:	18ba      	adds	r2, r7, r2
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2bff      	cmp	r3, #255	; 0xff
 8006518:	d911      	bls.n	800653e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	; 0xff
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	b2da      	uxtb	r2, r3
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	045c      	lsls	r4, r3, #17
 800652a:	230a      	movs	r3, #10
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	8819      	ldrh	r1, [r3, #0]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	4b55      	ldr	r3, [pc, #340]	; (8006688 <HAL_I2C_Master_Transmit+0x208>)
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	0023      	movs	r3, r4
 8006538:	f001 f894 	bl	8007664 <I2C_TransferConfig>
 800653c:	e075      	b.n	800662a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	b2da      	uxtb	r2, r3
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	049c      	lsls	r4, r3, #18
 8006552:	230a      	movs	r3, #10
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	8819      	ldrh	r1, [r3, #0]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <HAL_I2C_Master_Transmit+0x208>)
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	0023      	movs	r3, r4
 8006560:	f001 f880 	bl	8007664 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006564:	e061      	b.n	800662a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	0018      	movs	r0, r3
 800656e:	f000 ff84 	bl	800747a <I2C_WaitOnTXISFlagUntilTimeout>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e081      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d03a      	beq.n	800662a <HAL_I2C_Master_Transmit+0x1aa>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d136      	bne.n	800662a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	0013      	movs	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	f000 ff17 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e053      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2bff      	cmp	r3, #255	; 0xff
 80065de:	d911      	bls.n	8006604 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	22ff      	movs	r2, #255	; 0xff
 80065e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	045c      	lsls	r4, r3, #17
 80065f0:	230a      	movs	r3, #10
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	8819      	ldrh	r1, [r3, #0]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	2300      	movs	r3, #0
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	0023      	movs	r3, r4
 80065fe:	f001 f831 	bl	8007664 <I2C_TransferConfig>
 8006602:	e012      	b.n	800662a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	b2da      	uxtb	r2, r3
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	049c      	lsls	r4, r3, #18
 8006618:	230a      	movs	r3, #10
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	8819      	ldrh	r1, [r3, #0]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	2300      	movs	r3, #0
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	0023      	movs	r3, r4
 8006626:	f001 f81d 	bl	8007664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d198      	bne.n	8006566 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	0018      	movs	r0, r3
 800663c:	f000 ff5c 	bl	80074f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006640:	1e03      	subs	r3, r0, #0
 8006642:	d001      	beq.n	8006648 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e01a      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2220      	movs	r2, #32
 800664e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	490c      	ldr	r1, [pc, #48]	; (800668c <HAL_I2C_Master_Transmit+0x20c>)
 800665c:	400a      	ands	r2, r1
 800665e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2241      	movs	r2, #65	; 0x41
 8006664:	2120      	movs	r1, #32
 8006666:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2242      	movs	r2, #66	; 0x42
 800666c:	2100      	movs	r1, #0
 800666e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	2100      	movs	r1, #0
 8006676:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b007      	add	sp, #28
 8006684:	bd90      	pop	{r4, r7, pc}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	80002000 	.word	0x80002000
 800668c:	fe00e800 	.word	0xfe00e800

08006690 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	; 0x28
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	230a      	movs	r3, #10
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	1c0a      	adds	r2, r1, #0
 80066a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2241      	movs	r2, #65	; 0x41
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d000      	beq.n	80066b6 <HAL_I2C_IsDeviceReady+0x26>
 80066b4:	e0fe      	b.n	80068b4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	401a      	ands	r2, r3
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d101      	bne.n	80066ce <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
 80066cc:	e0f3      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2240      	movs	r2, #64	; 0x40
 80066d2:	5c9b      	ldrb	r3, [r3, r2]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_I2C_IsDeviceReady+0x4c>
 80066d8:	2302      	movs	r3, #2
 80066da:	e0ec      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	2101      	movs	r1, #1
 80066e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2241      	movs	r2, #65	; 0x41
 80066e8:	2124      	movs	r1, #36	; 0x24
 80066ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_I2C_IsDeviceReady+0x7a>
 80066fa:	230a      	movs	r3, #10
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	059b      	lsls	r3, r3, #22
 8006702:	0d9b      	lsrs	r3, r3, #22
 8006704:	4a6e      	ldr	r2, [pc, #440]	; (80068c0 <HAL_I2C_IsDeviceReady+0x230>)
 8006706:	431a      	orrs	r2, r3
 8006708:	e007      	b.n	800671a <HAL_I2C_IsDeviceReady+0x8a>
 800670a:	230a      	movs	r3, #10
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	059b      	lsls	r3, r3, #22
 8006712:	0d9b      	lsrs	r3, r3, #22
 8006714:	22a0      	movs	r2, #160	; 0xa0
 8006716:	0192      	lsls	r2, r2, #6
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006720:	f7ff fb08 	bl	8005d34 <HAL_GetTick>
 8006724:	0003      	movs	r3, r0
 8006726:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2220      	movs	r2, #32
 8006730:	4013      	ands	r3, r2
 8006732:	3b20      	subs	r3, #32
 8006734:	425a      	negs	r2, r3
 8006736:	4153      	adcs	r3, r2
 8006738:	b2da      	uxtb	r2, r3
 800673a:	231f      	movs	r3, #31
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2210      	movs	r2, #16
 8006748:	4013      	ands	r3, r2
 800674a:	3b10      	subs	r3, #16
 800674c:	425a      	negs	r2, r3
 800674e:	4153      	adcs	r3, r2
 8006750:	b2da      	uxtb	r2, r3
 8006752:	231e      	movs	r3, #30
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006758:	e035      	b.n	80067c6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	d01a      	beq.n	8006796 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006760:	f7ff fae8 	bl	8005d34 <HAL_GetTick>
 8006764:	0002      	movs	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <HAL_I2C_IsDeviceReady+0xe6>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2241      	movs	r2, #65	; 0x41
 800677a:	2120      	movs	r1, #32
 800677c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	2220      	movs	r2, #32
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2240      	movs	r2, #64	; 0x40
 800678e:	2100      	movs	r1, #0
 8006790:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e08f      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2220      	movs	r2, #32
 800679e:	4013      	ands	r3, r2
 80067a0:	3b20      	subs	r3, #32
 80067a2:	425a      	negs	r2, r3
 80067a4:	4153      	adcs	r3, r2
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	231f      	movs	r3, #31
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2210      	movs	r2, #16
 80067b6:	4013      	ands	r3, r2
 80067b8:	3b10      	subs	r3, #16
 80067ba:	425a      	negs	r2, r3
 80067bc:	4153      	adcs	r3, r2
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	231e      	movs	r3, #30
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067c6:	231f      	movs	r3, #31
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_I2C_IsDeviceReady+0x14a>
 80067d0:	231e      	movs	r3, #30
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0bf      	beq.n	800675a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	2210      	movs	r2, #16
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d01a      	beq.n	800681e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	0013      	movs	r3, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	2120      	movs	r1, #32
 80067f6:	f000 fe01 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d001      	beq.n	8006802 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e059      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2220      	movs	r2, #32
 8006808:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2241      	movs	r2, #65	; 0x41
 800680e:	2120      	movs	r1, #32
 8006810:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	2100      	movs	r1, #0
 8006818:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e04b      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	0013      	movs	r3, r2
 8006828:	2200      	movs	r2, #0
 800682a:	2120      	movs	r1, #32
 800682c:	f000 fde6 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006830:	1e03      	subs	r3, r0, #0
 8006832:	d001      	beq.n	8006838 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e03e      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2210      	movs	r2, #16
 800683e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2220      	movs	r2, #32
 8006846:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d119      	bne.n	8006884 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	01c9      	lsls	r1, r1, #7
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	0013      	movs	r3, r2
 800686c:	2200      	movs	r2, #0
 800686e:	2120      	movs	r1, #32
 8006870:	f000 fdc4 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006874:	1e03      	subs	r3, r0, #0
 8006876:	d001      	beq.n	800687c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e01c      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2220      	movs	r2, #32
 8006882:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3301      	adds	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	429a      	cmp	r2, r3
 8006890:	d900      	bls.n	8006894 <HAL_I2C_IsDeviceReady+0x204>
 8006892:	e72e      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2241      	movs	r2, #65	; 0x41
 8006898:	2120      	movs	r1, #32
 800689a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	2220      	movs	r2, #32
 80068a2:	431a      	orrs	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	2100      	movs	r1, #0
 80068ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
  }
}
 80068b6:	0018      	movs	r0, r3
 80068b8:	46bd      	mov	sp, r7
 80068ba:	b008      	add	sp, #32
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	02002000 	.word	0x02002000

080068c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
  }
}
 80068f0:	46c0      	nop			; (mov r8, r8)
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b004      	add	sp, #16
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	001a      	movs	r2, r3
 8006916:	2301      	movs	r3, #1
 8006918:	4013      	ands	r3, r2
 800691a:	d010      	beq.n	800693e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	09db      	lsrs	r3, r3, #7
 8006920:	001a      	movs	r2, r3
 8006922:	2301      	movs	r3, #1
 8006924:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006926:	d00a      	beq.n	800693e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692c:	2201      	movs	r2, #1
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2280      	movs	r2, #128	; 0x80
 800693a:	0052      	lsls	r2, r2, #1
 800693c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	0a9b      	lsrs	r3, r3, #10
 8006942:	001a      	movs	r2, r3
 8006944:	2301      	movs	r3, #1
 8006946:	4013      	ands	r3, r2
 8006948:	d010      	beq.n	800696c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	09db      	lsrs	r3, r3, #7
 800694e:	001a      	movs	r2, r3
 8006950:	2301      	movs	r3, #1
 8006952:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006954:	d00a      	beq.n	800696c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	2208      	movs	r2, #8
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	00d2      	lsls	r2, r2, #3
 800696a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	0a5b      	lsrs	r3, r3, #9
 8006970:	001a      	movs	r2, r3
 8006972:	2301      	movs	r3, #1
 8006974:	4013      	ands	r3, r2
 8006976:	d010      	beq.n	800699a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	001a      	movs	r2, r3
 800697e:	2301      	movs	r3, #1
 8006980:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006982:	d00a      	beq.n	800699a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006988:	2202      	movs	r2, #2
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	220b      	movs	r2, #11
 80069a4:	4013      	ands	r3, r2
 80069a6:	d005      	beq.n	80069b4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0011      	movs	r1, r2
 80069ae:	0018      	movs	r0, r3
 80069b0:	f000 fbd8 	bl	8007164 <I2C_ITError>
  }
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b006      	add	sp, #24
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	0008      	movs	r0, r1
 80069e6:	0011      	movs	r1, r2
 80069e8:	1cfb      	adds	r3, r7, #3
 80069ea:	1c02      	adds	r2, r0, #0
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	003b      	movs	r3, r7
 80069f0:	1c0a      	adds	r2, r1, #0
 80069f2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80069f4:	46c0      	nop			; (mov r8, r8)
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006a04:	46c0      	nop			; (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b002      	add	sp, #8
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b002      	add	sp, #8
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b002      	add	sp, #8
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	5c9b      	ldrb	r3, [r3, r2]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <I2C_Slave_ISR_IT+0x24>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0fa      	b.n	8006c46 <I2C_Slave_ISR_IT+0x21a>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2240      	movs	r2, #64	; 0x40
 8006a54:	2101      	movs	r1, #1
 8006a56:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4013      	ands	r3, r2
 8006a62:	d00b      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	001a      	movs	r2, r3
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a6e:	d005      	beq.n	8006a7c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	0011      	movs	r1, r2
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f9f6 	bl	8006e68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	091b      	lsrs	r3, r3, #4
 8006a80:	001a      	movs	r2, r3
 8006a82:	2301      	movs	r3, #1
 8006a84:	4013      	ands	r3, r2
 8006a86:	d054      	beq.n	8006b32 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	001a      	movs	r2, r3
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a92:	d04e      	beq.n	8006b32 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12d      	bne.n	8006afa <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2241      	movs	r2, #65	; 0x41
 8006aa2:	5c9b      	ldrb	r3, [r3, r2]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b28      	cmp	r3, #40	; 0x28
 8006aa8:	d10b      	bne.n	8006ac2 <I2C_Slave_ISR_IT+0x96>
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	2380      	movs	r3, #128	; 0x80
 8006aae:	049b      	lsls	r3, r3, #18
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d106      	bne.n	8006ac2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	0011      	movs	r1, r2
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 faf8 	bl	80070b0 <I2C_ITListenCplt>
 8006ac0:	e036      	b.n	8006b30 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2241      	movs	r2, #65	; 0x41
 8006ac6:	5c9b      	ldrb	r3, [r3, r2]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b29      	cmp	r3, #41	; 0x29
 8006acc:	d110      	bne.n	8006af0 <I2C_Slave_ISR_IT+0xc4>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4a5f      	ldr	r2, [pc, #380]	; (8006c50 <I2C_Slave_ISR_IT+0x224>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00c      	beq.n	8006af0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2210      	movs	r2, #16
 8006adc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f000 fc4a 	bl	800737a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 f957 	bl	8006d9c <I2C_ITSlaveSeqCplt>
 8006aee:	e01f      	b.n	8006b30 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2210      	movs	r2, #16
 8006af6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006af8:	e09d      	b.n	8006c36 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2210      	movs	r2, #16
 8006b00:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	2204      	movs	r2, #4
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <I2C_Slave_ISR_IT+0xf4>
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	045b      	lsls	r3, r3, #17
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d000      	beq.n	8006b20 <I2C_Slave_ISR_IT+0xf4>
 8006b1e:	e08a      	b.n	8006c36 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	0011      	movs	r1, r2
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 fb1b 	bl	8007164 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b2e:	e082      	b.n	8006c36 <I2C_Slave_ISR_IT+0x20a>
 8006b30:	e081      	b.n	8006c36 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	089b      	lsrs	r3, r3, #2
 8006b36:	001a      	movs	r2, r3
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d031      	beq.n	8006ba2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	001a      	movs	r2, r3
 8006b44:	2301      	movs	r3, #1
 8006b46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b48:	d02b      	beq.n	8006ba2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d018      	beq.n	8006b86 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d154      	bne.n	8006c3a <I2C_Slave_ISR_IT+0x20e>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <I2C_Slave_ISR_IT+0x224>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d050      	beq.n	8006c3a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f000 f8fe 	bl	8006d9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ba0:	e04b      	b.n	8006c3a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	08db      	lsrs	r3, r3, #3
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	d00c      	beq.n	8006bc8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	08db      	lsrs	r3, r3, #3
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bb8:	d006      	beq.n	8006bc8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	0011      	movs	r1, r2
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 f847 	bl	8006c54 <I2C_ITAddrCplt>
 8006bc6:	e039      	b.n	8006c3c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	001a      	movs	r2, r3
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d033      	beq.n	8006c3c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	001a      	movs	r2, r3
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bde:	d02d      	beq.n	8006c3c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c1a:	e00f      	b.n	8006c3c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	045b      	lsls	r3, r3, #17
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d002      	beq.n	8006c2c <I2C_Slave_ISR_IT+0x200>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f8b4 	bl	8006d9c <I2C_ITSlaveSeqCplt>
 8006c34:	e002      	b.n	8006c3c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	e000      	b.n	8006c3c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006c3a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b006      	add	sp, #24
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	ffff0000 	.word	0xffff0000

08006c54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c54:	b5b0      	push	{r4, r5, r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2241      	movs	r2, #65	; 0x41
 8006c62:	5c9b      	ldrb	r3, [r3, r2]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	001a      	movs	r2, r3
 8006c68:	2328      	movs	r3, #40	; 0x28
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b28      	cmp	r3, #40	; 0x28
 8006c6e:	d000      	beq.n	8006c72 <I2C_ITAddrCplt+0x1e>
 8006c70:	e088      	b.n	8006d84 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	0c1b      	lsrs	r3, r3, #16
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	250f      	movs	r5, #15
 8006c7e:	197b      	adds	r3, r7, r5
 8006c80:	2101      	movs	r1, #1
 8006c82:	400a      	ands	r2, r1
 8006c84:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	0c1b      	lsrs	r3, r3, #16
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	200c      	movs	r0, #12
 8006c92:	183b      	adds	r3, r7, r0
 8006c94:	21fe      	movs	r1, #254	; 0xfe
 8006c96:	400a      	ands	r2, r1
 8006c98:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	240a      	movs	r4, #10
 8006ca4:	193b      	adds	r3, r7, r4
 8006ca6:	0592      	lsls	r2, r2, #22
 8006ca8:	0d92      	lsrs	r2, r2, #22
 8006caa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	21fe      	movs	r1, #254	; 0xfe
 8006cba:	400a      	ands	r2, r1
 8006cbc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d148      	bne.n	8006d58 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006cc6:	0021      	movs	r1, r4
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	09db      	lsrs	r3, r3, #7
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	183b      	adds	r3, r7, r0
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	4053      	eors	r3, r2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	001a      	movs	r2, r3
 8006cda:	2306      	movs	r3, #6
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d120      	bne.n	8006d22 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006ce0:	183b      	adds	r3, r7, r0
 8006ce2:	187a      	adds	r2, r7, r1
 8006ce4:	8812      	ldrh	r2, [r2, #0]
 8006ce6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d14c      	bne.n	8006d94 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2208      	movs	r2, #8
 8006d06:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d10:	183b      	adds	r3, r7, r0
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	197b      	adds	r3, r7, r5
 8006d16:	7819      	ldrb	r1, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7ff fe5e 	bl	80069dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d20:	e038      	b.n	8006d94 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006d22:	240c      	movs	r4, #12
 8006d24:	193b      	adds	r3, r7, r4
 8006d26:	2208      	movs	r2, #8
 8006d28:	18ba      	adds	r2, r7, r2
 8006d2a:	8812      	ldrh	r2, [r2, #0]
 8006d2c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d2e:	2380      	movs	r3, #128	; 0x80
 8006d30:	021a      	lsls	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0011      	movs	r1, r2
 8006d36:	0018      	movs	r0, r3
 8006d38:	f000 fcca 	bl	80076d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	2100      	movs	r1, #0
 8006d42:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d44:	193b      	adds	r3, r7, r4
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	230f      	movs	r3, #15
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	7819      	ldrb	r1, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff fe43 	bl	80069dc <HAL_I2C_AddrCallback>
}
 8006d56:	e01d      	b.n	8006d94 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0011      	movs	r1, r2
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 fcb5 	bl	80076d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2240      	movs	r2, #64	; 0x40
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d6e:	230c      	movs	r3, #12
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	230f      	movs	r3, #15
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7ff fe2d 	bl	80069dc <HAL_I2C_AddrCallback>
}
 8006d82:	e007      	b.n	8006d94 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	2100      	movs	r1, #0
 8006d92:	5499      	strb	r1, [r3, r2]
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bdb0      	pop	{r4, r5, r7, pc}

08006d9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2242      	movs	r2, #66	; 0x42
 8006db0:	2100      	movs	r1, #0
 8006db2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	0b9b      	lsrs	r3, r3, #14
 8006db8:	001a      	movs	r2, r3
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d008      	beq.n	8006dd2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4925      	ldr	r1, [pc, #148]	; (8006e60 <I2C_ITSlaveSeqCplt+0xc4>)
 8006dcc:	400a      	ands	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e00d      	b.n	8006dee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	0bdb      	lsrs	r3, r3, #15
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4013      	ands	r3, r2
 8006ddc:	d007      	beq.n	8006dee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	491e      	ldr	r1, [pc, #120]	; (8006e64 <I2C_ITSlaveSeqCplt+0xc8>)
 8006dea:	400a      	ands	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2241      	movs	r2, #65	; 0x41
 8006df2:	5c9b      	ldrb	r3, [r3, r2]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b29      	cmp	r3, #41	; 0x29
 8006df8:	d114      	bne.n	8006e24 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2241      	movs	r2, #65	; 0x41
 8006dfe:	2128      	movs	r1, #40	; 0x28
 8006e00:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2221      	movs	r2, #33	; 0x21
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 fc5f 	bl	80076d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2240      	movs	r2, #64	; 0x40
 8006e16:	2100      	movs	r1, #0
 8006e18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7ff fdcd 	bl	80069bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e22:	e019      	b.n	8006e58 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2241      	movs	r2, #65	; 0x41
 8006e28:	5c9b      	ldrb	r3, [r3, r2]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2e:	d113      	bne.n	8006e58 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2241      	movs	r2, #65	; 0x41
 8006e34:	2128      	movs	r1, #40	; 0x28
 8006e36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2222      	movs	r2, #34	; 0x22
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2102      	movs	r1, #2
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 fc44 	bl	80076d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	0018      	movs	r0, r3
 8006e54:	f7ff fdba 	bl	80069cc <HAL_I2C_SlaveRxCpltCallback>
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b004      	add	sp, #16
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	ffffbfff 	.word	0xffffbfff
 8006e64:	ffff7fff 	.word	0xffff7fff

08006e68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e7e:	200f      	movs	r0, #15
 8006e80:	183b      	adds	r3, r7, r0
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	2141      	movs	r1, #65	; 0x41
 8006e86:	5c52      	ldrb	r2, [r2, r1]
 8006e88:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e92:	183b      	adds	r3, r7, r0
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b21      	cmp	r3, #33	; 0x21
 8006e98:	d003      	beq.n	8006ea2 <I2C_ITSlaveCplt+0x3a>
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b29      	cmp	r3, #41	; 0x29
 8006ea0:	d109      	bne.n	8006eb6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ea2:	4a7d      	ldr	r2, [pc, #500]	; (8007098 <I2C_ITSlaveCplt+0x230>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	0011      	movs	r1, r2
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 fc11 	bl	80076d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2221      	movs	r2, #33	; 0x21
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb4:	e011      	b.n	8006eda <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb6:	220f      	movs	r2, #15
 8006eb8:	18bb      	adds	r3, r7, r2
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b22      	cmp	r3, #34	; 0x22
 8006ebe:	d003      	beq.n	8006ec8 <I2C_ITSlaveCplt+0x60>
 8006ec0:	18bb      	adds	r3, r7, r2
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec6:	d108      	bne.n	8006eda <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ec8:	4a74      	ldr	r2, [pc, #464]	; (800709c <I2C_ITSlaveCplt+0x234>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0011      	movs	r1, r2
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 fbfe 	bl	80076d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2222      	movs	r2, #34	; 0x22
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2180      	movs	r1, #128	; 0x80
 8006ee6:	0209      	lsls	r1, r1, #8
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	496a      	ldr	r1, [pc, #424]	; (80070a0 <I2C_ITSlaveCplt+0x238>)
 8006ef8:	400a      	ands	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 fa3b 	bl	800737a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	0b9b      	lsrs	r3, r3, #14
 8006f08:	001a      	movs	r2, r3
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4962      	ldr	r1, [pc, #392]	; (80070a4 <I2C_ITSlaveCplt+0x23c>)
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f36:	e018      	b.n	8006f6a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	0bdb      	lsrs	r3, r3, #15
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4013      	ands	r3, r2
 8006f42:	d012      	beq.n	8006f6a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4956      	ldr	r1, [pc, #344]	; (80070a8 <I2C_ITSlaveCplt+0x240>)
 8006f50:	400a      	ands	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	001a      	movs	r2, r3
 8006f70:	2301      	movs	r3, #1
 8006f72:	4013      	ands	r3, r2
 8006f74:	d020      	beq.n	8006fb8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2204      	movs	r2, #4
 8006f7a:	4393      	bics	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2242      	movs	r2, #66	; 0x42
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0011      	movs	r1, r2
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 f8b9 	bl	8007164 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2241      	movs	r2, #65	; 0x41
 8006ff6:	5c9b      	ldrb	r3, [r3, r2]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b28      	cmp	r3, #40	; 0x28
 8006ffc:	d147      	bne.n	800708e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	0011      	movs	r1, r2
 8007004:	0018      	movs	r0, r3
 8007006:	f000 f853 	bl	80070b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800700a:	e040      	b.n	800708e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4a26      	ldr	r2, [pc, #152]	; (80070ac <I2C_ITSlaveCplt+0x244>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d016      	beq.n	8007044 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f7ff febf 	bl	8006d9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a22      	ldr	r2, [pc, #136]	; (80070ac <I2C_ITSlaveCplt+0x244>)
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2241      	movs	r2, #65	; 0x41
 8007028:	2120      	movs	r1, #32
 800702a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	2100      	movs	r1, #0
 8007038:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0018      	movs	r0, r3
 800703e:	f7ff fcdd 	bl	80069fc <HAL_I2C_ListenCpltCallback>
}
 8007042:	e024      	b.n	800708e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2241      	movs	r2, #65	; 0x41
 8007048:	5c9b      	ldrb	r3, [r3, r2]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b22      	cmp	r3, #34	; 0x22
 800704e:	d10f      	bne.n	8007070 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2241      	movs	r2, #65	; 0x41
 8007054:	2120      	movs	r1, #32
 8007056:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2240      	movs	r2, #64	; 0x40
 8007062:	2100      	movs	r1, #0
 8007064:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0018      	movs	r0, r3
 800706a:	f7ff fcaf 	bl	80069cc <HAL_I2C_SlaveRxCpltCallback>
}
 800706e:	e00e      	b.n	800708e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2241      	movs	r2, #65	; 0x41
 8007074:	2120      	movs	r1, #32
 8007076:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	2100      	movs	r1, #0
 8007084:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	0018      	movs	r0, r3
 800708a:	f7ff fc97 	bl	80069bc <HAL_I2C_SlaveTxCpltCallback>
}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	46bd      	mov	sp, r7
 8007092:	b006      	add	sp, #24
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	00008001 	.word	0x00008001
 800709c:	00008002 	.word	0x00008002
 80070a0:	fe00e800 	.word	0xfe00e800
 80070a4:	ffffbfff 	.word	0xffffbfff
 80070a8:	ffff7fff 	.word	0xffff7fff
 80070ac:	ffff0000 	.word	0xffff0000

080070b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <I2C_ITListenCplt+0xac>)
 80070be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2241      	movs	r2, #65	; 0x41
 80070ca:	2120      	movs	r1, #32
 80070cc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2242      	movs	r2, #66	; 0x42
 80070d2:	2100      	movs	r1, #0
 80070d4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	001a      	movs	r2, r3
 80070e2:	2301      	movs	r3, #1
 80070e4:	4013      	ands	r3, r2
 80070e6:	d022      	beq.n	800712e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007104:	2b00      	cmp	r3, #0
 8007106:	d012      	beq.n	800712e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	2204      	movs	r2, #4
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800712e:	4a0c      	ldr	r2, [pc, #48]	; (8007160 <I2C_ITListenCplt+0xb0>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f000 facb 	bl	80076d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2210      	movs	r2, #16
 8007140:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2240      	movs	r2, #64	; 0x40
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	0018      	movs	r0, r3
 800714e:	f7ff fc55 	bl	80069fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b002      	add	sp, #8
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	ffff0000 	.word	0xffff0000
 8007160:	00008003 	.word	0x00008003

08007164 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800716e:	200f      	movs	r0, #15
 8007170:	183b      	adds	r3, r7, r0
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	2141      	movs	r1, #65	; 0x41
 8007176:	5c52      	ldrb	r2, [r2, r1]
 8007178:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2242      	movs	r2, #66	; 0x42
 800717e:	2100      	movs	r1, #0
 8007180:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a62      	ldr	r2, [pc, #392]	; (8007310 <I2C_ITError+0x1ac>)
 8007186:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800719a:	183b      	adds	r3, r7, r0
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b28      	cmp	r3, #40	; 0x28
 80071a0:	d007      	beq.n	80071b2 <I2C_ITError+0x4e>
 80071a2:	183b      	adds	r3, r7, r0
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b29      	cmp	r3, #41	; 0x29
 80071a8:	d003      	beq.n	80071b2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80071aa:	183b      	adds	r3, r7, r0
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b2a      	cmp	r3, #42	; 0x2a
 80071b0:	d10c      	bne.n	80071cc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2103      	movs	r1, #3
 80071b6:	0018      	movs	r0, r3
 80071b8:	f000 fa8a 	bl	80076d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2241      	movs	r2, #65	; 0x41
 80071c0:	2128      	movs	r1, #40	; 0x28
 80071c2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a53      	ldr	r2, [pc, #332]	; (8007314 <I2C_ITError+0x1b0>)
 80071c8:	635a      	str	r2, [r3, #52]	; 0x34
 80071ca:	e012      	b.n	80071f2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071cc:	4a52      	ldr	r2, [pc, #328]	; (8007318 <I2C_ITError+0x1b4>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f000 fa7c 	bl	80076d0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2241      	movs	r2, #65	; 0x41
 80071dc:	5c9b      	ldrb	r3, [r3, r2]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b60      	cmp	r3, #96	; 0x60
 80071e2:	d003      	beq.n	80071ec <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2241      	movs	r2, #65	; 0x41
 80071e8:	2120      	movs	r1, #32
 80071ea:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03b      	beq.n	8007278 <I2C_ITError+0x114>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b11      	cmp	r3, #17
 8007204:	d002      	beq.n	800720c <I2C_ITError+0xa8>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b21      	cmp	r3, #33	; 0x21
 800720a:	d135      	bne.n	8007278 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	2380      	movs	r3, #128	; 0x80
 8007214:	01db      	lsls	r3, r3, #7
 8007216:	401a      	ands	r2, r3
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	01db      	lsls	r3, r3, #7
 800721c:	429a      	cmp	r2, r3
 800721e:	d107      	bne.n	8007230 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	493c      	ldr	r1, [pc, #240]	; (800731c <I2C_ITError+0x1b8>)
 800722c:	400a      	ands	r2, r1
 800722e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	0018      	movs	r0, r3
 8007236:	f7fe fece 	bl	8005fd6 <HAL_DMA_GetState>
 800723a:	0003      	movs	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d016      	beq.n	800726e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	4a36      	ldr	r2, [pc, #216]	; (8007320 <I2C_ITError+0x1bc>)
 8007246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2240      	movs	r2, #64	; 0x40
 800724c:	2100      	movs	r1, #0
 800724e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	0018      	movs	r0, r3
 8007256:	f7fe fe79 	bl	8005f4c <HAL_DMA_Abort_IT>
 800725a:	1e03      	subs	r3, r0, #0
 800725c:	d051      	beq.n	8007302 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	0018      	movs	r0, r3
 800726a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800726c:	e049      	b.n	8007302 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	0018      	movs	r0, r3
 8007272:	f000 f859 	bl	8007328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007276:	e044      	b.n	8007302 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d03b      	beq.n	80072f8 <I2C_ITError+0x194>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b12      	cmp	r3, #18
 8007284:	d002      	beq.n	800728c <I2C_ITError+0x128>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b22      	cmp	r3, #34	; 0x22
 800728a:	d135      	bne.n	80072f8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	401a      	ands	r2, r3
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	429a      	cmp	r2, r3
 800729e:	d107      	bne.n	80072b0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	491e      	ldr	r1, [pc, #120]	; (8007324 <I2C_ITError+0x1c0>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7fe fe8e 	bl	8005fd6 <HAL_DMA_GetState>
 80072ba:	0003      	movs	r3, r0
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d016      	beq.n	80072ee <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <I2C_ITError+0x1bc>)
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2240      	movs	r2, #64	; 0x40
 80072cc:	2100      	movs	r1, #0
 80072ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7fe fe39 	bl	8005f4c <HAL_DMA_Abort_IT>
 80072da:	1e03      	subs	r3, r0, #0
 80072dc:	d013      	beq.n	8007306 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	0018      	movs	r0, r3
 80072ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072ec:	e00b      	b.n	8007306 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f819 	bl	8007328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072f6:	e006      	b.n	8007306 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 f814 	bl	8007328 <I2C_TreatErrorCallback>
  }
}
 8007300:	e002      	b.n	8007308 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	e000      	b.n	8007308 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007306:	46c0      	nop			; (mov r8, r8)
}
 8007308:	46c0      	nop			; (mov r8, r8)
 800730a:	46bd      	mov	sp, r7
 800730c:	b004      	add	sp, #16
 800730e:	bd80      	pop	{r7, pc}
 8007310:	ffff0000 	.word	0xffff0000
 8007314:	08006a2d 	.word	0x08006a2d
 8007318:	00008003 	.word	0x00008003
 800731c:	ffffbfff 	.word	0xffffbfff
 8007320:	080073bf 	.word	0x080073bf
 8007324:	ffff7fff 	.word	0xffff7fff

08007328 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2241      	movs	r2, #65	; 0x41
 8007334:	5c9b      	ldrb	r3, [r3, r2]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b60      	cmp	r3, #96	; 0x60
 800733a:	d10f      	bne.n	800735c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2241      	movs	r2, #65	; 0x41
 8007340:	2120      	movs	r1, #32
 8007342:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	2100      	movs	r1, #0
 8007350:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	0018      	movs	r0, r3
 8007356:	f7ff fb61 	bl	8006a1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800735a:	e00a      	b.n	8007372 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2240      	movs	r2, #64	; 0x40
 8007366:	2100      	movs	r1, #0
 8007368:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	0018      	movs	r0, r3
 800736e:	f7ff fb4d 	bl	8006a0c <HAL_I2C_ErrorCallback>
}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	b002      	add	sp, #8
 8007378:	bd80      	pop	{r7, pc}

0800737a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	2202      	movs	r2, #2
 800738a:	4013      	ands	r3, r2
 800738c:	2b02      	cmp	r3, #2
 800738e:	d103      	bne.n	8007398 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2200      	movs	r2, #0
 8007396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2201      	movs	r2, #1
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d007      	beq.n	80073b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2101      	movs	r1, #1
 80073b2:	430a      	orrs	r2, r1
 80073b4:	619a      	str	r2, [r3, #24]
  }
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b002      	add	sp, #8
 80073bc:	bd80      	pop	{r7, pc}

080073be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	2200      	movs	r2, #0
 80073da:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	2200      	movs	r2, #0
 80073ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f7ff ff9a 	bl	8007328 <I2C_TreatErrorCallback>
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b004      	add	sp, #16
 80073fa:	bd80      	pop	{r7, pc}

080073fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	1dfb      	adds	r3, r7, #7
 800740a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800740c:	e021      	b.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	d01e      	beq.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007414:	f7fe fc8e 	bl	8005d34 <HAL_GetTick>
 8007418:	0002      	movs	r2, r0
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d113      	bne.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	2220      	movs	r2, #32
 8007430:	431a      	orrs	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2241      	movs	r2, #65	; 0x41
 800743a:	2120      	movs	r1, #32
 800743c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2242      	movs	r2, #66	; 0x42
 8007442:	2100      	movs	r1, #0
 8007444:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2240      	movs	r2, #64	; 0x40
 800744a:	2100      	movs	r1, #0
 800744c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e00f      	b.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	4013      	ands	r3, r2
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	425a      	negs	r2, r3
 8007462:	4153      	adcs	r3, r2
 8007464:	b2db      	uxtb	r3, r3
 8007466:	001a      	movs	r2, r3
 8007468:	1dfb      	adds	r3, r7, #7
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d0ce      	beq.n	800740e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	0018      	movs	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	b004      	add	sp, #16
 8007478:	bd80      	pop	{r7, pc}

0800747a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007486:	e02b      	b.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	0018      	movs	r0, r3
 8007490:	f000 f86e 	bl	8007570 <I2C_IsAcknowledgeFailed>
 8007494:	1e03      	subs	r3, r0, #0
 8007496:	d001      	beq.n	800749c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e029      	b.n	80074f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3301      	adds	r3, #1
 80074a0:	d01e      	beq.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a2:	f7fe fc47 	bl	8005d34 <HAL_GetTick>
 80074a6:	0002      	movs	r2, r0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d302      	bcc.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d113      	bne.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	2220      	movs	r2, #32
 80074be:	431a      	orrs	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2241      	movs	r2, #65	; 0x41
 80074c8:	2120      	movs	r1, #32
 80074ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2242      	movs	r2, #66	; 0x42
 80074d0:	2100      	movs	r1, #0
 80074d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2240      	movs	r2, #64	; 0x40
 80074d8:	2100      	movs	r1, #0
 80074da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e007      	b.n	80074f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	2202      	movs	r2, #2
 80074e8:	4013      	ands	r3, r2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d1cc      	bne.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b004      	add	sp, #16
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007504:	e028      	b.n	8007558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f82f 	bl	8007570 <I2C_IsAcknowledgeFailed>
 8007512:	1e03      	subs	r3, r0, #0
 8007514:	d001      	beq.n	800751a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e026      	b.n	8007568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fe fc0b 	bl	8005d34 <HAL_GetTick>
 800751e:	0002      	movs	r2, r0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d113      	bne.n	8007558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007534:	2220      	movs	r2, #32
 8007536:	431a      	orrs	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2241      	movs	r2, #65	; 0x41
 8007540:	2120      	movs	r1, #32
 8007542:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2242      	movs	r2, #66	; 0x42
 8007548:	2100      	movs	r1, #0
 800754a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2240      	movs	r2, #64	; 0x40
 8007550:	2100      	movs	r1, #0
 8007552:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e007      	b.n	8007568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2220      	movs	r2, #32
 8007560:	4013      	ands	r3, r2
 8007562:	2b20      	cmp	r3, #32
 8007564:	d1cf      	bne.n	8007506 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b004      	add	sp, #16
 800756e:	bd80      	pop	{r7, pc}

08007570 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	2210      	movs	r2, #16
 8007584:	4013      	ands	r3, r2
 8007586:	2b10      	cmp	r3, #16
 8007588:	d164      	bne.n	8007654 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	2380      	movs	r3, #128	; 0x80
 8007592:	049b      	lsls	r3, r3, #18
 8007594:	401a      	ands	r2, r3
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	049b      	lsls	r3, r3, #18
 800759a:	429a      	cmp	r2, r3
 800759c:	d02b      	beq.n	80075f6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2180      	movs	r1, #128	; 0x80
 80075aa:	01c9      	lsls	r1, r1, #7
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075b0:	e021      	b.n	80075f6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	3301      	adds	r3, #1
 80075b6:	d01e      	beq.n	80075f6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b8:	f7fe fbbc 	bl	8005d34 <HAL_GetTick>
 80075bc:	0002      	movs	r2, r0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <I2C_IsAcknowledgeFailed+0x5e>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d113      	bne.n	80075f6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	2220      	movs	r2, #32
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2241      	movs	r2, #65	; 0x41
 80075de:	2120      	movs	r1, #32
 80075e0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2242      	movs	r2, #66	; 0x42
 80075e6:	2100      	movs	r1, #0
 80075e8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2240      	movs	r2, #64	; 0x40
 80075ee:	2100      	movs	r1, #0
 80075f0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e02f      	b.n	8007656 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	2220      	movs	r2, #32
 80075fe:	4013      	ands	r3, r2
 8007600:	2b20      	cmp	r3, #32
 8007602:	d1d6      	bne.n	80075b2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2210      	movs	r2, #16
 800760a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2220      	movs	r2, #32
 8007612:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff feaf 	bl	800737a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	490e      	ldr	r1, [pc, #56]	; (8007660 <I2C_IsAcknowledgeFailed+0xf0>)
 8007628:	400a      	ands	r2, r1
 800762a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007630:	2204      	movs	r2, #4
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2241      	movs	r2, #65	; 0x41
 800763c:	2120      	movs	r1, #32
 800763e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2242      	movs	r2, #66	; 0x42
 8007644:	2100      	movs	r1, #0
 8007646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2240      	movs	r2, #64	; 0x40
 800764c:	2100      	movs	r1, #0
 800764e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	0018      	movs	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	b004      	add	sp, #16
 800765c:	bd80      	pop	{r7, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	fe00e800 	.word	0xfe00e800

08007664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007664:	b590      	push	{r4, r7, lr}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	0008      	movs	r0, r1
 800766e:	0011      	movs	r1, r2
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	240a      	movs	r4, #10
 8007674:	193b      	adds	r3, r7, r4
 8007676:	1c02      	adds	r2, r0, #0
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	2009      	movs	r0, #9
 800767c:	183b      	adds	r3, r7, r0
 800767e:	1c0a      	adds	r2, r1, #0
 8007680:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	0d51      	lsrs	r1, r2, #21
 800768c:	2280      	movs	r2, #128	; 0x80
 800768e:	00d2      	lsls	r2, r2, #3
 8007690:	400a      	ands	r2, r1
 8007692:	490e      	ldr	r1, [pc, #56]	; (80076cc <I2C_TransferConfig+0x68>)
 8007694:	430a      	orrs	r2, r1
 8007696:	43d2      	mvns	r2, r2
 8007698:	401a      	ands	r2, r3
 800769a:	0011      	movs	r1, r2
 800769c:	193b      	adds	r3, r7, r4
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	059b      	lsls	r3, r3, #22
 80076a2:	0d9a      	lsrs	r2, r3, #22
 80076a4:	183b      	adds	r3, r7, r0
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	0418      	lsls	r0, r3, #16
 80076aa:	23ff      	movs	r3, #255	; 0xff
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	4003      	ands	r3, r0
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b005      	add	sp, #20
 80076c8:	bd90      	pop	{r4, r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	03ff63ff 	.word	0x03ff63ff

080076d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	000a      	movs	r2, r1
 80076da:	1cbb      	adds	r3, r7, #2
 80076dc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076e2:	1cbb      	adds	r3, r7, #2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	2201      	movs	r2, #1
 80076e8:	4013      	ands	r3, r2
 80076ea:	d010      	beq.n	800770e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2242      	movs	r2, #66	; 0x42
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2241      	movs	r2, #65	; 0x41
 80076f8:	5c9b      	ldrb	r3, [r3, r2]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	001a      	movs	r2, r3
 80076fe:	2328      	movs	r3, #40	; 0x28
 8007700:	4013      	ands	r3, r2
 8007702:	2b28      	cmp	r3, #40	; 0x28
 8007704:	d003      	beq.n	800770e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	22b0      	movs	r2, #176	; 0xb0
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800770e:	1cbb      	adds	r3, r7, #2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	2202      	movs	r2, #2
 8007714:	4013      	ands	r3, r2
 8007716:	d010      	beq.n	800773a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2244      	movs	r2, #68	; 0x44
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2241      	movs	r2, #65	; 0x41
 8007724:	5c9b      	ldrb	r3, [r3, r2]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	001a      	movs	r2, r3
 800772a:	2328      	movs	r3, #40	; 0x28
 800772c:	4013      	ands	r3, r2
 800772e:	2b28      	cmp	r3, #40	; 0x28
 8007730:	d003      	beq.n	800773a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	22b0      	movs	r2, #176	; 0xb0
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800773a:	1cbb      	adds	r3, r7, #2
 800773c:	2200      	movs	r2, #0
 800773e:	5e9b      	ldrsh	r3, [r3, r2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	da03      	bge.n	800774c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	22b8      	movs	r2, #184	; 0xb8
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800774c:	1cbb      	adds	r3, r7, #2
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	2b10      	cmp	r3, #16
 8007752:	d103      	bne.n	800775c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2290      	movs	r2, #144	; 0x90
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800775c:	1cbb      	adds	r3, r7, #2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b20      	cmp	r3, #32
 8007762:	d103      	bne.n	800776c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2220      	movs	r2, #32
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800776c:	1cbb      	adds	r3, r7, #2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d103      	bne.n	800777c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2240      	movs	r2, #64	; 0x40
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	43d9      	mvns	r1, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	400a      	ands	r2, r1
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	46bd      	mov	sp, r7
 8007792:	b004      	add	sp, #16
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2241      	movs	r2, #65	; 0x41
 80077a6:	5c9b      	ldrb	r3, [r3, r2]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d138      	bne.n	8007820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2240      	movs	r2, #64	; 0x40
 80077b2:	5c9b      	ldrb	r3, [r3, r2]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e032      	b.n	8007822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2240      	movs	r2, #64	; 0x40
 80077c0:	2101      	movs	r1, #1
 80077c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2241      	movs	r2, #65	; 0x41
 80077c8:	2124      	movs	r1, #36	; 0x24
 80077ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2101      	movs	r1, #1
 80077d8:	438a      	bics	r2, r1
 80077da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4911      	ldr	r1, [pc, #68]	; (800782c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80077e8:	400a      	ands	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6819      	ldr	r1, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2101      	movs	r1, #1
 8007808:	430a      	orrs	r2, r1
 800780a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2241      	movs	r2, #65	; 0x41
 8007810:	2120      	movs	r1, #32
 8007812:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	2100      	movs	r1, #0
 800781a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	0018      	movs	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	b002      	add	sp, #8
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	ffffefff 	.word	0xffffefff

08007830 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2241      	movs	r2, #65	; 0x41
 800783e:	5c9b      	ldrb	r3, [r3, r2]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b20      	cmp	r3, #32
 8007844:	d139      	bne.n	80078ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	5c9b      	ldrb	r3, [r3, r2]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007850:	2302      	movs	r3, #2
 8007852:	e033      	b.n	80078bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	2101      	movs	r1, #1
 800785a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2241      	movs	r2, #65	; 0x41
 8007860:	2124      	movs	r1, #36	; 0x24
 8007862:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2101      	movs	r1, #1
 8007870:	438a      	bics	r2, r1
 8007872:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007880:	4013      	ands	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2101      	movs	r1, #1
 80078a2:	430a      	orrs	r2, r1
 80078a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2241      	movs	r2, #65	; 0x41
 80078aa:	2120      	movs	r1, #32
 80078ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2240      	movs	r2, #64	; 0x40
 80078b2:	2100      	movs	r1, #0
 80078b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	0018      	movs	r0, r3
 80078be:	46bd      	mov	sp, r7
 80078c0:	b004      	add	sp, #16
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	fffff0ff 	.word	0xfffff0ff

080078c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f000 fb76 	bl	8007fc8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2201      	movs	r2, #1
 80078e2:	4013      	ands	r3, r2
 80078e4:	d100      	bne.n	80078e8 <HAL_RCC_OscConfig+0x20>
 80078e6:	e08e      	b.n	8007a06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80078e8:	4bc5      	ldr	r3, [pc, #788]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	220c      	movs	r2, #12
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d00e      	beq.n	8007912 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80078f4:	4bc2      	ldr	r3, [pc, #776]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	220c      	movs	r2, #12
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d117      	bne.n	8007930 <HAL_RCC_OscConfig+0x68>
 8007900:	4bbf      	ldr	r3, [pc, #764]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	23c0      	movs	r3, #192	; 0xc0
 8007906:	025b      	lsls	r3, r3, #9
 8007908:	401a      	ands	r2, r3
 800790a:	2380      	movs	r3, #128	; 0x80
 800790c:	025b      	lsls	r3, r3, #9
 800790e:	429a      	cmp	r2, r3
 8007910:	d10e      	bne.n	8007930 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007912:	4bbb      	ldr	r3, [pc, #748]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	2380      	movs	r3, #128	; 0x80
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	4013      	ands	r3, r2
 800791c:	d100      	bne.n	8007920 <HAL_RCC_OscConfig+0x58>
 800791e:	e071      	b.n	8007a04 <HAL_RCC_OscConfig+0x13c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d000      	beq.n	800792a <HAL_RCC_OscConfig+0x62>
 8007928:	e06c      	b.n	8007a04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f000 fb4c 	bl	8007fc8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d107      	bne.n	8007948 <HAL_RCC_OscConfig+0x80>
 8007938:	4bb1      	ldr	r3, [pc, #708]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	4bb0      	ldr	r3, [pc, #704]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	0249      	lsls	r1, r1, #9
 8007942:	430a      	orrs	r2, r1
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e02f      	b.n	80079a8 <HAL_RCC_OscConfig+0xe0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10c      	bne.n	800796a <HAL_RCC_OscConfig+0xa2>
 8007950:	4bab      	ldr	r3, [pc, #684]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4baa      	ldr	r3, [pc, #680]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007956:	49ab      	ldr	r1, [pc, #684]	; (8007c04 <HAL_RCC_OscConfig+0x33c>)
 8007958:	400a      	ands	r2, r1
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	4ba8      	ldr	r3, [pc, #672]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	4ba7      	ldr	r3, [pc, #668]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007962:	49a9      	ldr	r1, [pc, #676]	; (8007c08 <HAL_RCC_OscConfig+0x340>)
 8007964:	400a      	ands	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e01e      	b.n	80079a8 <HAL_RCC_OscConfig+0xe0>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b05      	cmp	r3, #5
 8007970:	d10e      	bne.n	8007990 <HAL_RCC_OscConfig+0xc8>
 8007972:	4ba3      	ldr	r3, [pc, #652]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4ba2      	ldr	r3, [pc, #648]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	02c9      	lsls	r1, r1, #11
 800797c:	430a      	orrs	r2, r1
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	4b9f      	ldr	r3, [pc, #636]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	4b9e      	ldr	r3, [pc, #632]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	0249      	lsls	r1, r1, #9
 800798a:	430a      	orrs	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e00b      	b.n	80079a8 <HAL_RCC_OscConfig+0xe0>
 8007990:	4b9b      	ldr	r3, [pc, #620]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	4b9a      	ldr	r3, [pc, #616]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007996:	499b      	ldr	r1, [pc, #620]	; (8007c04 <HAL_RCC_OscConfig+0x33c>)
 8007998:	400a      	ands	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	4b98      	ldr	r3, [pc, #608]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b97      	ldr	r3, [pc, #604]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 80079a2:	4999      	ldr	r1, [pc, #612]	; (8007c08 <HAL_RCC_OscConfig+0x340>)
 80079a4:	400a      	ands	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d014      	beq.n	80079da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b0:	f7fe f9c0 	bl	8005d34 <HAL_GetTick>
 80079b4:	0003      	movs	r3, r0
 80079b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ba:	f7fe f9bb 	bl	8005d34 <HAL_GetTick>
 80079be:	0002      	movs	r2, r0
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b64      	cmp	r3, #100	; 0x64
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e2fd      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079cc:	4b8c      	ldr	r3, [pc, #560]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	4013      	ands	r3, r2
 80079d6:	d0f0      	beq.n	80079ba <HAL_RCC_OscConfig+0xf2>
 80079d8:	e015      	b.n	8007a06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079da:	f7fe f9ab 	bl	8005d34 <HAL_GetTick>
 80079de:	0003      	movs	r3, r0
 80079e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079e4:	f7fe f9a6 	bl	8005d34 <HAL_GetTick>
 80079e8:	0002      	movs	r2, r0
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b64      	cmp	r3, #100	; 0x64
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e2e8      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079f6:	4b82      	ldr	r3, [pc, #520]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	2380      	movs	r3, #128	; 0x80
 80079fc:	029b      	lsls	r3, r3, #10
 80079fe:	4013      	ands	r3, r2
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x11c>
 8007a02:	e000      	b.n	8007a06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d100      	bne.n	8007a12 <HAL_RCC_OscConfig+0x14a>
 8007a10:	e06c      	b.n	8007aec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a12:	4b7b      	ldr	r3, [pc, #492]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	220c      	movs	r2, #12
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a1c:	4b78      	ldr	r3, [pc, #480]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	220c      	movs	r2, #12
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d11f      	bne.n	8007a68 <HAL_RCC_OscConfig+0x1a0>
 8007a28:	4b75      	ldr	r3, [pc, #468]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	23c0      	movs	r3, #192	; 0xc0
 8007a2e:	025b      	lsls	r3, r3, #9
 8007a30:	401a      	ands	r2, r3
 8007a32:	2380      	movs	r3, #128	; 0x80
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d116      	bne.n	8007a68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3a:	4b71      	ldr	r3, [pc, #452]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	4013      	ands	r3, r2
 8007a42:	d005      	beq.n	8007a50 <HAL_RCC_OscConfig+0x188>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e2bb      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a50:	4b6b      	ldr	r3, [pc, #428]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	22f8      	movs	r2, #248	; 0xf8
 8007a56:	4393      	bics	r3, r2
 8007a58:	0019      	movs	r1, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	00da      	lsls	r2, r3, #3
 8007a60:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a62:	430a      	orrs	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a66:	e041      	b.n	8007aec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d024      	beq.n	8007aba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a70:	4b63      	ldr	r3, [pc, #396]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b62      	ldr	r3, [pc, #392]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a76:	2101      	movs	r1, #1
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7c:	f7fe f95a 	bl	8005d34 <HAL_GetTick>
 8007a80:	0003      	movs	r3, r0
 8007a82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a86:	f7fe f955 	bl	8005d34 <HAL_GetTick>
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e297      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a98:	4b59      	ldr	r3, [pc, #356]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d0f1      	beq.n	8007a86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa2:	4b57      	ldr	r3, [pc, #348]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	22f8      	movs	r2, #248	; 0xf8
 8007aa8:	4393      	bics	r3, r2
 8007aaa:	0019      	movs	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	00da      	lsls	r2, r3, #3
 8007ab2:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e018      	b.n	8007aec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aba:	4b51      	ldr	r3, [pc, #324]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b50      	ldr	r3, [pc, #320]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	438a      	bics	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac6:	f7fe f935 	bl	8005d34 <HAL_GetTick>
 8007aca:	0003      	movs	r3, r0
 8007acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ad0:	f7fe f930 	bl	8005d34 <HAL_GetTick>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e272      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ae2:	4b47      	ldr	r3, [pc, #284]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d1f1      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2208      	movs	r2, #8
 8007af2:	4013      	ands	r3, r2
 8007af4:	d036      	beq.n	8007b64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d019      	beq.n	8007b32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007afe:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b02:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b04:	2101      	movs	r1, #1
 8007b06:	430a      	orrs	r2, r1
 8007b08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b0a:	f7fe f913 	bl	8005d34 <HAL_GetTick>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b14:	f7fe f90e 	bl	8005d34 <HAL_GetTick>
 8007b18:	0002      	movs	r2, r0
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e250      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b26:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d0f1      	beq.n	8007b14 <HAL_RCC_OscConfig+0x24c>
 8007b30:	e018      	b.n	8007b64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b32:	4b33      	ldr	r3, [pc, #204]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b36:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b38:	2101      	movs	r1, #1
 8007b3a:	438a      	bics	r2, r1
 8007b3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b3e:	f7fe f8f9 	bl	8005d34 <HAL_GetTick>
 8007b42:	0003      	movs	r3, r0
 8007b44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b48:	f7fe f8f4 	bl	8005d34 <HAL_GetTick>
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e236      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b5a:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2202      	movs	r2, #2
 8007b60:	4013      	ands	r3, r2
 8007b62:	d1f1      	bne.n	8007b48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d100      	bne.n	8007b70 <HAL_RCC_OscConfig+0x2a8>
 8007b6e:	e0b5      	b.n	8007cdc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b70:	201f      	movs	r0, #31
 8007b72:	183b      	adds	r3, r7, r0
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b78:	4b21      	ldr	r3, [pc, #132]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	055b      	lsls	r3, r3, #21
 8007b80:	4013      	ands	r3, r2
 8007b82:	d110      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b84:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b8a:	2180      	movs	r1, #128	; 0x80
 8007b8c:	0549      	lsls	r1, r1, #21
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	61da      	str	r2, [r3, #28]
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	2380      	movs	r3, #128	; 0x80
 8007b98:	055b      	lsls	r3, r3, #21
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007ba0:	183b      	adds	r3, r7, r0
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba6:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <HAL_RCC_OscConfig+0x344>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	2380      	movs	r3, #128	; 0x80
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d11a      	bne.n	8007be8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bb2:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <HAL_RCC_OscConfig+0x344>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <HAL_RCC_OscConfig+0x344>)
 8007bb8:	2180      	movs	r1, #128	; 0x80
 8007bba:	0049      	lsls	r1, r1, #1
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bc0:	f7fe f8b8 	bl	8005d34 <HAL_GetTick>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bca:	f7fe f8b3 	bl	8005d34 <HAL_GetTick>
 8007bce:	0002      	movs	r2, r0
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b64      	cmp	r3, #100	; 0x64
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e1f5      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <HAL_RCC_OscConfig+0x344>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	4013      	ands	r3, r2
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10f      	bne.n	8007c10 <HAL_RCC_OscConfig+0x348>
 8007bf0:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007bf2:	6a1a      	ldr	r2, [r3, #32]
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <HAL_RCC_OscConfig+0x338>)
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	621a      	str	r2, [r3, #32]
 8007bfc:	e036      	b.n	8007c6c <HAL_RCC_OscConfig+0x3a4>
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	40021000 	.word	0x40021000
 8007c04:	fffeffff 	.word	0xfffeffff
 8007c08:	fffbffff 	.word	0xfffbffff
 8007c0c:	40007000 	.word	0x40007000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10c      	bne.n	8007c32 <HAL_RCC_OscConfig+0x36a>
 8007c18:	4bca      	ldr	r3, [pc, #808]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c1a:	6a1a      	ldr	r2, [r3, #32]
 8007c1c:	4bc9      	ldr	r3, [pc, #804]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c1e:	2101      	movs	r1, #1
 8007c20:	438a      	bics	r2, r1
 8007c22:	621a      	str	r2, [r3, #32]
 8007c24:	4bc7      	ldr	r3, [pc, #796]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	4bc6      	ldr	r3, [pc, #792]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c2a:	2104      	movs	r1, #4
 8007c2c:	438a      	bics	r2, r1
 8007c2e:	621a      	str	r2, [r3, #32]
 8007c30:	e01c      	b.n	8007c6c <HAL_RCC_OscConfig+0x3a4>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCC_OscConfig+0x38c>
 8007c3a:	4bc2      	ldr	r3, [pc, #776]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	4bc1      	ldr	r3, [pc, #772]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c40:	2104      	movs	r1, #4
 8007c42:	430a      	orrs	r2, r1
 8007c44:	621a      	str	r2, [r3, #32]
 8007c46:	4bbf      	ldr	r3, [pc, #764]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	4bbe      	ldr	r3, [pc, #760]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	621a      	str	r2, [r3, #32]
 8007c52:	e00b      	b.n	8007c6c <HAL_RCC_OscConfig+0x3a4>
 8007c54:	4bbb      	ldr	r3, [pc, #748]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	4bba      	ldr	r3, [pc, #744]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	438a      	bics	r2, r1
 8007c5e:	621a      	str	r2, [r3, #32]
 8007c60:	4bb8      	ldr	r3, [pc, #736]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c62:	6a1a      	ldr	r2, [r3, #32]
 8007c64:	4bb7      	ldr	r3, [pc, #732]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c66:	2104      	movs	r1, #4
 8007c68:	438a      	bics	r2, r1
 8007c6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d014      	beq.n	8007c9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c74:	f7fe f85e 	bl	8005d34 <HAL_GetTick>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7c:	e009      	b.n	8007c92 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c7e:	f7fe f859 	bl	8005d34 <HAL_GetTick>
 8007c82:	0002      	movs	r2, r0
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	4aaf      	ldr	r2, [pc, #700]	; (8007f48 <HAL_RCC_OscConfig+0x680>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e19a      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c92:	4bac      	ldr	r3, [pc, #688]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2202      	movs	r2, #2
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_OscConfig+0x3b6>
 8007c9c:	e013      	b.n	8007cc6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c9e:	f7fe f849 	bl	8005d34 <HAL_GetTick>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ca6:	e009      	b.n	8007cbc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ca8:	f7fe f844 	bl	8005d34 <HAL_GetTick>
 8007cac:	0002      	movs	r2, r0
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4aa5      	ldr	r2, [pc, #660]	; (8007f48 <HAL_RCC_OscConfig+0x680>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e185      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cbc:	4ba1      	ldr	r3, [pc, #644]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	d1f0      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007cc6:	231f      	movs	r3, #31
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d105      	bne.n	8007cdc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cd0:	4b9c      	ldr	r3, [pc, #624]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	4b9b      	ldr	r3, [pc, #620]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cd6:	499d      	ldr	r1, [pc, #628]	; (8007f4c <HAL_RCC_OscConfig+0x684>)
 8007cd8:	400a      	ands	r2, r1
 8007cda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d063      	beq.n	8007dae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d12a      	bne.n	8007d44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007cee:	4b95      	ldr	r3, [pc, #596]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf2:	4b94      	ldr	r3, [pc, #592]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cf4:	2104      	movs	r1, #4
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007cfa:	4b92      	ldr	r3, [pc, #584]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfe:	4b91      	ldr	r3, [pc, #580]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d00:	2101      	movs	r1, #1
 8007d02:	430a      	orrs	r2, r1
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d06:	f7fe f815 	bl	8005d34 <HAL_GetTick>
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007d10:	f7fe f810 	bl	8005d34 <HAL_GetTick>
 8007d14:	0002      	movs	r2, r0
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e152      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d22:	4b88      	ldr	r3, [pc, #544]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	2202      	movs	r2, #2
 8007d28:	4013      	ands	r3, r2
 8007d2a:	d0f1      	beq.n	8007d10 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007d2c:	4b85      	ldr	r3, [pc, #532]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d30:	22f8      	movs	r2, #248	; 0xf8
 8007d32:	4393      	bics	r3, r2
 8007d34:	0019      	movs	r1, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	00da      	lsls	r2, r3, #3
 8007d3c:	4b81      	ldr	r3, [pc, #516]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34
 8007d42:	e034      	b.n	8007dae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	3305      	adds	r3, #5
 8007d4a:	d111      	bne.n	8007d70 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007d4c:	4b7d      	ldr	r3, [pc, #500]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d50:	4b7c      	ldr	r3, [pc, #496]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d52:	2104      	movs	r1, #4
 8007d54:	438a      	bics	r2, r1
 8007d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007d58:	4b7a      	ldr	r3, [pc, #488]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5c:	22f8      	movs	r2, #248	; 0xf8
 8007d5e:	4393      	bics	r3, r2
 8007d60:	0019      	movs	r1, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	00da      	lsls	r2, r3, #3
 8007d68:	4b76      	ldr	r3, [pc, #472]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8007d6e:	e01e      	b.n	8007dae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007d70:	4b74      	ldr	r3, [pc, #464]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d74:	4b73      	ldr	r3, [pc, #460]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d76:	2104      	movs	r1, #4
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007d7c:	4b71      	ldr	r3, [pc, #452]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d80:	4b70      	ldr	r3, [pc, #448]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007d82:	2101      	movs	r1, #1
 8007d84:	438a      	bics	r2, r1
 8007d86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d88:	f7fd ffd4 	bl	8005d34 <HAL_GetTick>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007d90:	e008      	b.n	8007da4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007d92:	f7fd ffcf 	bl	8005d34 <HAL_GetTick>
 8007d96:	0002      	movs	r2, r0
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e111      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007da4:	4b67      	ldr	r3, [pc, #412]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	2202      	movs	r2, #2
 8007daa:	4013      	ands	r3, r2
 8007dac:	d1f1      	bne.n	8007d92 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2220      	movs	r2, #32
 8007db4:	4013      	ands	r3, r2
 8007db6:	d05c      	beq.n	8007e72 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007db8:	4b62      	ldr	r3, [pc, #392]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	220c      	movs	r2, #12
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b0c      	cmp	r3, #12
 8007dc2:	d00e      	beq.n	8007de2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007dc4:	4b5f      	ldr	r3, [pc, #380]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	220c      	movs	r2, #12
 8007dca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d114      	bne.n	8007dfa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007dd0:	4b5c      	ldr	r3, [pc, #368]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	23c0      	movs	r3, #192	; 0xc0
 8007dd6:	025b      	lsls	r3, r3, #9
 8007dd8:	401a      	ands	r2, r3
 8007dda:	23c0      	movs	r3, #192	; 0xc0
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d10b      	bne.n	8007dfa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007de2:	4b58      	ldr	r3, [pc, #352]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de6:	2380      	movs	r3, #128	; 0x80
 8007de8:	025b      	lsls	r3, r3, #9
 8007dea:	4013      	ands	r3, r2
 8007dec:	d040      	beq.n	8007e70 <HAL_RCC_OscConfig+0x5a8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d03c      	beq.n	8007e70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0e6      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d01b      	beq.n	8007e3a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007e02:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e06:	4b4f      	ldr	r3, [pc, #316]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e08:	2180      	movs	r1, #128	; 0x80
 8007e0a:	0249      	lsls	r1, r1, #9
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e10:	f7fd ff90 	bl	8005d34 <HAL_GetTick>
 8007e14:	0003      	movs	r3, r0
 8007e16:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e1a:	f7fd ff8b 	bl	8005d34 <HAL_GetTick>
 8007e1e:	0002      	movs	r2, r0
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e0cd      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007e2c:	4b45      	ldr	r3, [pc, #276]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e30:	2380      	movs	r3, #128	; 0x80
 8007e32:	025b      	lsls	r3, r3, #9
 8007e34:	4013      	ands	r3, r2
 8007e36:	d0f0      	beq.n	8007e1a <HAL_RCC_OscConfig+0x552>
 8007e38:	e01b      	b.n	8007e72 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007e3a:	4b42      	ldr	r3, [pc, #264]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e3e:	4b41      	ldr	r3, [pc, #260]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e40:	4943      	ldr	r1, [pc, #268]	; (8007f50 <HAL_RCC_OscConfig+0x688>)
 8007e42:	400a      	ands	r2, r1
 8007e44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e46:	f7fd ff75 	bl	8005d34 <HAL_GetTick>
 8007e4a:	0003      	movs	r3, r0
 8007e4c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e50:	f7fd ff70 	bl	8005d34 <HAL_GetTick>
 8007e54:	0002      	movs	r2, r0
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e0b2      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007e62:	4b38      	ldr	r3, [pc, #224]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e66:	2380      	movs	r3, #128	; 0x80
 8007e68:	025b      	lsls	r3, r3, #9
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0x588>
 8007e6e:	e000      	b.n	8007e72 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007e70:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d100      	bne.n	8007e7c <HAL_RCC_OscConfig+0x5b4>
 8007e7a:	e0a4      	b.n	8007fc6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e7c:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	220c      	movs	r2, #12
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d100      	bne.n	8007e8a <HAL_RCC_OscConfig+0x5c2>
 8007e88:	e078      	b.n	8007f7c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d14c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e92:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007e98:	492e      	ldr	r1, [pc, #184]	; (8007f54 <HAL_RCC_OscConfig+0x68c>)
 8007e9a:	400a      	ands	r2, r1
 8007e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e9e:	f7fd ff49 	bl	8005d34 <HAL_GetTick>
 8007ea2:	0003      	movs	r3, r0
 8007ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ea8:	f7fd ff44 	bl	8005d34 <HAL_GetTick>
 8007eac:	0002      	movs	r2, r0
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e086      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eba:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	2380      	movs	r3, #128	; 0x80
 8007ec0:	049b      	lsls	r3, r3, #18
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d1f0      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ec6:	4b1f      	ldr	r3, [pc, #124]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	220f      	movs	r2, #15
 8007ecc:	4393      	bics	r3, r2
 8007ece:	0019      	movs	r1, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <HAL_RCC_OscConfig+0x690>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	431a      	orrs	r2, r3
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef4:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	0449      	lsls	r1, r1, #17
 8007efe:	430a      	orrs	r2, r1
 8007f00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f02:	f7fd ff17 	bl	8005d34 <HAL_GetTick>
 8007f06:	0003      	movs	r3, r0
 8007f08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fd ff12 	bl	8005d34 <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e054      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	049b      	lsls	r3, r3, #18
 8007f26:	4013      	ands	r3, r2
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x644>
 8007f2a:	e04c      	b.n	8007fc6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <HAL_RCC_OscConfig+0x67c>)
 8007f32:	4908      	ldr	r1, [pc, #32]	; (8007f54 <HAL_RCC_OscConfig+0x68c>)
 8007f34:	400a      	ands	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f38:	f7fd fefc 	bl	8005d34 <HAL_GetTick>
 8007f3c:	0003      	movs	r3, r0
 8007f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f40:	e015      	b.n	8007f6e <HAL_RCC_OscConfig+0x6a6>
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	40021000 	.word	0x40021000
 8007f48:	00001388 	.word	0x00001388
 8007f4c:	efffffff 	.word	0xefffffff
 8007f50:	fffeffff 	.word	0xfffeffff
 8007f54:	feffffff 	.word	0xfeffffff
 8007f58:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f5c:	f7fd feea 	bl	8005d34 <HAL_GetTick>
 8007f60:	0002      	movs	r2, r0
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e02c      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <HAL_RCC_OscConfig+0x708>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	2380      	movs	r3, #128	; 0x80
 8007f74:	049b      	lsls	r3, r3, #18
 8007f76:	4013      	ands	r3, r2
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x694>
 8007f7a:	e024      	b.n	8007fc6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e01f      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <HAL_RCC_OscConfig+0x708>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <HAL_RCC_OscConfig+0x708>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	23c0      	movs	r3, #192	; 0xc0
 8007f98:	025b      	lsls	r3, r3, #9
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d10e      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	220f      	movs	r2, #15
 8007fa8:	401a      	ands	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	23f0      	movs	r3, #240	; 0xf0
 8007fb6:	039b      	lsls	r3, r3, #14
 8007fb8:	401a      	ands	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d001      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	0018      	movs	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b008      	add	sp, #32
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40021000 	.word	0x40021000

08007fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0bf      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b61      	ldr	r3, [pc, #388]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2201      	movs	r2, #1
 8007fee:	4013      	ands	r3, r2
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d911      	bls.n	800801a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b5e      	ldr	r3, [pc, #376]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4393      	bics	r3, r2
 8007ffe:	0019      	movs	r1, r3
 8008000:	4b5b      	ldr	r3, [pc, #364]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008008:	4b59      	ldr	r3, [pc, #356]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2201      	movs	r2, #1
 800800e:	4013      	ands	r3, r2
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d001      	beq.n	800801a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e0a6      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2202      	movs	r2, #2
 8008020:	4013      	ands	r3, r2
 8008022:	d015      	beq.n	8008050 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2204      	movs	r2, #4
 800802a:	4013      	ands	r3, r2
 800802c:	d006      	beq.n	800803c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800802e:	4b51      	ldr	r3, [pc, #324]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4b50      	ldr	r3, [pc, #320]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008034:	21e0      	movs	r1, #224	; 0xe0
 8008036:	00c9      	lsls	r1, r1, #3
 8008038:	430a      	orrs	r2, r1
 800803a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800803c:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	22f0      	movs	r2, #240	; 0xf0
 8008042:	4393      	bics	r3, r2
 8008044:	0019      	movs	r1, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	4b4a      	ldr	r3, [pc, #296]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 800804c:	430a      	orrs	r2, r1
 800804e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	4013      	ands	r3, r2
 8008058:	d04c      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d107      	bne.n	8008072 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	4b44      	ldr	r3, [pc, #272]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	2380      	movs	r3, #128	; 0x80
 8008068:	029b      	lsls	r3, r3, #10
 800806a:	4013      	ands	r3, r2
 800806c:	d120      	bne.n	80080b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e07a      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807a:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	049b      	lsls	r3, r3, #18
 8008082:	4013      	ands	r3, r2
 8008084:	d114      	bne.n	80080b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e06e      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d107      	bne.n	80080a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008092:	4b38      	ldr	r3, [pc, #224]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008096:	2380      	movs	r3, #128	; 0x80
 8008098:	025b      	lsls	r3, r3, #9
 800809a:	4013      	ands	r3, r2
 800809c:	d108      	bne.n	80080b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e062      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a2:	4b34      	ldr	r3, [pc, #208]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2202      	movs	r2, #2
 80080a8:	4013      	ands	r3, r2
 80080aa:	d101      	bne.n	80080b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e05b      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080b0:	4b30      	ldr	r3, [pc, #192]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2203      	movs	r2, #3
 80080b6:	4393      	bics	r3, r2
 80080b8:	0019      	movs	r1, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 80080c0:	430a      	orrs	r2, r1
 80080c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c4:	f7fd fe36 	bl	8005d34 <HAL_GetTick>
 80080c8:	0003      	movs	r3, r0
 80080ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080cc:	e009      	b.n	80080e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ce:	f7fd fe31 	bl	8005d34 <HAL_GetTick>
 80080d2:	0002      	movs	r2, r0
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	4a27      	ldr	r2, [pc, #156]	; (8008178 <HAL_RCC_ClockConfig+0x1a4>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e042      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e2:	4b24      	ldr	r3, [pc, #144]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	220c      	movs	r2, #12
 80080e8:	401a      	ands	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d1ec      	bne.n	80080ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080f4:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	4013      	ands	r3, r2
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d211      	bcs.n	8008126 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008102:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2201      	movs	r2, #1
 8008108:	4393      	bics	r3, r2
 800810a:	0019      	movs	r1, r3
 800810c:	4b18      	ldr	r3, [pc, #96]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008114:	4b16      	ldr	r3, [pc, #88]	; (8008170 <HAL_RCC_ClockConfig+0x19c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2201      	movs	r2, #1
 800811a:	4013      	ands	r3, r2
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d001      	beq.n	8008126 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e020      	b.n	8008168 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2204      	movs	r2, #4
 800812c:	4013      	ands	r3, r2
 800812e:	d009      	beq.n	8008144 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b10      	ldr	r3, [pc, #64]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <HAL_RCC_ClockConfig+0x1a8>)
 8008136:	4013      	ands	r3, r2
 8008138:	0019      	movs	r1, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008144:	f000 f820 	bl	8008188 <HAL_RCC_GetSysClockFreq>
 8008148:	0001      	movs	r1, r0
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <HAL_RCC_ClockConfig+0x1a0>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	091b      	lsrs	r3, r3, #4
 8008150:	220f      	movs	r2, #15
 8008152:	4013      	ands	r3, r2
 8008154:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <HAL_RCC_ClockConfig+0x1ac>)
 8008156:	5cd3      	ldrb	r3, [r2, r3]
 8008158:	000a      	movs	r2, r1
 800815a:	40da      	lsrs	r2, r3
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <HAL_RCC_ClockConfig+0x1b0>)
 800815e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008160:	2000      	movs	r0, #0
 8008162:	f7fd fda1 	bl	8005ca8 <HAL_InitTick>
  
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	0018      	movs	r0, r3
 800816a:	46bd      	mov	sp, r7
 800816c:	b004      	add	sp, #16
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40022000 	.word	0x40022000
 8008174:	40021000 	.word	0x40021000
 8008178:	00001388 	.word	0x00001388
 800817c:	fffff8ff 	.word	0xfffff8ff
 8008180:	0800d15c 	.word	0x0800d15c
 8008184:	2000001c 	.word	0x2000001c

08008188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b08f      	sub	sp, #60	; 0x3c
 800818c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800818e:	2314      	movs	r3, #20
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	4a38      	ldr	r2, [pc, #224]	; (8008274 <HAL_RCC_GetSysClockFreq+0xec>)
 8008194:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008196:	c313      	stmia	r3!, {r0, r1, r4}
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800819c:	1d3b      	adds	r3, r7, #4
 800819e:	4a36      	ldr	r2, [pc, #216]	; (8008278 <HAL_RCC_GetSysClockFreq+0xf0>)
 80081a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80081a2:	c313      	stmia	r3!, {r0, r1, r4}
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ac:	2300      	movs	r3, #0
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80081b0:	2300      	movs	r3, #0
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
 80081b4:	2300      	movs	r3, #0
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80081bc:	4b2f      	ldr	r3, [pc, #188]	; (800827c <HAL_RCC_GetSysClockFreq+0xf4>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	220c      	movs	r2, #12
 80081c6:	4013      	ands	r3, r2
 80081c8:	2b0c      	cmp	r3, #12
 80081ca:	d047      	beq.n	800825c <HAL_RCC_GetSysClockFreq+0xd4>
 80081cc:	d849      	bhi.n	8008262 <HAL_RCC_GetSysClockFreq+0xda>
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d002      	beq.n	80081d8 <HAL_RCC_GetSysClockFreq+0x50>
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d003      	beq.n	80081de <HAL_RCC_GetSysClockFreq+0x56>
 80081d6:	e044      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081d8:	4b29      	ldr	r3, [pc, #164]	; (8008280 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80081dc:	e044      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	0c9b      	lsrs	r3, r3, #18
 80081e2:	220f      	movs	r2, #15
 80081e4:	4013      	ands	r3, r2
 80081e6:	2214      	movs	r2, #20
 80081e8:	18ba      	adds	r2, r7, r2
 80081ea:	5cd3      	ldrb	r3, [r2, r3]
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80081ee:	4b23      	ldr	r3, [pc, #140]	; (800827c <HAL_RCC_GetSysClockFreq+0xf4>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	220f      	movs	r2, #15
 80081f4:	4013      	ands	r3, r2
 80081f6:	1d3a      	adds	r2, r7, #4
 80081f8:	5cd3      	ldrb	r3, [r2, r3]
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fe:	23c0      	movs	r3, #192	; 0xc0
 8008200:	025b      	lsls	r3, r3, #9
 8008202:	401a      	ands	r2, r3
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	025b      	lsls	r3, r3, #9
 8008208:	429a      	cmp	r2, r3
 800820a:	d109      	bne.n	8008220 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800820c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820e:	481c      	ldr	r0, [pc, #112]	; (8008280 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008210:	f7f7 ffa0 	bl	8000154 <__udivsi3>
 8008214:	0003      	movs	r3, r0
 8008216:	001a      	movs	r2, r3
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	4353      	muls	r3, r2
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
 800821e:	e01a      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8008220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008222:	23c0      	movs	r3, #192	; 0xc0
 8008224:	025b      	lsls	r3, r3, #9
 8008226:	401a      	ands	r2, r3
 8008228:	23c0      	movs	r3, #192	; 0xc0
 800822a:	025b      	lsls	r3, r3, #9
 800822c:	429a      	cmp	r2, r3
 800822e:	d109      	bne.n	8008244 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008232:	4814      	ldr	r0, [pc, #80]	; (8008284 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008234:	f7f7 ff8e 	bl	8000154 <__udivsi3>
 8008238:	0003      	movs	r3, r0
 800823a:	001a      	movs	r2, r3
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	4353      	muls	r3, r2
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
 8008242:	e008      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008246:	480e      	ldr	r0, [pc, #56]	; (8008280 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008248:	f7f7 ff84 	bl	8000154 <__udivsi3>
 800824c:	0003      	movs	r3, r0
 800824e:	001a      	movs	r2, r3
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	4353      	muls	r3, r2
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800825a:	e005      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800825c:	4b09      	ldr	r3, [pc, #36]	; (8008284 <HAL_RCC_GetSysClockFreq+0xfc>)
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008260:	e002      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008264:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008266:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b00f      	add	sp, #60	; 0x3c
 8008270:	bd90      	pop	{r4, r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	0800cfe8 	.word	0x0800cfe8
 8008278:	0800cff8 	.word	0x0800cff8
 800827c:	40021000 	.word	0x40021000
 8008280:	007a1200 	.word	0x007a1200
 8008284:	02dc6c00 	.word	0x02dc6c00

08008288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	2380      	movs	r3, #128	; 0x80
 800829e:	025b      	lsls	r3, r3, #9
 80082a0:	4013      	ands	r3, r2
 80082a2:	d100      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80082a4:	e08e      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80082a6:	2017      	movs	r0, #23
 80082a8:	183b      	adds	r3, r7, r0
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ae:	4b6e      	ldr	r3, [pc, #440]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80082b0:	69da      	ldr	r2, [r3, #28]
 80082b2:	2380      	movs	r3, #128	; 0x80
 80082b4:	055b      	lsls	r3, r3, #21
 80082b6:	4013      	ands	r3, r2
 80082b8:	d110      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082ba:	4b6b      	ldr	r3, [pc, #428]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	4b6a      	ldr	r3, [pc, #424]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	0549      	lsls	r1, r1, #21
 80082c4:	430a      	orrs	r2, r1
 80082c6:	61da      	str	r2, [r3, #28]
 80082c8:	4b67      	ldr	r3, [pc, #412]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	2380      	movs	r3, #128	; 0x80
 80082ce:	055b      	lsls	r3, r3, #21
 80082d0:	4013      	ands	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]
 80082d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082d6:	183b      	adds	r3, r7, r0
 80082d8:	2201      	movs	r2, #1
 80082da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082dc:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	4013      	ands	r3, r2
 80082e6:	d11a      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082e8:	4b60      	ldr	r3, [pc, #384]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	4b5f      	ldr	r3, [pc, #380]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	0049      	lsls	r1, r1, #1
 80082f2:	430a      	orrs	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082f6:	f7fd fd1d 	bl	8005d34 <HAL_GetTick>
 80082fa:	0003      	movs	r3, r0
 80082fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fe:	e008      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008300:	f7fd fd18 	bl	8005d34 <HAL_GetTick>
 8008304:	0002      	movs	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b64      	cmp	r3, #100	; 0x64
 800830c:	d901      	bls.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e0a6      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008312:	4b56      	ldr	r3, [pc, #344]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	2380      	movs	r3, #128	; 0x80
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4013      	ands	r3, r2
 800831c:	d0f0      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800831e:	4b52      	ldr	r3, [pc, #328]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008320:	6a1a      	ldr	r2, [r3, #32]
 8008322:	23c0      	movs	r3, #192	; 0xc0
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d034      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	23c0      	movs	r3, #192	; 0xc0
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4013      	ands	r3, r2
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	429a      	cmp	r2, r3
 800833e:	d02c      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008340:	4b49      	ldr	r3, [pc, #292]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	4a4a      	ldr	r2, [pc, #296]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008346:	4013      	ands	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800834a:	4b47      	ldr	r3, [pc, #284]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800834c:	6a1a      	ldr	r2, [r3, #32]
 800834e:	4b46      	ldr	r3, [pc, #280]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	0249      	lsls	r1, r1, #9
 8008354:	430a      	orrs	r2, r1
 8008356:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008358:	4b43      	ldr	r3, [pc, #268]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	4b42      	ldr	r3, [pc, #264]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800835e:	4945      	ldr	r1, [pc, #276]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8008360:	400a      	ands	r2, r1
 8008362:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008364:	4b40      	ldr	r3, [pc, #256]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2201      	movs	r2, #1
 800836e:	4013      	ands	r3, r2
 8008370:	d013      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008372:	f7fd fcdf 	bl	8005d34 <HAL_GetTick>
 8008376:	0003      	movs	r3, r0
 8008378:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800837a:	e009      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f7fd fcda 	bl	8005d34 <HAL_GetTick>
 8008380:	0002      	movs	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	4a3c      	ldr	r2, [pc, #240]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e067      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008390:	4b35      	ldr	r3, [pc, #212]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	2202      	movs	r2, #2
 8008396:	4013      	ands	r3, r2
 8008398:	d0f0      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800839a:	4b33      	ldr	r3, [pc, #204]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	4a34      	ldr	r2, [pc, #208]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	0019      	movs	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	4b2f      	ldr	r3, [pc, #188]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083aa:	430a      	orrs	r2, r1
 80083ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083ae:	2317      	movs	r3, #23
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d105      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b8:	4b2b      	ldr	r3, [pc, #172]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083be:	492f      	ldr	r1, [pc, #188]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80083c0:	400a      	ands	r2, r1
 80083c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	4013      	ands	r3, r2
 80083cc:	d009      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083ce:	4b26      	ldr	r3, [pc, #152]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	2203      	movs	r2, #3
 80083d4:	4393      	bics	r3, r2
 80083d6:	0019      	movs	r1, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	4b22      	ldr	r3, [pc, #136]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083de:	430a      	orrs	r2, r1
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2202      	movs	r2, #2
 80083e8:	4013      	ands	r3, r2
 80083ea:	d009      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083ec:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	4a23      	ldr	r2, [pc, #140]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	0019      	movs	r1, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80083fc:	430a      	orrs	r2, r1
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2220      	movs	r2, #32
 8008406:	4013      	ands	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	2210      	movs	r2, #16
 8008410:	4393      	bics	r3, r2
 8008412:	0019      	movs	r1, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	4b13      	ldr	r3, [pc, #76]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800841a:	430a      	orrs	r2, r1
 800841c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	2380      	movs	r3, #128	; 0x80
 8008424:	029b      	lsls	r3, r3, #10
 8008426:	4013      	ands	r3, r2
 8008428:	d009      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800842a:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	2280      	movs	r2, #128	; 0x80
 8008430:	4393      	bics	r3, r2
 8008432:	0019      	movs	r1, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800843a:	430a      	orrs	r2, r1
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	2380      	movs	r3, #128	; 0x80
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4013      	ands	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800844a:	4b07      	ldr	r3, [pc, #28]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	2240      	movs	r2, #64	; 0x40
 8008450:	4393      	bics	r3, r2
 8008452:	0019      	movs	r1, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800845a:	430a      	orrs	r2, r1
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	0018      	movs	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	b006      	add	sp, #24
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40021000 	.word	0x40021000
 800846c:	40007000 	.word	0x40007000
 8008470:	fffffcff 	.word	0xfffffcff
 8008474:	fffeffff 	.word	0xfffeffff
 8008478:	00001388 	.word	0x00001388
 800847c:	efffffff 	.word	0xefffffff
 8008480:	fffcffff 	.word	0xfffcffff

08008484 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e081      	b.n	800859a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7f5b      	ldrb	r3, [r3, #29]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	0018      	movs	r0, r3
 80084aa:	f7fd f849 	bl	8005540 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	22ca      	movs	r2, #202	; 0xca
 80084ba:	625a      	str	r2, [r3, #36]	; 0x24
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2253      	movs	r2, #83	; 0x53
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 f9fb 	bl	80088c2 <RTC_EnterInitMode>
 80084cc:	1e03      	subs	r3, r0, #0
 80084ce:	d008      	beq.n	80084e2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2204      	movs	r2, #4
 80084dc:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e05b      	b.n	800859a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	492d      	ldr	r1, [pc, #180]	; (80085a4 <HAL_RTC_Init+0x120>)
 80084ee:	400a      	ands	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6899      	ldr	r1, [r3, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68d2      	ldr	r2, [r2, #12]
 8008518:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6919      	ldr	r1, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	041a      	lsls	r2, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2180      	movs	r1, #128	; 0x80
 800853a:	438a      	bics	r2, r1
 800853c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2220      	movs	r2, #32
 8008546:	4013      	ands	r3, r2
 8008548:	d10e      	bne.n	8008568 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	0018      	movs	r0, r3
 800854e:	f000 f98f 	bl	8008870 <HAL_RTC_WaitForSynchro>
 8008552:	1e03      	subs	r3, r0, #0
 8008554:	d008      	beq.n	8008568 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	22ff      	movs	r2, #255	; 0xff
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2204      	movs	r2, #4
 8008562:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e018      	b.n	800859a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	490d      	ldr	r1, [pc, #52]	; (80085a8 <HAL_RTC_Init+0x124>)
 8008574:	400a      	ands	r2, r1
 8008576:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	22ff      	movs	r2, #255	; 0xff
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008598:	2300      	movs	r3, #0
  }
}
 800859a:	0018      	movs	r0, r3
 800859c:	46bd      	mov	sp, r7
 800859e:	b002      	add	sp, #8
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	ff8fffbf 	.word	0xff8fffbf
 80085a8:	fffbffff 	.word	0xfffbffff

080085ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	7f1b      	ldrb	r3, [r3, #28]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_RTC_SetTime+0x1c>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e0a5      	b.n	8008714 <HAL_RTC_SetTime+0x168>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2202      	movs	r2, #2
 80085d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d125      	bne.n	8008626 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2240      	movs	r2, #64	; 0x40
 80085e2:	4013      	ands	r3, r2
 80085e4:	d102      	bne.n	80085ec <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2200      	movs	r2, #0
 80085ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	0018      	movs	r0, r3
 80085f2:	f000 f992 	bl	800891a <RTC_ByteToBcd2>
 80085f6:	0003      	movs	r3, r0
 80085f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 f98b 	bl	800891a <RTC_ByteToBcd2>
 8008604:	0003      	movs	r3, r0
 8008606:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008608:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	789b      	ldrb	r3, [r3, #2]
 800860e:	0018      	movs	r0, r3
 8008610:	f000 f983 	bl	800891a <RTC_ByteToBcd2>
 8008614:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008616:	0022      	movs	r2, r4
 8008618:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	78db      	ldrb	r3, [r3, #3]
 800861e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e017      	b.n	8008656 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2240      	movs	r2, #64	; 0x40
 800862e:	4013      	ands	r3, r2
 8008630:	d102      	bne.n	8008638 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2200      	movs	r2, #0
 8008636:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008644:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800864a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	78db      	ldrb	r3, [r3, #3]
 8008650:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	22ca      	movs	r2, #202	; 0xca
 800865c:	625a      	str	r2, [r3, #36]	; 0x24
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2253      	movs	r2, #83	; 0x53
 8008664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	0018      	movs	r0, r3
 800866a:	f000 f92a 	bl	80088c2 <RTC_EnterInitMode>
 800866e:	1e03      	subs	r3, r0, #0
 8008670:	d00b      	beq.n	800868a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	22ff      	movs	r2, #255	; 0xff
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2204      	movs	r2, #4
 800867e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e044      	b.n	8008714 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4922      	ldr	r1, [pc, #136]	; (800871c <HAL_RTC_SetTime+0x170>)
 8008692:	400a      	ands	r2, r1
 8008694:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	491f      	ldr	r1, [pc, #124]	; (8008720 <HAL_RTC_SetTime+0x174>)
 80086a2:	400a      	ands	r2, r1
 80086a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6899      	ldr	r1, [r3, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	438a      	bics	r2, r1
 80086cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2220      	movs	r2, #32
 80086d6:	4013      	ands	r3, r2
 80086d8:	d111      	bne.n	80086fe <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	0018      	movs	r0, r3
 80086de:	f000 f8c7 	bl	8008870 <HAL_RTC_WaitForSynchro>
 80086e2:	1e03      	subs	r3, r0, #0
 80086e4:	d00b      	beq.n	80086fe <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	22ff      	movs	r2, #255	; 0xff
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2204      	movs	r2, #4
 80086f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e00a      	b.n	8008714 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008712:	2300      	movs	r3, #0
  }
}
 8008714:	0018      	movs	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	b007      	add	sp, #28
 800871a:	bd90      	pop	{r4, r7, pc}
 800871c:	007f7f7f 	.word	0x007f7f7f
 8008720:	fffbffff 	.word	0xfffbffff

08008724 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7f1b      	ldrb	r3, [r3, #28]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_RTC_SetDate+0x1c>
 800873c:	2302      	movs	r3, #2
 800873e:	e091      	b.n	8008864 <HAL_RTC_SetDate+0x140>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2202      	movs	r2, #2
 800874a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10e      	bne.n	8008770 <HAL_RTC_SetDate+0x4c>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	001a      	movs	r2, r3
 8008758:	2310      	movs	r3, #16
 800875a:	4013      	ands	r3, r2
 800875c:	d008      	beq.n	8008770 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2210      	movs	r2, #16
 8008764:	4393      	bics	r3, r2
 8008766:	b2db      	uxtb	r3, r3
 8008768:	330a      	adds	r3, #10
 800876a:	b2da      	uxtb	r2, r3
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11c      	bne.n	80087b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	78db      	ldrb	r3, [r3, #3]
 800877a:	0018      	movs	r0, r3
 800877c:	f000 f8cd 	bl	800891a <RTC_ByteToBcd2>
 8008780:	0003      	movs	r3, r0
 8008782:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	0018      	movs	r0, r3
 800878a:	f000 f8c6 	bl	800891a <RTC_ByteToBcd2>
 800878e:	0003      	movs	r3, r0
 8008790:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008792:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	789b      	ldrb	r3, [r3, #2]
 8008798:	0018      	movs	r0, r3
 800879a:	f000 f8be 	bl	800891a <RTC_ByteToBcd2>
 800879e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80087a0:	0022      	movs	r2, r4
 80087a2:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e00e      	b.n	80087ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	78db      	ldrb	r3, [r3, #3]
 80087b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80087bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80087c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	22ca      	movs	r2, #202	; 0xca
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2253      	movs	r2, #83	; 0x53
 80087dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 f86e 	bl	80088c2 <RTC_EnterInitMode>
 80087e6:	1e03      	subs	r3, r0, #0
 80087e8:	d00b      	beq.n	8008802 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	22ff      	movs	r2, #255	; 0xff
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2204      	movs	r2, #4
 80087f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e030      	b.n	8008864 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4918      	ldr	r1, [pc, #96]	; (800886c <HAL_RTC_SetDate+0x148>)
 800880a:	400a      	ands	r2, r1
 800880c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	438a      	bics	r2, r1
 800881c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2220      	movs	r2, #32
 8008826:	4013      	ands	r3, r2
 8008828:	d111      	bne.n	800884e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	0018      	movs	r0, r3
 800882e:	f000 f81f 	bl	8008870 <HAL_RTC_WaitForSynchro>
 8008832:	1e03      	subs	r3, r0, #0
 8008834:	d00b      	beq.n	800884e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	22ff      	movs	r2, #255	; 0xff
 800883c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2204      	movs	r2, #4
 8008842:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e00a      	b.n	8008864 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	22ff      	movs	r2, #255	; 0xff
 8008854:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008862:	2300      	movs	r3, #0
  }
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b007      	add	sp, #28
 800886a:	bd90      	pop	{r4, r7, pc}
 800886c:	00ffff3f 	.word	0x00ffff3f

08008870 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	21a0      	movs	r1, #160	; 0xa0
 8008888:	438a      	bics	r2, r1
 800888a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800888c:	f7fd fa52 	bl	8005d34 <HAL_GetTick>
 8008890:	0003      	movs	r3, r0
 8008892:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008894:	e00a      	b.n	80088ac <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008896:	f7fd fa4d 	bl	8005d34 <HAL_GetTick>
 800889a:	0002      	movs	r2, r0
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	23fa      	movs	r3, #250	; 0xfa
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d901      	bls.n	80088ac <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e006      	b.n	80088ba <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	4013      	ands	r3, r2
 80088b6:	d0ee      	beq.n	8008896 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	0018      	movs	r0, r3
 80088bc:	46bd      	mov	sp, r7
 80088be:	b004      	add	sp, #16
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2240      	movs	r2, #64	; 0x40
 80088d6:	4013      	ands	r3, r2
 80088d8:	d11a      	bne.n	8008910 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2201      	movs	r2, #1
 80088e0:	4252      	negs	r2, r2
 80088e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80088e4:	f7fd fa26 	bl	8005d34 <HAL_GetTick>
 80088e8:	0003      	movs	r3, r0
 80088ea:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088ec:	e00a      	b.n	8008904 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088ee:	f7fd fa21 	bl	8005d34 <HAL_GetTick>
 80088f2:	0002      	movs	r2, r0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	23fa      	movs	r3, #250	; 0xfa
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d901      	bls.n	8008904 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e006      	b.n	8008912 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	2240      	movs	r2, #64	; 0x40
 800890c:	4013      	ands	r3, r2
 800890e:	d0ee      	beq.n	80088ee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	0018      	movs	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	b004      	add	sp, #16
 8008918:	bd80      	pop	{r7, pc}

0800891a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	0002      	movs	r2, r0
 8008922:	1dfb      	adds	r3, r7, #7
 8008924:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800892a:	e007      	b.n	800893c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008932:	1dfb      	adds	r3, r7, #7
 8008934:	1dfa      	adds	r2, r7, #7
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	3a0a      	subs	r2, #10
 800893a:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800893c:	1dfb      	adds	r3, r7, #7
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b09      	cmp	r3, #9
 8008942:	d8f3      	bhi.n	800892c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	b2da      	uxtb	r2, r3
 800894c:	1dfb      	adds	r3, r7, #7
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4313      	orrs	r3, r2
 8008952:	b2db      	uxtb	r3, r3
}
 8008954:	0018      	movs	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	b004      	add	sp, #16
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e042      	b.n	80089f4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	223d      	movs	r2, #61	; 0x3d
 8008972:	5c9b      	ldrb	r3, [r3, r2]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	223c      	movs	r2, #60	; 0x3c
 800897e:	2100      	movs	r1, #0
 8008980:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	0018      	movs	r0, r3
 8008986:	f7fc fdf3 	bl	8005570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	223d      	movs	r2, #61	; 0x3d
 800898e:	2102      	movs	r1, #2
 8008990:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3304      	adds	r3, #4
 800899a:	0019      	movs	r1, r3
 800899c:	0010      	movs	r0, r2
 800899e:	f000 f9e3 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2246      	movs	r2, #70	; 0x46
 80089a6:	2101      	movs	r1, #1
 80089a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	223e      	movs	r2, #62	; 0x3e
 80089ae:	2101      	movs	r1, #1
 80089b0:	5499      	strb	r1, [r3, r2]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	223f      	movs	r2, #63	; 0x3f
 80089b6:	2101      	movs	r1, #1
 80089b8:	5499      	strb	r1, [r3, r2]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	2101      	movs	r1, #1
 80089c0:	5499      	strb	r1, [r3, r2]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2241      	movs	r2, #65	; 0x41
 80089c6:	2101      	movs	r1, #1
 80089c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2242      	movs	r2, #66	; 0x42
 80089ce:	2101      	movs	r1, #1
 80089d0:	5499      	strb	r1, [r3, r2]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2243      	movs	r2, #67	; 0x43
 80089d6:	2101      	movs	r1, #1
 80089d8:	5499      	strb	r1, [r3, r2]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2244      	movs	r2, #68	; 0x44
 80089de:	2101      	movs	r1, #1
 80089e0:	5499      	strb	r1, [r3, r2]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2245      	movs	r2, #69	; 0x45
 80089e6:	2101      	movs	r1, #1
 80089e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	223d      	movs	r2, #61	; 0x3d
 80089ee:	2101      	movs	r1, #1
 80089f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	223d      	movs	r2, #61	; 0x3d
 8008a08:	5c9b      	ldrb	r3, [r3, r2]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d001      	beq.n	8008a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e03b      	b.n	8008a8c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	223d      	movs	r2, #61	; 0x3d
 8008a18:	2102      	movs	r1, #2
 8008a1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2101      	movs	r1, #1
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <HAL_TIM_Base_Start_IT+0x98>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00f      	beq.n	8008a56 <HAL_TIM_Base_Start_IT+0x5a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	05db      	lsls	r3, r3, #23
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_Base_Start_IT+0x5a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a14      	ldr	r2, [pc, #80]	; (8008a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d004      	beq.n	8008a56 <HAL_TIM_Base_Start_IT+0x5a>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d111      	bne.n	8008a7a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	4013      	ands	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d010      	beq.n	8008a8a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2101      	movs	r1, #1
 8008a74:	430a      	orrs	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	e007      	b.n	8008a8a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2101      	movs	r1, #1
 8008a86:	430a      	orrs	r2, r1
 8008a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b004      	add	sp, #16
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40000400 	.word	0x40000400
 8008a9c:	40014000 	.word	0x40014000

08008aa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	438a      	bics	r2, r1
 8008ab6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	4a0d      	ldr	r2, [pc, #52]	; (8008af4 <HAL_TIM_Base_Stop_IT+0x54>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	d10d      	bne.n	8008ae0 <HAL_TIM_Base_Stop_IT+0x40>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <HAL_TIM_Base_Stop_IT+0x58>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	d107      	bne.n	8008ae0 <HAL_TIM_Base_Stop_IT+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2101      	movs	r1, #1
 8008adc:	438a      	bics	r2, r1
 8008ade:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	223d      	movs	r2, #61	; 0x3d
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b002      	add	sp, #8
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	00001111 	.word	0x00001111
 8008af8:	00000444 	.word	0x00000444

08008afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d124      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d11d      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2203      	movs	r2, #3
 8008b26:	4252      	negs	r2, r2
 8008b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	2203      	movs	r2, #3
 8008b38:	4013      	ands	r3, r2
 8008b3a:	d004      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f000 f8fa 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008b44:	e007      	b.n	8008b56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 f8ed 	bl	8008d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	0018      	movs	r0, r3
 8008b52:	f000 f8f9 	bl	8008d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2204      	movs	r2, #4
 8008b64:	4013      	ands	r3, r2
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d125      	bne.n	8008bb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	2204      	movs	r2, #4
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d11e      	bne.n	8008bb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2205      	movs	r2, #5
 8008b7e:	4252      	negs	r2, r2
 8008b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	23c0      	movs	r3, #192	; 0xc0
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4013      	ands	r3, r2
 8008b94:	d004      	beq.n	8008ba0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f000 f8cd 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008b9e:	e007      	b.n	8008bb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f000 f8c0 	bl	8008d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	0018      	movs	r0, r3
 8008bac:	f000 f8cc 	bl	8008d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d124      	bne.n	8008c0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2208      	movs	r2, #8
 8008bcc:	4013      	ands	r3, r2
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d11d      	bne.n	8008c0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2209      	movs	r2, #9
 8008bd8:	4252      	negs	r2, r2
 8008bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2204      	movs	r2, #4
 8008be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	2203      	movs	r2, #3
 8008bea:	4013      	ands	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f000 f8a1 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008bf6:	e007      	b.n	8008c08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 f894 	bl	8008d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	0018      	movs	r0, r3
 8008c04:	f000 f8a0 	bl	8008d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2210      	movs	r2, #16
 8008c16:	4013      	ands	r3, r2
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	d125      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	2210      	movs	r2, #16
 8008c24:	4013      	ands	r3, r2
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d11e      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2211      	movs	r2, #17
 8008c30:	4252      	negs	r2, r2
 8008c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2208      	movs	r2, #8
 8008c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	23c0      	movs	r3, #192	; 0xc0
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4013      	ands	r3, r2
 8008c46:	d004      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f000 f874 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e007      	b.n	8008c62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0018      	movs	r0, r3
 8008c56:	f000 f867 	bl	8008d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f000 f873 	bl	8008d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4013      	ands	r3, r2
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d10f      	bne.n	8008c96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d108      	bne.n	8008c96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	4252      	negs	r2, r2
 8008c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7fb f833 	bl	8003cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b80      	cmp	r3, #128	; 0x80
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2280      	movs	r2, #128	; 0x80
 8008cac:	4013      	ands	r3, r2
 8008cae:	2b80      	cmp	r3, #128	; 0x80
 8008cb0:	d108      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2281      	movs	r2, #129	; 0x81
 8008cb8:	4252      	negs	r2, r2
 8008cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f000 f938 	bl	8008f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d10f      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2240      	movs	r2, #64	; 0x40
 8008cda:	4013      	ands	r3, r2
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d108      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2241      	movs	r2, #65	; 0x41
 8008ce6:	4252      	negs	r2, r2
 8008ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 f833 	bl	8008d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d10f      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	2220      	movs	r2, #32
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d108      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2221      	movs	r2, #33	; 0x21
 8008d14:	4252      	negs	r2, r2
 8008d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f000 f902 	bl	8008f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d20:	46c0      	nop			; (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b002      	add	sp, #8
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d30:	46c0      	nop			; (mov r8, r8)
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b002      	add	sp, #8
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d40:	46c0      	nop			; (mov r8, r8)
 8008d42:	46bd      	mov	sp, r7
 8008d44:	b002      	add	sp, #8
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d50:	46c0      	nop			; (mov r8, r8)
 8008d52:	46bd      	mov	sp, r7
 8008d54:	b002      	add	sp, #8
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d60:	46c0      	nop			; (mov r8, r8)
 8008d62:	46bd      	mov	sp, r7
 8008d64:	b002      	add	sp, #8
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a34      	ldr	r2, [pc, #208]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d008      	beq.n	8008d92 <TIM_Base_SetConfig+0x2a>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	2380      	movs	r3, #128	; 0x80
 8008d84:	05db      	lsls	r3, r3, #23
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d003      	beq.n	8008d92 <TIM_Base_SetConfig+0x2a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a30      	ldr	r2, [pc, #192]	; (8008e50 <TIM_Base_SetConfig+0xe8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d108      	bne.n	8008da4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2270      	movs	r2, #112	; 0x70
 8008d96:	4393      	bics	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d018      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	2380      	movs	r3, #128	; 0x80
 8008db0:	05db      	lsls	r3, r3, #23
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d013      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a25      	ldr	r2, [pc, #148]	; (8008e50 <TIM_Base_SetConfig+0xe8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00f      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a24      	ldr	r2, [pc, #144]	; (8008e54 <TIM_Base_SetConfig+0xec>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00b      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a23      	ldr	r2, [pc, #140]	; (8008e58 <TIM_Base_SetConfig+0xf0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <TIM_Base_SetConfig+0xf4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_Base_SetConfig+0x76>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <TIM_Base_SetConfig+0xf8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d108      	bne.n	8008df0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a20      	ldr	r2, [pc, #128]	; (8008e64 <TIM_Base_SetConfig+0xfc>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2280      	movs	r2, #128	; 0x80
 8008df4:	4393      	bics	r3, r2
 8008df6:	001a      	movs	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <TIM_Base_SetConfig+0xe4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00b      	beq.n	8008e36 <TIM_Base_SetConfig+0xce>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a0d      	ldr	r2, [pc, #52]	; (8008e58 <TIM_Base_SetConfig+0xf0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d007      	beq.n	8008e36 <TIM_Base_SetConfig+0xce>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <TIM_Base_SetConfig+0xf4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d003      	beq.n	8008e36 <TIM_Base_SetConfig+0xce>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a0b      	ldr	r2, [pc, #44]	; (8008e60 <TIM_Base_SetConfig+0xf8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d103      	bne.n	8008e3e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	615a      	str	r2, [r3, #20]
}
 8008e44:	46c0      	nop			; (mov r8, r8)
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b004      	add	sp, #16
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40012c00 	.word	0x40012c00
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40002000 	.word	0x40002000
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	40014400 	.word	0x40014400
 8008e60:	40014800 	.word	0x40014800
 8008e64:	fffffcff 	.word	0xfffffcff

08008e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	223c      	movs	r2, #60	; 0x3c
 8008e76:	5c9b      	ldrb	r3, [r3, r2]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e047      	b.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	223c      	movs	r2, #60	; 0x3c
 8008e84:	2101      	movs	r1, #1
 8008e86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	223d      	movs	r2, #61	; 0x3d
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2270      	movs	r2, #112	; 0x70
 8008ea4:	4393      	bics	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00f      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	2380      	movs	r3, #128	; 0x80
 8008eca:	05db      	lsls	r3, r3, #23
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d009      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a11      	ldr	r2, [pc, #68]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d10c      	bne.n	8008efe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2280      	movs	r2, #128	; 0x80
 8008ee8:	4393      	bics	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	223d      	movs	r2, #61	; 0x3d
 8008f02:	2101      	movs	r1, #1
 8008f04:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	223c      	movs	r2, #60	; 0x3c
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b004      	add	sp, #16
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40012c00 	.word	0x40012c00
 8008f1c:	40000400 	.word	0x40000400
 8008f20:	40014000 	.word	0x40014000

08008f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f2c:	46c0      	nop			; (mov r8, r8)
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b002      	add	sp, #8
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f3c:	46c0      	nop			; (mov r8, r8)
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b002      	add	sp, #8
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e074      	b.n	8009040 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	223c      	movs	r2, #60	; 0x3c
 8008f5a:	5c9b      	ldrb	r3, [r3, r2]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d107      	bne.n	8008f72 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	223d      	movs	r2, #61	; 0x3d
 8008f66:	2100      	movs	r1, #0
 8008f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7fc fb43 	bl	80055f8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	223c      	movs	r2, #60	; 0x3c
 8008f76:	2102      	movs	r1, #2
 8008f78:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8008f90:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8008f98:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8008f9e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8008fa4:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8008faa:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8008fb0:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8008fb6:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	7b1b      	ldrb	r3, [r3, #12]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d108      	bne.n	8008fda <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2180      	movs	r1, #128	; 0x80
 8008fd4:	0249      	lsls	r1, r1, #9
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	43d2      	mvns	r2, r2
 8008ff0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800900a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681c      	ldr	r4, [r3, #0]
 8009014:	0010      	movs	r0, r2
 8009016:	f000 f817 	bl	8009048 <TSC_extract_groups>
 800901a:	0003      	movs	r3, r0
 800901c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2103      	movs	r1, #3
 800902a:	438a      	bics	r2, r1
 800902c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2203      	movs	r2, #3
 8009034:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	223c      	movs	r2, #60	; 0x3c
 800903a:	2101      	movs	r1, #1
 800903c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	0018      	movs	r0, r3
 8009042:	46bd      	mov	sp, r7
 8009044:	b003      	add	sp, #12
 8009046:	bd90      	pop	{r4, r7, pc}

08009048 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	e011      	b.n	800907e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	220f      	movs	r2, #15
 8009060:	409a      	lsls	r2, r3
 8009062:	0013      	movs	r3, r2
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	4013      	ands	r3, r2
 8009068:	d006      	beq.n	8009078 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800906a:	2201      	movs	r2, #1
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	409a      	lsls	r2, r3
 8009070:	0013      	movs	r3, r2
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4313      	orrs	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3301      	adds	r3, #1
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b07      	cmp	r3, #7
 8009082:	d9ea      	bls.n	800905a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8009084:	68fb      	ldr	r3, [r7, #12]
}
 8009086:	0018      	movs	r0, r3
 8009088:	46bd      	mov	sp, r7
 800908a:	b004      	add	sp, #16
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <__errno>:
 8009090:	4b01      	ldr	r3, [pc, #4]	; (8009098 <__errno+0x8>)
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	4770      	bx	lr
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	20000028 	.word	0x20000028

0800909c <__libc_init_array>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	2600      	movs	r6, #0
 80090a0:	4d0c      	ldr	r5, [pc, #48]	; (80090d4 <__libc_init_array+0x38>)
 80090a2:	4c0d      	ldr	r4, [pc, #52]	; (80090d8 <__libc_init_array+0x3c>)
 80090a4:	1b64      	subs	r4, r4, r5
 80090a6:	10a4      	asrs	r4, r4, #2
 80090a8:	42a6      	cmp	r6, r4
 80090aa:	d109      	bne.n	80090c0 <__libc_init_array+0x24>
 80090ac:	2600      	movs	r6, #0
 80090ae:	f003 f971 	bl	800c394 <_init>
 80090b2:	4d0a      	ldr	r5, [pc, #40]	; (80090dc <__libc_init_array+0x40>)
 80090b4:	4c0a      	ldr	r4, [pc, #40]	; (80090e0 <__libc_init_array+0x44>)
 80090b6:	1b64      	subs	r4, r4, r5
 80090b8:	10a4      	asrs	r4, r4, #2
 80090ba:	42a6      	cmp	r6, r4
 80090bc:	d105      	bne.n	80090ca <__libc_init_array+0x2e>
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	00b3      	lsls	r3, r6, #2
 80090c2:	58eb      	ldr	r3, [r5, r3]
 80090c4:	4798      	blx	r3
 80090c6:	3601      	adds	r6, #1
 80090c8:	e7ee      	b.n	80090a8 <__libc_init_array+0xc>
 80090ca:	00b3      	lsls	r3, r6, #2
 80090cc:	58eb      	ldr	r3, [r5, r3]
 80090ce:	4798      	blx	r3
 80090d0:	3601      	adds	r6, #1
 80090d2:	e7f2      	b.n	80090ba <__libc_init_array+0x1e>
 80090d4:	0800d608 	.word	0x0800d608
 80090d8:	0800d608 	.word	0x0800d608
 80090dc:	0800d608 	.word	0x0800d608
 80090e0:	0800d60c 	.word	0x0800d60c

080090e4 <malloc>:
 80090e4:	b510      	push	{r4, lr}
 80090e6:	4b03      	ldr	r3, [pc, #12]	; (80090f4 <malloc+0x10>)
 80090e8:	0001      	movs	r1, r0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	f000 f86a 	bl	80091c4 <_malloc_r>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	20000028 	.word	0x20000028

080090f8 <free>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4b03      	ldr	r3, [pc, #12]	; (8009108 <free+0x10>)
 80090fc:	0001      	movs	r1, r0
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	f000 f816 	bl	8009130 <_free_r>
 8009104:	bd10      	pop	{r4, pc}
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	20000028 	.word	0x20000028

0800910c <memcpy>:
 800910c:	2300      	movs	r3, #0
 800910e:	b510      	push	{r4, lr}
 8009110:	429a      	cmp	r2, r3
 8009112:	d100      	bne.n	8009116 <memcpy+0xa>
 8009114:	bd10      	pop	{r4, pc}
 8009116:	5ccc      	ldrb	r4, [r1, r3]
 8009118:	54c4      	strb	r4, [r0, r3]
 800911a:	3301      	adds	r3, #1
 800911c:	e7f8      	b.n	8009110 <memcpy+0x4>

0800911e <memset>:
 800911e:	0003      	movs	r3, r0
 8009120:	1882      	adds	r2, r0, r2
 8009122:	4293      	cmp	r3, r2
 8009124:	d100      	bne.n	8009128 <memset+0xa>
 8009126:	4770      	bx	lr
 8009128:	7019      	strb	r1, [r3, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	e7f9      	b.n	8009122 <memset+0x4>
	...

08009130 <_free_r>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	0005      	movs	r5, r0
 8009134:	2900      	cmp	r1, #0
 8009136:	d010      	beq.n	800915a <_free_r+0x2a>
 8009138:	1f0c      	subs	r4, r1, #4
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	da00      	bge.n	8009142 <_free_r+0x12>
 8009140:	18e4      	adds	r4, r4, r3
 8009142:	0028      	movs	r0, r5
 8009144:	f001 fc02 	bl	800a94c <__malloc_lock>
 8009148:	4a1d      	ldr	r2, [pc, #116]	; (80091c0 <_free_r+0x90>)
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <_free_r+0x2c>
 8009150:	6063      	str	r3, [r4, #4]
 8009152:	6014      	str	r4, [r2, #0]
 8009154:	0028      	movs	r0, r5
 8009156:	f001 fc01 	bl	800a95c <__malloc_unlock>
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	42a3      	cmp	r3, r4
 800915e:	d908      	bls.n	8009172 <_free_r+0x42>
 8009160:	6821      	ldr	r1, [r4, #0]
 8009162:	1860      	adds	r0, r4, r1
 8009164:	4283      	cmp	r3, r0
 8009166:	d1f3      	bne.n	8009150 <_free_r+0x20>
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	1841      	adds	r1, r0, r1
 800916e:	6021      	str	r1, [r4, #0]
 8009170:	e7ee      	b.n	8009150 <_free_r+0x20>
 8009172:	001a      	movs	r2, r3
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <_free_r+0x4e>
 800917a:	42a3      	cmp	r3, r4
 800917c:	d9f9      	bls.n	8009172 <_free_r+0x42>
 800917e:	6811      	ldr	r1, [r2, #0]
 8009180:	1850      	adds	r0, r2, r1
 8009182:	42a0      	cmp	r0, r4
 8009184:	d10b      	bne.n	800919e <_free_r+0x6e>
 8009186:	6820      	ldr	r0, [r4, #0]
 8009188:	1809      	adds	r1, r1, r0
 800918a:	1850      	adds	r0, r2, r1
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	4283      	cmp	r3, r0
 8009190:	d1e0      	bne.n	8009154 <_free_r+0x24>
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	1841      	adds	r1, r0, r1
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	6053      	str	r3, [r2, #4]
 800919c:	e7da      	b.n	8009154 <_free_r+0x24>
 800919e:	42a0      	cmp	r0, r4
 80091a0:	d902      	bls.n	80091a8 <_free_r+0x78>
 80091a2:	230c      	movs	r3, #12
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	e7d5      	b.n	8009154 <_free_r+0x24>
 80091a8:	6821      	ldr	r1, [r4, #0]
 80091aa:	1860      	adds	r0, r4, r1
 80091ac:	4283      	cmp	r3, r0
 80091ae:	d103      	bne.n	80091b8 <_free_r+0x88>
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	1841      	adds	r1, r0, r1
 80091b6:	6021      	str	r1, [r4, #0]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	6054      	str	r4, [r2, #4]
 80091bc:	e7ca      	b.n	8009154 <_free_r+0x24>
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	20000278 	.word	0x20000278

080091c4 <_malloc_r>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	2303      	movs	r3, #3
 80091c8:	1ccd      	adds	r5, r1, #3
 80091ca:	439d      	bics	r5, r3
 80091cc:	3508      	adds	r5, #8
 80091ce:	0006      	movs	r6, r0
 80091d0:	2d0c      	cmp	r5, #12
 80091d2:	d21f      	bcs.n	8009214 <_malloc_r+0x50>
 80091d4:	250c      	movs	r5, #12
 80091d6:	42a9      	cmp	r1, r5
 80091d8:	d81e      	bhi.n	8009218 <_malloc_r+0x54>
 80091da:	0030      	movs	r0, r6
 80091dc:	f001 fbb6 	bl	800a94c <__malloc_lock>
 80091e0:	4925      	ldr	r1, [pc, #148]	; (8009278 <_malloc_r+0xb4>)
 80091e2:	680a      	ldr	r2, [r1, #0]
 80091e4:	0014      	movs	r4, r2
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d11a      	bne.n	8009220 <_malloc_r+0x5c>
 80091ea:	4f24      	ldr	r7, [pc, #144]	; (800927c <_malloc_r+0xb8>)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <_malloc_r+0x38>
 80091f2:	0021      	movs	r1, r4
 80091f4:	0030      	movs	r0, r6
 80091f6:	f000 f8bb 	bl	8009370 <_sbrk_r>
 80091fa:	6038      	str	r0, [r7, #0]
 80091fc:	0029      	movs	r1, r5
 80091fe:	0030      	movs	r0, r6
 8009200:	f000 f8b6 	bl	8009370 <_sbrk_r>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d12b      	bne.n	8009260 <_malloc_r+0x9c>
 8009208:	230c      	movs	r3, #12
 800920a:	0030      	movs	r0, r6
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	f001 fba5 	bl	800a95c <__malloc_unlock>
 8009212:	e003      	b.n	800921c <_malloc_r+0x58>
 8009214:	2d00      	cmp	r5, #0
 8009216:	dade      	bge.n	80091d6 <_malloc_r+0x12>
 8009218:	230c      	movs	r3, #12
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	2000      	movs	r0, #0
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	1b5b      	subs	r3, r3, r5
 8009224:	d419      	bmi.n	800925a <_malloc_r+0x96>
 8009226:	2b0b      	cmp	r3, #11
 8009228:	d903      	bls.n	8009232 <_malloc_r+0x6e>
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	18e4      	adds	r4, r4, r3
 800922e:	6025      	str	r5, [r4, #0]
 8009230:	e003      	b.n	800923a <_malloc_r+0x76>
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	42a2      	cmp	r2, r4
 8009236:	d10e      	bne.n	8009256 <_malloc_r+0x92>
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	0030      	movs	r0, r6
 800923c:	f001 fb8e 	bl	800a95c <__malloc_unlock>
 8009240:	0020      	movs	r0, r4
 8009242:	2207      	movs	r2, #7
 8009244:	300b      	adds	r0, #11
 8009246:	1d23      	adds	r3, r4, #4
 8009248:	4390      	bics	r0, r2
 800924a:	1ac2      	subs	r2, r0, r3
 800924c:	4298      	cmp	r0, r3
 800924e:	d0e6      	beq.n	800921e <_malloc_r+0x5a>
 8009250:	1a1b      	subs	r3, r3, r0
 8009252:	50a3      	str	r3, [r4, r2]
 8009254:	e7e3      	b.n	800921e <_malloc_r+0x5a>
 8009256:	6053      	str	r3, [r2, #4]
 8009258:	e7ef      	b.n	800923a <_malloc_r+0x76>
 800925a:	0022      	movs	r2, r4
 800925c:	6864      	ldr	r4, [r4, #4]
 800925e:	e7c2      	b.n	80091e6 <_malloc_r+0x22>
 8009260:	2303      	movs	r3, #3
 8009262:	1cc4      	adds	r4, r0, #3
 8009264:	439c      	bics	r4, r3
 8009266:	42a0      	cmp	r0, r4
 8009268:	d0e1      	beq.n	800922e <_malloc_r+0x6a>
 800926a:	1a21      	subs	r1, r4, r0
 800926c:	0030      	movs	r0, r6
 800926e:	f000 f87f 	bl	8009370 <_sbrk_r>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d1db      	bne.n	800922e <_malloc_r+0x6a>
 8009276:	e7c7      	b.n	8009208 <_malloc_r+0x44>
 8009278:	20000278 	.word	0x20000278
 800927c:	2000027c 	.word	0x2000027c

08009280 <srand>:
 8009280:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <srand+0x48>)
 8009282:	b570      	push	{r4, r5, r6, lr}
 8009284:	681d      	ldr	r5, [r3, #0]
 8009286:	0004      	movs	r4, r0
 8009288:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800928a:	2b00      	cmp	r3, #0
 800928c:	d116      	bne.n	80092bc <srand+0x3c>
 800928e:	2018      	movs	r0, #24
 8009290:	f7ff ff28 	bl	80090e4 <malloc>
 8009294:	1e02      	subs	r2, r0, #0
 8009296:	63a8      	str	r0, [r5, #56]	; 0x38
 8009298:	d104      	bne.n	80092a4 <srand+0x24>
 800929a:	2142      	movs	r1, #66	; 0x42
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <srand+0x4c>)
 800929e:	480c      	ldr	r0, [pc, #48]	; (80092d0 <srand+0x50>)
 80092a0:	f000 ff7c 	bl	800a19c <__assert_func>
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <srand+0x54>)
 80092a6:	2100      	movs	r1, #0
 80092a8:	6003      	str	r3, [r0, #0]
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <srand+0x58>)
 80092ac:	6043      	str	r3, [r0, #4]
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <srand+0x5c>)
 80092b0:	6083      	str	r3, [r0, #8]
 80092b2:	230b      	movs	r3, #11
 80092b4:	8183      	strh	r3, [r0, #12]
 80092b6:	2001      	movs	r0, #1
 80092b8:	6110      	str	r0, [r2, #16]
 80092ba:	6151      	str	r1, [r2, #20]
 80092bc:	2200      	movs	r2, #0
 80092be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80092c0:	611c      	str	r4, [r3, #16]
 80092c2:	615a      	str	r2, [r3, #20]
 80092c4:	bd70      	pop	{r4, r5, r6, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	20000028 	.word	0x20000028
 80092cc:	0800d274 	.word	0x0800d274
 80092d0:	0800d28b 	.word	0x0800d28b
 80092d4:	abcd330e 	.word	0xabcd330e
 80092d8:	e66d1234 	.word	0xe66d1234
 80092dc:	0005deec 	.word	0x0005deec

080092e0 <rand>:
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <rand+0x5c>)
 80092e2:	b510      	push	{r4, lr}
 80092e4:	681c      	ldr	r4, [r3, #0]
 80092e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d116      	bne.n	800931a <rand+0x3a>
 80092ec:	2018      	movs	r0, #24
 80092ee:	f7ff fef9 	bl	80090e4 <malloc>
 80092f2:	1e02      	subs	r2, r0, #0
 80092f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80092f6:	d104      	bne.n	8009302 <rand+0x22>
 80092f8:	214e      	movs	r1, #78	; 0x4e
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <rand+0x60>)
 80092fc:	4811      	ldr	r0, [pc, #68]	; (8009344 <rand+0x64>)
 80092fe:	f000 ff4d 	bl	800a19c <__assert_func>
 8009302:	4b11      	ldr	r3, [pc, #68]	; (8009348 <rand+0x68>)
 8009304:	2100      	movs	r1, #0
 8009306:	6003      	str	r3, [r0, #0]
 8009308:	4b10      	ldr	r3, [pc, #64]	; (800934c <rand+0x6c>)
 800930a:	6043      	str	r3, [r0, #4]
 800930c:	4b10      	ldr	r3, [pc, #64]	; (8009350 <rand+0x70>)
 800930e:	6083      	str	r3, [r0, #8]
 8009310:	230b      	movs	r3, #11
 8009312:	8183      	strh	r3, [r0, #12]
 8009314:	2001      	movs	r0, #1
 8009316:	6110      	str	r0, [r2, #16]
 8009318:	6151      	str	r1, [r2, #20]
 800931a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800931c:	4a0d      	ldr	r2, [pc, #52]	; (8009354 <rand+0x74>)
 800931e:	6920      	ldr	r0, [r4, #16]
 8009320:	6961      	ldr	r1, [r4, #20]
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <rand+0x78>)
 8009324:	f7f7 f8ca 	bl	80004bc <__aeabi_lmul>
 8009328:	2201      	movs	r2, #1
 800932a:	2300      	movs	r3, #0
 800932c:	1880      	adds	r0, r0, r2
 800932e:	4159      	adcs	r1, r3
 8009330:	6120      	str	r0, [r4, #16]
 8009332:	6161      	str	r1, [r4, #20]
 8009334:	0048      	lsls	r0, r1, #1
 8009336:	0840      	lsrs	r0, r0, #1
 8009338:	bd10      	pop	{r4, pc}
 800933a:	46c0      	nop			; (mov r8, r8)
 800933c:	20000028 	.word	0x20000028
 8009340:	0800d274 	.word	0x0800d274
 8009344:	0800d28b 	.word	0x0800d28b
 8009348:	abcd330e 	.word	0xabcd330e
 800934c:	e66d1234 	.word	0xe66d1234
 8009350:	0005deec 	.word	0x0005deec
 8009354:	4c957f2d 	.word	0x4c957f2d
 8009358:	5851f42d 	.word	0x5851f42d

0800935c <realloc>:
 800935c:	b510      	push	{r4, lr}
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <realloc+0x10>)
 8009360:	000a      	movs	r2, r1
 8009362:	0001      	movs	r1, r0
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	f001 ffd9 	bl	800b31c <_realloc_r>
 800936a:	bd10      	pop	{r4, pc}
 800936c:	20000028 	.word	0x20000028

08009370 <_sbrk_r>:
 8009370:	2300      	movs	r3, #0
 8009372:	b570      	push	{r4, r5, r6, lr}
 8009374:	4d06      	ldr	r5, [pc, #24]	; (8009390 <_sbrk_r+0x20>)
 8009376:	0004      	movs	r4, r0
 8009378:	0008      	movs	r0, r1
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	f7fc fab2 	bl	80058e4 <_sbrk>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d103      	bne.n	800938c <_sbrk_r+0x1c>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d000      	beq.n	800938c <_sbrk_r+0x1c>
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	20000448 	.word	0x20000448

08009394 <sniprintf>:
 8009394:	b40c      	push	{r2, r3}
 8009396:	b530      	push	{r4, r5, lr}
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <sniprintf+0x64>)
 800939a:	000c      	movs	r4, r1
 800939c:	681d      	ldr	r5, [r3, #0]
 800939e:	b09d      	sub	sp, #116	; 0x74
 80093a0:	2900      	cmp	r1, #0
 80093a2:	da08      	bge.n	80093b6 <sniprintf+0x22>
 80093a4:	238b      	movs	r3, #139	; 0x8b
 80093a6:	2001      	movs	r0, #1
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	4240      	negs	r0, r0
 80093ac:	b01d      	add	sp, #116	; 0x74
 80093ae:	bc30      	pop	{r4, r5}
 80093b0:	bc08      	pop	{r3}
 80093b2:	b002      	add	sp, #8
 80093b4:	4718      	bx	r3
 80093b6:	2382      	movs	r3, #130	; 0x82
 80093b8:	466a      	mov	r2, sp
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	8293      	strh	r3, [r2, #20]
 80093be:	2300      	movs	r3, #0
 80093c0:	9002      	str	r0, [sp, #8]
 80093c2:	9006      	str	r0, [sp, #24]
 80093c4:	4299      	cmp	r1, r3
 80093c6:	d000      	beq.n	80093ca <sniprintf+0x36>
 80093c8:	1e4b      	subs	r3, r1, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	9307      	str	r3, [sp, #28]
 80093ce:	2301      	movs	r3, #1
 80093d0:	466a      	mov	r2, sp
 80093d2:	425b      	negs	r3, r3
 80093d4:	82d3      	strh	r3, [r2, #22]
 80093d6:	0028      	movs	r0, r5
 80093d8:	ab21      	add	r3, sp, #132	; 0x84
 80093da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093dc:	a902      	add	r1, sp, #8
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	f002 f824 	bl	800b42c <_svfiprintf_r>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	da01      	bge.n	80093ec <sniprintf+0x58>
 80093e8:	238b      	movs	r3, #139	; 0x8b
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	d0dd      	beq.n	80093ac <sniprintf+0x18>
 80093f0:	2300      	movs	r3, #0
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	7013      	strb	r3, [r2, #0]
 80093f6:	e7d9      	b.n	80093ac <sniprintf+0x18>
 80093f8:	20000028 	.word	0x20000028

080093fc <__sread>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	000c      	movs	r4, r1
 8009400:	250e      	movs	r5, #14
 8009402:	5f49      	ldrsh	r1, [r1, r5]
 8009404:	f002 fbf6 	bl	800bbf4 <_read_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	db03      	blt.n	8009414 <__sread+0x18>
 800940c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800940e:	181b      	adds	r3, r3, r0
 8009410:	6563      	str	r3, [r4, #84]	; 0x54
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	4a02      	ldr	r2, [pc, #8]	; (8009420 <__sread+0x24>)
 8009418:	4013      	ands	r3, r2
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	e7f9      	b.n	8009412 <__sread+0x16>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	ffffefff 	.word	0xffffefff

08009424 <__swrite>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	001f      	movs	r7, r3
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	0005      	movs	r5, r0
 800942c:	000c      	movs	r4, r1
 800942e:	0016      	movs	r6, r2
 8009430:	05db      	lsls	r3, r3, #23
 8009432:	d505      	bpl.n	8009440 <__swrite+0x1c>
 8009434:	230e      	movs	r3, #14
 8009436:	5ec9      	ldrsh	r1, [r1, r3]
 8009438:	2200      	movs	r2, #0
 800943a:	2302      	movs	r3, #2
 800943c:	f001 fa60 	bl	800a900 <_lseek_r>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	4a05      	ldr	r2, [pc, #20]	; (8009458 <__swrite+0x34>)
 8009444:	0028      	movs	r0, r5
 8009446:	4013      	ands	r3, r2
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	0032      	movs	r2, r6
 800944c:	230e      	movs	r3, #14
 800944e:	5ee1      	ldrsh	r1, [r4, r3]
 8009450:	003b      	movs	r3, r7
 8009452:	f000 fe8f 	bl	800a174 <_write_r>
 8009456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009458:	ffffefff 	.word	0xffffefff

0800945c <__sseek>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	000c      	movs	r4, r1
 8009460:	250e      	movs	r5, #14
 8009462:	5f49      	ldrsh	r1, [r1, r5]
 8009464:	f001 fa4c 	bl	800a900 <_lseek_r>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	d103      	bne.n	8009476 <__sseek+0x1a>
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <__sseek+0x28>)
 8009470:	4013      	ands	r3, r2
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	2280      	movs	r2, #128	; 0x80
 8009478:	0152      	lsls	r2, r2, #5
 800947a:	4313      	orrs	r3, r2
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	6560      	str	r0, [r4, #84]	; 0x54
 8009480:	e7f8      	b.n	8009474 <__sseek+0x18>
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	ffffefff 	.word	0xffffefff

08009488 <__sclose>:
 8009488:	b510      	push	{r4, lr}
 800948a:	230e      	movs	r3, #14
 800948c:	5ec9      	ldrsh	r1, [r1, r3]
 800948e:	f000 fea3 	bl	800a1d8 <_close_r>
 8009492:	bd10      	pop	{r4, pc}

08009494 <strncmp>:
 8009494:	b530      	push	{r4, r5, lr}
 8009496:	0005      	movs	r5, r0
 8009498:	1e10      	subs	r0, r2, #0
 800949a:	d00b      	beq.n	80094b4 <strncmp+0x20>
 800949c:	2400      	movs	r4, #0
 800949e:	3a01      	subs	r2, #1
 80094a0:	5d2b      	ldrb	r3, [r5, r4]
 80094a2:	5d08      	ldrb	r0, [r1, r4]
 80094a4:	4283      	cmp	r3, r0
 80094a6:	d104      	bne.n	80094b2 <strncmp+0x1e>
 80094a8:	4294      	cmp	r4, r2
 80094aa:	d002      	beq.n	80094b2 <strncmp+0x1e>
 80094ac:	3401      	adds	r4, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f6      	bne.n	80094a0 <strncmp+0xc>
 80094b2:	1a18      	subs	r0, r3, r0
 80094b4:	bd30      	pop	{r4, r5, pc}

080094b6 <strncpy>:
 80094b6:	0003      	movs	r3, r0
 80094b8:	b530      	push	{r4, r5, lr}
 80094ba:	001d      	movs	r5, r3
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d006      	beq.n	80094ce <strncpy+0x18>
 80094c0:	780c      	ldrb	r4, [r1, #0]
 80094c2:	3a01      	subs	r2, #1
 80094c4:	3301      	adds	r3, #1
 80094c6:	702c      	strb	r4, [r5, #0]
 80094c8:	3101      	adds	r1, #1
 80094ca:	2c00      	cmp	r4, #0
 80094cc:	d1f5      	bne.n	80094ba <strncpy+0x4>
 80094ce:	2100      	movs	r1, #0
 80094d0:	189a      	adds	r2, r3, r2
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d100      	bne.n	80094d8 <strncpy+0x22>
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	7019      	strb	r1, [r3, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	e7f9      	b.n	80094d2 <strncpy+0x1c>
	...

080094e0 <sulp>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	0016      	movs	r6, r2
 80094e4:	000d      	movs	r5, r1
 80094e6:	f001 fdc7 	bl	800b078 <__ulp>
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	d00d      	beq.n	800950a <sulp+0x2a>
 80094ee:	236b      	movs	r3, #107	; 0x6b
 80094f0:	006a      	lsls	r2, r5, #1
 80094f2:	0d52      	lsrs	r2, r2, #21
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	dd07      	ble.n	800950a <sulp+0x2a>
 80094fa:	2400      	movs	r4, #0
 80094fc:	4a03      	ldr	r2, [pc, #12]	; (800950c <sulp+0x2c>)
 80094fe:	051b      	lsls	r3, r3, #20
 8009500:	189d      	adds	r5, r3, r2
 8009502:	002b      	movs	r3, r5
 8009504:	0022      	movs	r2, r4
 8009506:	f7f7 ffe1 	bl	80014cc <__aeabi_dmul>
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	3ff00000 	.word	0x3ff00000

08009510 <_strtod_l>:
 8009510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009512:	001d      	movs	r5, r3
 8009514:	2300      	movs	r3, #0
 8009516:	b0a7      	sub	sp, #156	; 0x9c
 8009518:	9322      	str	r3, [sp, #136]	; 0x88
 800951a:	4bae      	ldr	r3, [pc, #696]	; (80097d4 <_strtod_l+0x2c4>)
 800951c:	9005      	str	r0, [sp, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	9108      	str	r1, [sp, #32]
 8009522:	0018      	movs	r0, r3
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	921d      	str	r2, [sp, #116]	; 0x74
 8009528:	f7f6 fdf8 	bl	800011c <strlen>
 800952c:	2600      	movs	r6, #0
 800952e:	0004      	movs	r4, r0
 8009530:	2700      	movs	r7, #0
 8009532:	9b08      	ldr	r3, [sp, #32]
 8009534:	9321      	str	r3, [sp, #132]	; 0x84
 8009536:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009538:	7813      	ldrb	r3, [r2, #0]
 800953a:	2b2b      	cmp	r3, #43	; 0x2b
 800953c:	d058      	beq.n	80095f0 <_strtod_l+0xe0>
 800953e:	d844      	bhi.n	80095ca <_strtod_l+0xba>
 8009540:	2b0d      	cmp	r3, #13
 8009542:	d83d      	bhi.n	80095c0 <_strtod_l+0xb0>
 8009544:	2b08      	cmp	r3, #8
 8009546:	d83d      	bhi.n	80095c4 <_strtod_l+0xb4>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d047      	beq.n	80095dc <_strtod_l+0xcc>
 800954c:	2300      	movs	r3, #0
 800954e:	9310      	str	r3, [sp, #64]	; 0x40
 8009550:	2200      	movs	r2, #0
 8009552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009554:	920a      	str	r2, [sp, #40]	; 0x28
 8009556:	9306      	str	r3, [sp, #24]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b30      	cmp	r3, #48	; 0x30
 800955c:	d000      	beq.n	8009560 <_strtod_l+0x50>
 800955e:	e083      	b.n	8009668 <_strtod_l+0x158>
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	3220      	adds	r2, #32
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	4393      	bics	r3, r2
 8009568:	2b58      	cmp	r3, #88	; 0x58
 800956a:	d000      	beq.n	800956e <_strtod_l+0x5e>
 800956c:	e072      	b.n	8009654 <_strtod_l+0x144>
 800956e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009570:	9502      	str	r5, [sp, #8]
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	ab22      	add	r3, sp, #136	; 0x88
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4a97      	ldr	r2, [pc, #604]	; (80097d8 <_strtod_l+0x2c8>)
 800957a:	ab23      	add	r3, sp, #140	; 0x8c
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	a921      	add	r1, sp, #132	; 0x84
 8009580:	f000 feb6 	bl	800a2f0 <__gethex>
 8009584:	2307      	movs	r3, #7
 8009586:	0005      	movs	r5, r0
 8009588:	0004      	movs	r4, r0
 800958a:	401d      	ands	r5, r3
 800958c:	4218      	tst	r0, r3
 800958e:	d006      	beq.n	800959e <_strtod_l+0x8e>
 8009590:	2d06      	cmp	r5, #6
 8009592:	d12f      	bne.n	80095f4 <_strtod_l+0xe4>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	3301      	adds	r3, #1
 8009598:	9321      	str	r3, [sp, #132]	; 0x84
 800959a:	2300      	movs	r3, #0
 800959c:	9310      	str	r3, [sp, #64]	; 0x40
 800959e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <_strtod_l+0x9a>
 80095a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01c      	beq.n	80095ea <_strtod_l+0xda>
 80095b0:	2380      	movs	r3, #128	; 0x80
 80095b2:	0032      	movs	r2, r6
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	0010      	movs	r0, r2
 80095ba:	0019      	movs	r1, r3
 80095bc:	b027      	add	sp, #156	; 0x9c
 80095be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d1c3      	bne.n	800954c <_strtod_l+0x3c>
 80095c4:	3201      	adds	r2, #1
 80095c6:	9221      	str	r2, [sp, #132]	; 0x84
 80095c8:	e7b5      	b.n	8009536 <_strtod_l+0x26>
 80095ca:	2b2d      	cmp	r3, #45	; 0x2d
 80095cc:	d1be      	bne.n	800954c <_strtod_l+0x3c>
 80095ce:	3b2c      	subs	r3, #44	; 0x2c
 80095d0:	9310      	str	r3, [sp, #64]	; 0x40
 80095d2:	1c53      	adds	r3, r2, #1
 80095d4:	9321      	str	r3, [sp, #132]	; 0x84
 80095d6:	7853      	ldrb	r3, [r2, #1]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1b9      	bne.n	8009550 <_strtod_l+0x40>
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	9321      	str	r3, [sp, #132]	; 0x84
 80095e0:	2300      	movs	r3, #0
 80095e2:	9310      	str	r3, [sp, #64]	; 0x40
 80095e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1dc      	bne.n	80095a4 <_strtod_l+0x94>
 80095ea:	0032      	movs	r2, r6
 80095ec:	003b      	movs	r3, r7
 80095ee:	e7e3      	b.n	80095b8 <_strtod_l+0xa8>
 80095f0:	2300      	movs	r3, #0
 80095f2:	e7ed      	b.n	80095d0 <_strtod_l+0xc0>
 80095f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d007      	beq.n	800960a <_strtod_l+0xfa>
 80095fa:	2135      	movs	r1, #53	; 0x35
 80095fc:	a824      	add	r0, sp, #144	; 0x90
 80095fe:	f001 fe3a 	bl	800b276 <__copybits>
 8009602:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	f001 f9f5 	bl	800a9f4 <_Bfree>
 800960a:	1e68      	subs	r0, r5, #1
 800960c:	2805      	cmp	r0, #5
 800960e:	d806      	bhi.n	800961e <_strtod_l+0x10e>
 8009610:	f7f6 fd8c 	bl	800012c <__gnu_thumb1_case_uqi>
 8009614:	1c190b0e 	.word	0x1c190b0e
 8009618:	030e      	.short	0x030e
 800961a:	2700      	movs	r7, #0
 800961c:	003e      	movs	r6, r7
 800961e:	0723      	lsls	r3, r4, #28
 8009620:	d5bd      	bpl.n	800959e <_strtod_l+0x8e>
 8009622:	2380      	movs	r3, #128	; 0x80
 8009624:	061b      	lsls	r3, r3, #24
 8009626:	431f      	orrs	r7, r3
 8009628:	e7b9      	b.n	800959e <_strtod_l+0x8e>
 800962a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800962c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800962e:	e7f6      	b.n	800961e <_strtod_l+0x10e>
 8009630:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009632:	4a6a      	ldr	r2, [pc, #424]	; (80097dc <_strtod_l+0x2cc>)
 8009634:	496a      	ldr	r1, [pc, #424]	; (80097e0 <_strtod_l+0x2d0>)
 8009636:	401a      	ands	r2, r3
 8009638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800963a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800963c:	185b      	adds	r3, r3, r1
 800963e:	051b      	lsls	r3, r3, #20
 8009640:	431a      	orrs	r2, r3
 8009642:	0017      	movs	r7, r2
 8009644:	e7eb      	b.n	800961e <_strtod_l+0x10e>
 8009646:	2600      	movs	r6, #0
 8009648:	4f66      	ldr	r7, [pc, #408]	; (80097e4 <_strtod_l+0x2d4>)
 800964a:	e7e8      	b.n	800961e <_strtod_l+0x10e>
 800964c:	2601      	movs	r6, #1
 800964e:	4f66      	ldr	r7, [pc, #408]	; (80097e8 <_strtod_l+0x2d8>)
 8009650:	4276      	negs	r6, r6
 8009652:	e7e4      	b.n	800961e <_strtod_l+0x10e>
 8009654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	9221      	str	r2, [sp, #132]	; 0x84
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b30      	cmp	r3, #48	; 0x30
 800965e:	d0f9      	beq.n	8009654 <_strtod_l+0x144>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d09c      	beq.n	800959e <_strtod_l+0x8e>
 8009664:	2301      	movs	r3, #1
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800966a:	220a      	movs	r2, #10
 800966c:	9311      	str	r3, [sp, #68]	; 0x44
 800966e:	2300      	movs	r3, #0
 8009670:	930e      	str	r3, [sp, #56]	; 0x38
 8009672:	930b      	str	r3, [sp, #44]	; 0x2c
 8009674:	9309      	str	r3, [sp, #36]	; 0x24
 8009676:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009678:	7805      	ldrb	r5, [r0, #0]
 800967a:	002b      	movs	r3, r5
 800967c:	3b30      	subs	r3, #48	; 0x30
 800967e:	b2d9      	uxtb	r1, r3
 8009680:	2909      	cmp	r1, #9
 8009682:	d927      	bls.n	80096d4 <_strtod_l+0x1c4>
 8009684:	0022      	movs	r2, r4
 8009686:	9907      	ldr	r1, [sp, #28]
 8009688:	f7ff ff04 	bl	8009494 <strncmp>
 800968c:	2800      	cmp	r0, #0
 800968e:	d033      	beq.n	80096f8 <_strtod_l+0x1e8>
 8009690:	2000      	movs	r0, #0
 8009692:	002b      	movs	r3, r5
 8009694:	4684      	mov	ip, r0
 8009696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009698:	900c      	str	r0, [sp, #48]	; 0x30
 800969a:	9206      	str	r2, [sp, #24]
 800969c:	2220      	movs	r2, #32
 800969e:	0019      	movs	r1, r3
 80096a0:	4391      	bics	r1, r2
 80096a2:	000a      	movs	r2, r1
 80096a4:	2100      	movs	r1, #0
 80096a6:	9107      	str	r1, [sp, #28]
 80096a8:	2a45      	cmp	r2, #69	; 0x45
 80096aa:	d000      	beq.n	80096ae <_strtod_l+0x19e>
 80096ac:	e0c5      	b.n	800983a <_strtod_l+0x32a>
 80096ae:	9b06      	ldr	r3, [sp, #24]
 80096b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b2:	4303      	orrs	r3, r0
 80096b4:	4313      	orrs	r3, r2
 80096b6:	428b      	cmp	r3, r1
 80096b8:	d090      	beq.n	80095dc <_strtod_l+0xcc>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	3301      	adds	r3, #1
 80096c0:	9321      	str	r3, [sp, #132]	; 0x84
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	2b2b      	cmp	r3, #43	; 0x2b
 80096c8:	d075      	beq.n	80097b6 <_strtod_l+0x2a6>
 80096ca:	000c      	movs	r4, r1
 80096cc:	2b2d      	cmp	r3, #45	; 0x2d
 80096ce:	d178      	bne.n	80097c2 <_strtod_l+0x2b2>
 80096d0:	2401      	movs	r4, #1
 80096d2:	e071      	b.n	80097b8 <_strtod_l+0x2a8>
 80096d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096d6:	2908      	cmp	r1, #8
 80096d8:	dc09      	bgt.n	80096ee <_strtod_l+0x1de>
 80096da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096dc:	4351      	muls	r1, r2
 80096de:	185b      	adds	r3, r3, r1
 80096e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e4:	3001      	adds	r0, #1
 80096e6:	3301      	adds	r3, #1
 80096e8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ea:	9021      	str	r0, [sp, #132]	; 0x84
 80096ec:	e7c3      	b.n	8009676 <_strtod_l+0x166>
 80096ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80096f0:	4351      	muls	r1, r2
 80096f2:	185b      	adds	r3, r3, r1
 80096f4:	930e      	str	r3, [sp, #56]	; 0x38
 80096f6:	e7f4      	b.n	80096e2 <_strtod_l+0x1d2>
 80096f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fc:	191c      	adds	r4, r3, r4
 80096fe:	9421      	str	r4, [sp, #132]	; 0x84
 8009700:	7823      	ldrb	r3, [r4, #0]
 8009702:	2a00      	cmp	r2, #0
 8009704:	d039      	beq.n	800977a <_strtod_l+0x26a>
 8009706:	900c      	str	r0, [sp, #48]	; 0x30
 8009708:	9206      	str	r2, [sp, #24]
 800970a:	001a      	movs	r2, r3
 800970c:	3a30      	subs	r2, #48	; 0x30
 800970e:	2a09      	cmp	r2, #9
 8009710:	d912      	bls.n	8009738 <_strtod_l+0x228>
 8009712:	2201      	movs	r2, #1
 8009714:	4694      	mov	ip, r2
 8009716:	e7c1      	b.n	800969c <_strtod_l+0x18c>
 8009718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800971a:	3001      	adds	r0, #1
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	9221      	str	r2, [sp, #132]	; 0x84
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b30      	cmp	r3, #48	; 0x30
 8009724:	d0f8      	beq.n	8009718 <_strtod_l+0x208>
 8009726:	001a      	movs	r2, r3
 8009728:	3a31      	subs	r2, #49	; 0x31
 800972a:	2a08      	cmp	r2, #8
 800972c:	d83e      	bhi.n	80097ac <_strtod_l+0x29c>
 800972e:	900c      	str	r0, [sp, #48]	; 0x30
 8009730:	2000      	movs	r0, #0
 8009732:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009734:	9006      	str	r0, [sp, #24]
 8009736:	9211      	str	r2, [sp, #68]	; 0x44
 8009738:	001a      	movs	r2, r3
 800973a:	9906      	ldr	r1, [sp, #24]
 800973c:	1c44      	adds	r4, r0, #1
 800973e:	3a30      	subs	r2, #48	; 0x30
 8009740:	2b30      	cmp	r3, #48	; 0x30
 8009742:	d013      	beq.n	800976c <_strtod_l+0x25c>
 8009744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009746:	191b      	adds	r3, r3, r4
 8009748:	930c      	str	r3, [sp, #48]	; 0x30
 800974a:	1844      	adds	r4, r0, r1
 800974c:	000b      	movs	r3, r1
 800974e:	210a      	movs	r1, #10
 8009750:	429c      	cmp	r4, r3
 8009752:	d114      	bne.n	800977e <_strtod_l+0x26e>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	1c59      	adds	r1, r3, #1
 8009758:	1809      	adds	r1, r1, r0
 800975a:	1818      	adds	r0, r3, r0
 800975c:	2808      	cmp	r0, #8
 800975e:	dc1c      	bgt.n	800979a <_strtod_l+0x28a>
 8009760:	230a      	movs	r3, #10
 8009762:	2400      	movs	r4, #0
 8009764:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009766:	4343      	muls	r3, r0
 8009768:	18d3      	adds	r3, r2, r3
 800976a:	930b      	str	r3, [sp, #44]	; 0x2c
 800976c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800976e:	0020      	movs	r0, r4
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	9221      	str	r2, [sp, #132]	; 0x84
 8009774:	785b      	ldrb	r3, [r3, #1]
 8009776:	9106      	str	r1, [sp, #24]
 8009778:	e7c7      	b.n	800970a <_strtod_l+0x1fa>
 800977a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800977c:	e7d1      	b.n	8009722 <_strtod_l+0x212>
 800977e:	2b08      	cmp	r3, #8
 8009780:	dc04      	bgt.n	800978c <_strtod_l+0x27c>
 8009782:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009784:	434d      	muls	r5, r1
 8009786:	950b      	str	r5, [sp, #44]	; 0x2c
 8009788:	3301      	adds	r3, #1
 800978a:	e7e1      	b.n	8009750 <_strtod_l+0x240>
 800978c:	1c5d      	adds	r5, r3, #1
 800978e:	2d10      	cmp	r5, #16
 8009790:	dcfa      	bgt.n	8009788 <_strtod_l+0x278>
 8009792:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009794:	434d      	muls	r5, r1
 8009796:	950e      	str	r5, [sp, #56]	; 0x38
 8009798:	e7f6      	b.n	8009788 <_strtod_l+0x278>
 800979a:	2400      	movs	r4, #0
 800979c:	2910      	cmp	r1, #16
 800979e:	dce5      	bgt.n	800976c <_strtod_l+0x25c>
 80097a0:	230a      	movs	r3, #10
 80097a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80097a4:	4343      	muls	r3, r0
 80097a6:	18d3      	adds	r3, r2, r3
 80097a8:	930e      	str	r3, [sp, #56]	; 0x38
 80097aa:	e7df      	b.n	800976c <_strtod_l+0x25c>
 80097ac:	2200      	movs	r2, #0
 80097ae:	920c      	str	r2, [sp, #48]	; 0x30
 80097b0:	9206      	str	r2, [sp, #24]
 80097b2:	3201      	adds	r2, #1
 80097b4:	e7ae      	b.n	8009714 <_strtod_l+0x204>
 80097b6:	2400      	movs	r4, #0
 80097b8:	9b08      	ldr	r3, [sp, #32]
 80097ba:	3302      	adds	r3, #2
 80097bc:	9321      	str	r3, [sp, #132]	; 0x84
 80097be:	9b08      	ldr	r3, [sp, #32]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	001a      	movs	r2, r3
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d914      	bls.n	80097f4 <_strtod_l+0x2e4>
 80097ca:	9a08      	ldr	r2, [sp, #32]
 80097cc:	9221      	str	r2, [sp, #132]	; 0x84
 80097ce:	2200      	movs	r2, #0
 80097d0:	e032      	b.n	8009838 <_strtod_l+0x328>
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	0800d400 	.word	0x0800d400
 80097d8:	0800d2f8 	.word	0x0800d2f8
 80097dc:	ffefffff 	.word	0xffefffff
 80097e0:	00000433 	.word	0x00000433
 80097e4:	7ff00000 	.word	0x7ff00000
 80097e8:	7fffffff 	.word	0x7fffffff
 80097ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	9221      	str	r2, [sp, #132]	; 0x84
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d0f9      	beq.n	80097ec <_strtod_l+0x2dc>
 80097f8:	2200      	movs	r2, #0
 80097fa:	9207      	str	r2, [sp, #28]
 80097fc:	001a      	movs	r2, r3
 80097fe:	3a31      	subs	r2, #49	; 0x31
 8009800:	2a08      	cmp	r2, #8
 8009802:	d81a      	bhi.n	800983a <_strtod_l+0x32a>
 8009804:	3b30      	subs	r3, #48	; 0x30
 8009806:	001a      	movs	r2, r3
 8009808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980e:	1c59      	adds	r1, r3, #1
 8009810:	9121      	str	r1, [sp, #132]	; 0x84
 8009812:	785b      	ldrb	r3, [r3, #1]
 8009814:	001d      	movs	r5, r3
 8009816:	3d30      	subs	r5, #48	; 0x30
 8009818:	2d09      	cmp	r5, #9
 800981a:	d939      	bls.n	8009890 <_strtod_l+0x380>
 800981c:	9d07      	ldr	r5, [sp, #28]
 800981e:	1b49      	subs	r1, r1, r5
 8009820:	4daf      	ldr	r5, [pc, #700]	; (8009ae0 <_strtod_l+0x5d0>)
 8009822:	9507      	str	r5, [sp, #28]
 8009824:	2908      	cmp	r1, #8
 8009826:	dc03      	bgt.n	8009830 <_strtod_l+0x320>
 8009828:	9207      	str	r2, [sp, #28]
 800982a:	42aa      	cmp	r2, r5
 800982c:	dd00      	ble.n	8009830 <_strtod_l+0x320>
 800982e:	9507      	str	r5, [sp, #28]
 8009830:	2c00      	cmp	r4, #0
 8009832:	d002      	beq.n	800983a <_strtod_l+0x32a>
 8009834:	9a07      	ldr	r2, [sp, #28]
 8009836:	4252      	negs	r2, r2
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	9a06      	ldr	r2, [sp, #24]
 800983c:	2a00      	cmp	r2, #0
 800983e:	d14b      	bne.n	80098d8 <_strtod_l+0x3c8>
 8009840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009842:	4310      	orrs	r0, r2
 8009844:	d000      	beq.n	8009848 <_strtod_l+0x338>
 8009846:	e6aa      	b.n	800959e <_strtod_l+0x8e>
 8009848:	4662      	mov	r2, ip
 800984a:	2a00      	cmp	r2, #0
 800984c:	d000      	beq.n	8009850 <_strtod_l+0x340>
 800984e:	e6c5      	b.n	80095dc <_strtod_l+0xcc>
 8009850:	2b69      	cmp	r3, #105	; 0x69
 8009852:	d025      	beq.n	80098a0 <_strtod_l+0x390>
 8009854:	dc21      	bgt.n	800989a <_strtod_l+0x38a>
 8009856:	2b49      	cmp	r3, #73	; 0x49
 8009858:	d022      	beq.n	80098a0 <_strtod_l+0x390>
 800985a:	2b4e      	cmp	r3, #78	; 0x4e
 800985c:	d000      	beq.n	8009860 <_strtod_l+0x350>
 800985e:	e6bd      	b.n	80095dc <_strtod_l+0xcc>
 8009860:	49a0      	ldr	r1, [pc, #640]	; (8009ae4 <_strtod_l+0x5d4>)
 8009862:	a821      	add	r0, sp, #132	; 0x84
 8009864:	f000 ff92 	bl	800a78c <__match>
 8009868:	2800      	cmp	r0, #0
 800986a:	d100      	bne.n	800986e <_strtod_l+0x35e>
 800986c:	e6b6      	b.n	80095dc <_strtod_l+0xcc>
 800986e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b28      	cmp	r3, #40	; 0x28
 8009874:	d12a      	bne.n	80098cc <_strtod_l+0x3bc>
 8009876:	499c      	ldr	r1, [pc, #624]	; (8009ae8 <_strtod_l+0x5d8>)
 8009878:	aa24      	add	r2, sp, #144	; 0x90
 800987a:	a821      	add	r0, sp, #132	; 0x84
 800987c:	f000 ff9a 	bl	800a7b4 <__hexnan>
 8009880:	2805      	cmp	r0, #5
 8009882:	d123      	bne.n	80098cc <_strtod_l+0x3bc>
 8009884:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009886:	4a99      	ldr	r2, [pc, #612]	; (8009aec <_strtod_l+0x5dc>)
 8009888:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800988a:	431a      	orrs	r2, r3
 800988c:	0017      	movs	r7, r2
 800988e:	e686      	b.n	800959e <_strtod_l+0x8e>
 8009890:	210a      	movs	r1, #10
 8009892:	434a      	muls	r2, r1
 8009894:	18d2      	adds	r2, r2, r3
 8009896:	3a30      	subs	r2, #48	; 0x30
 8009898:	e7b8      	b.n	800980c <_strtod_l+0x2fc>
 800989a:	2b6e      	cmp	r3, #110	; 0x6e
 800989c:	d0e0      	beq.n	8009860 <_strtod_l+0x350>
 800989e:	e69d      	b.n	80095dc <_strtod_l+0xcc>
 80098a0:	4993      	ldr	r1, [pc, #588]	; (8009af0 <_strtod_l+0x5e0>)
 80098a2:	a821      	add	r0, sp, #132	; 0x84
 80098a4:	f000 ff72 	bl	800a78c <__match>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d100      	bne.n	80098ae <_strtod_l+0x39e>
 80098ac:	e696      	b.n	80095dc <_strtod_l+0xcc>
 80098ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b0:	4990      	ldr	r1, [pc, #576]	; (8009af4 <_strtod_l+0x5e4>)
 80098b2:	3b01      	subs	r3, #1
 80098b4:	a821      	add	r0, sp, #132	; 0x84
 80098b6:	9321      	str	r3, [sp, #132]	; 0x84
 80098b8:	f000 ff68 	bl	800a78c <__match>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d102      	bne.n	80098c6 <_strtod_l+0x3b6>
 80098c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c2:	3301      	adds	r3, #1
 80098c4:	9321      	str	r3, [sp, #132]	; 0x84
 80098c6:	2600      	movs	r6, #0
 80098c8:	4f88      	ldr	r7, [pc, #544]	; (8009aec <_strtod_l+0x5dc>)
 80098ca:	e668      	b.n	800959e <_strtod_l+0x8e>
 80098cc:	488a      	ldr	r0, [pc, #552]	; (8009af8 <_strtod_l+0x5e8>)
 80098ce:	f002 f9a5 	bl	800bc1c <nan>
 80098d2:	0006      	movs	r6, r0
 80098d4:	000f      	movs	r7, r1
 80098d6:	e662      	b.n	800959e <_strtod_l+0x8e>
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	930a      	str	r3, [sp, #40]	; 0x28
 80098e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <_strtod_l+0x3da>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ea:	9c06      	ldr	r4, [sp, #24]
 80098ec:	2c10      	cmp	r4, #16
 80098ee:	dd00      	ble.n	80098f2 <_strtod_l+0x3e2>
 80098f0:	2410      	movs	r4, #16
 80098f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098f4:	f7f8 fc4e 	bl	8002194 <__aeabi_ui2d>
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	0006      	movs	r6, r0
 80098fc:	000f      	movs	r7, r1
 80098fe:	2b09      	cmp	r3, #9
 8009900:	dd15      	ble.n	800992e <_strtod_l+0x41e>
 8009902:	0022      	movs	r2, r4
 8009904:	4b7d      	ldr	r3, [pc, #500]	; (8009afc <_strtod_l+0x5ec>)
 8009906:	3a09      	subs	r2, #9
 8009908:	00d2      	lsls	r2, r2, #3
 800990a:	189b      	adds	r3, r3, r2
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f7f7 fddc 	bl	80014cc <__aeabi_dmul>
 8009914:	0006      	movs	r6, r0
 8009916:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009918:	000f      	movs	r7, r1
 800991a:	f7f8 fc3b 	bl	8002194 <__aeabi_ui2d>
 800991e:	0002      	movs	r2, r0
 8009920:	000b      	movs	r3, r1
 8009922:	0030      	movs	r0, r6
 8009924:	0039      	movs	r1, r7
 8009926:	f7f6 fe61 	bl	80005ec <__aeabi_dadd>
 800992a:	0006      	movs	r6, r0
 800992c:	000f      	movs	r7, r1
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	dc39      	bgt.n	80099a8 <_strtod_l+0x498>
 8009934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d100      	bne.n	800993c <_strtod_l+0x42c>
 800993a:	e630      	b.n	800959e <_strtod_l+0x8e>
 800993c:	dd24      	ble.n	8009988 <_strtod_l+0x478>
 800993e:	2b16      	cmp	r3, #22
 8009940:	dc09      	bgt.n	8009956 <_strtod_l+0x446>
 8009942:	00dd      	lsls	r5, r3, #3
 8009944:	0032      	movs	r2, r6
 8009946:	003b      	movs	r3, r7
 8009948:	4c6c      	ldr	r4, [pc, #432]	; (8009afc <_strtod_l+0x5ec>)
 800994a:	1964      	adds	r4, r4, r5
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	6861      	ldr	r1, [r4, #4]
 8009950:	f7f7 fdbc 	bl	80014cc <__aeabi_dmul>
 8009954:	e7bd      	b.n	80098d2 <_strtod_l+0x3c2>
 8009956:	2325      	movs	r3, #37	; 0x25
 8009958:	9a06      	ldr	r2, [sp, #24]
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995e:	4293      	cmp	r3, r2
 8009960:	db22      	blt.n	80099a8 <_strtod_l+0x498>
 8009962:	240f      	movs	r4, #15
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	4d65      	ldr	r5, [pc, #404]	; (8009afc <_strtod_l+0x5ec>)
 8009968:	1ae4      	subs	r4, r4, r3
 800996a:	00e1      	lsls	r1, r4, #3
 800996c:	1869      	adds	r1, r5, r1
 800996e:	0032      	movs	r2, r6
 8009970:	6808      	ldr	r0, [r1, #0]
 8009972:	6849      	ldr	r1, [r1, #4]
 8009974:	003b      	movs	r3, r7
 8009976:	f7f7 fda9 	bl	80014cc <__aeabi_dmul>
 800997a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997c:	1b1c      	subs	r4, r3, r4
 800997e:	00e4      	lsls	r4, r4, #3
 8009980:	192c      	adds	r4, r5, r4
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	6863      	ldr	r3, [r4, #4]
 8009986:	e7e3      	b.n	8009950 <_strtod_l+0x440>
 8009988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998a:	3316      	adds	r3, #22
 800998c:	db0c      	blt.n	80099a8 <_strtod_l+0x498>
 800998e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	0030      	movs	r0, r6
 8009994:	1a9a      	subs	r2, r3, r2
 8009996:	4b59      	ldr	r3, [pc, #356]	; (8009afc <_strtod_l+0x5ec>)
 8009998:	00d2      	lsls	r2, r2, #3
 800999a:	189b      	adds	r3, r3, r2
 800999c:	0039      	movs	r1, r7
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f7f7 f98d 	bl	8000cc0 <__aeabi_ddiv>
 80099a6:	e794      	b.n	80098d2 <_strtod_l+0x3c2>
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	1b1c      	subs	r4, r3, r4
 80099ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ae:	18e4      	adds	r4, r4, r3
 80099b0:	2c00      	cmp	r4, #0
 80099b2:	dd70      	ble.n	8009a96 <_strtod_l+0x586>
 80099b4:	230f      	movs	r3, #15
 80099b6:	0021      	movs	r1, r4
 80099b8:	4019      	ands	r1, r3
 80099ba:	421c      	tst	r4, r3
 80099bc:	d00a      	beq.n	80099d4 <_strtod_l+0x4c4>
 80099be:	00cb      	lsls	r3, r1, #3
 80099c0:	494e      	ldr	r1, [pc, #312]	; (8009afc <_strtod_l+0x5ec>)
 80099c2:	0032      	movs	r2, r6
 80099c4:	18c9      	adds	r1, r1, r3
 80099c6:	6808      	ldr	r0, [r1, #0]
 80099c8:	6849      	ldr	r1, [r1, #4]
 80099ca:	003b      	movs	r3, r7
 80099cc:	f7f7 fd7e 	bl	80014cc <__aeabi_dmul>
 80099d0:	0006      	movs	r6, r0
 80099d2:	000f      	movs	r7, r1
 80099d4:	230f      	movs	r3, #15
 80099d6:	439c      	bics	r4, r3
 80099d8:	d048      	beq.n	8009a6c <_strtod_l+0x55c>
 80099da:	3326      	adds	r3, #38	; 0x26
 80099dc:	33ff      	adds	r3, #255	; 0xff
 80099de:	429c      	cmp	r4, r3
 80099e0:	dd22      	ble.n	8009a28 <_strtod_l+0x518>
 80099e2:	2300      	movs	r3, #0
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	2322      	movs	r3, #34	; 0x22
 80099ee:	2600      	movs	r6, #0
 80099f0:	9a05      	ldr	r2, [sp, #20]
 80099f2:	4f3e      	ldr	r7, [pc, #248]	; (8009aec <_strtod_l+0x5dc>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f8:	42b3      	cmp	r3, r6
 80099fa:	d100      	bne.n	80099fe <_strtod_l+0x4ee>
 80099fc:	e5cf      	b.n	800959e <_strtod_l+0x8e>
 80099fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a00:	9805      	ldr	r0, [sp, #20]
 8009a02:	f000 fff7 	bl	800a9f4 <_Bfree>
 8009a06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a08:	9805      	ldr	r0, [sp, #20]
 8009a0a:	f000 fff3 	bl	800a9f4 <_Bfree>
 8009a0e:	9907      	ldr	r1, [sp, #28]
 8009a10:	9805      	ldr	r0, [sp, #20]
 8009a12:	f000 ffef 	bl	800a9f4 <_Bfree>
 8009a16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a18:	9805      	ldr	r0, [sp, #20]
 8009a1a:	f000 ffeb 	bl	800a9f4 <_Bfree>
 8009a1e:	9906      	ldr	r1, [sp, #24]
 8009a20:	9805      	ldr	r0, [sp, #20]
 8009a22:	f000 ffe7 	bl	800a9f4 <_Bfree>
 8009a26:	e5ba      	b.n	800959e <_strtod_l+0x8e>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	0030      	movs	r0, r6
 8009a2c:	0039      	movs	r1, r7
 8009a2e:	001d      	movs	r5, r3
 8009a30:	1124      	asrs	r4, r4, #4
 8009a32:	2c01      	cmp	r4, #1
 8009a34:	dc1d      	bgt.n	8009a72 <_strtod_l+0x562>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <_strtod_l+0x52e>
 8009a3a:	0006      	movs	r6, r0
 8009a3c:	000f      	movs	r7, r1
 8009a3e:	4b30      	ldr	r3, [pc, #192]	; (8009b00 <_strtod_l+0x5f0>)
 8009a40:	00ed      	lsls	r5, r5, #3
 8009a42:	18ff      	adds	r7, r7, r3
 8009a44:	4b2f      	ldr	r3, [pc, #188]	; (8009b04 <_strtod_l+0x5f4>)
 8009a46:	0032      	movs	r2, r6
 8009a48:	195d      	adds	r5, r3, r5
 8009a4a:	6828      	ldr	r0, [r5, #0]
 8009a4c:	6869      	ldr	r1, [r5, #4]
 8009a4e:	003b      	movs	r3, r7
 8009a50:	f7f7 fd3c 	bl	80014cc <__aeabi_dmul>
 8009a54:	4b25      	ldr	r3, [pc, #148]	; (8009aec <_strtod_l+0x5dc>)
 8009a56:	4a2c      	ldr	r2, [pc, #176]	; (8009b08 <_strtod_l+0x5f8>)
 8009a58:	0006      	movs	r6, r0
 8009a5a:	400b      	ands	r3, r1
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d8c0      	bhi.n	80099e2 <_strtod_l+0x4d2>
 8009a60:	4a2a      	ldr	r2, [pc, #168]	; (8009b0c <_strtod_l+0x5fc>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d913      	bls.n	8009a8e <_strtod_l+0x57e>
 8009a66:	2601      	movs	r6, #1
 8009a68:	4f29      	ldr	r7, [pc, #164]	; (8009b10 <_strtod_l+0x600>)
 8009a6a:	4276      	negs	r6, r6
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9308      	str	r3, [sp, #32]
 8009a70:	e087      	b.n	8009b82 <_strtod_l+0x672>
 8009a72:	2201      	movs	r2, #1
 8009a74:	4214      	tst	r4, r2
 8009a76:	d007      	beq.n	8009a88 <_strtod_l+0x578>
 8009a78:	4a22      	ldr	r2, [pc, #136]	; (8009b04 <_strtod_l+0x5f4>)
 8009a7a:	00eb      	lsls	r3, r5, #3
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f7f7 fd23 	bl	80014cc <__aeabi_dmul>
 8009a86:	2301      	movs	r3, #1
 8009a88:	3501      	adds	r5, #1
 8009a8a:	1064      	asrs	r4, r4, #1
 8009a8c:	e7d1      	b.n	8009a32 <_strtod_l+0x522>
 8009a8e:	23d4      	movs	r3, #212	; 0xd4
 8009a90:	049b      	lsls	r3, r3, #18
 8009a92:	18cf      	adds	r7, r1, r3
 8009a94:	e7ea      	b.n	8009a6c <_strtod_l+0x55c>
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	d0e8      	beq.n	8009a6c <_strtod_l+0x55c>
 8009a9a:	4264      	negs	r4, r4
 8009a9c:	220f      	movs	r2, #15
 8009a9e:	0023      	movs	r3, r4
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	4214      	tst	r4, r2
 8009aa4:	d00a      	beq.n	8009abc <_strtod_l+0x5ac>
 8009aa6:	00da      	lsls	r2, r3, #3
 8009aa8:	4b14      	ldr	r3, [pc, #80]	; (8009afc <_strtod_l+0x5ec>)
 8009aaa:	0030      	movs	r0, r6
 8009aac:	189b      	adds	r3, r3, r2
 8009aae:	0039      	movs	r1, r7
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f7f7 f904 	bl	8000cc0 <__aeabi_ddiv>
 8009ab8:	0006      	movs	r6, r0
 8009aba:	000f      	movs	r7, r1
 8009abc:	1124      	asrs	r4, r4, #4
 8009abe:	d0d5      	beq.n	8009a6c <_strtod_l+0x55c>
 8009ac0:	2c1f      	cmp	r4, #31
 8009ac2:	dd27      	ble.n	8009b14 <_strtod_l+0x604>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9306      	str	r3, [sp, #24]
 8009ac8:	9307      	str	r3, [sp, #28]
 8009aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009acc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ace:	2322      	movs	r3, #34	; 0x22
 8009ad0:	9a05      	ldr	r2, [sp, #20]
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad8:	2700      	movs	r7, #0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d18f      	bne.n	80099fe <_strtod_l+0x4ee>
 8009ade:	e55e      	b.n	800959e <_strtod_l+0x8e>
 8009ae0:	00004e1f 	.word	0x00004e1f
 8009ae4:	0800d2f3 	.word	0x0800d2f3
 8009ae8:	0800d30c 	.word	0x0800d30c
 8009aec:	7ff00000 	.word	0x7ff00000
 8009af0:	0800d2ea 	.word	0x0800d2ea
 8009af4:	0800d2ed 	.word	0x0800d2ed
 8009af8:	0800d383 	.word	0x0800d383
 8009afc:	0800d4a0 	.word	0x0800d4a0
 8009b00:	fcb00000 	.word	0xfcb00000
 8009b04:	0800d478 	.word	0x0800d478
 8009b08:	7ca00000 	.word	0x7ca00000
 8009b0c:	7c900000 	.word	0x7c900000
 8009b10:	7fefffff 	.word	0x7fefffff
 8009b14:	2310      	movs	r3, #16
 8009b16:	0022      	movs	r2, r4
 8009b18:	401a      	ands	r2, r3
 8009b1a:	9208      	str	r2, [sp, #32]
 8009b1c:	421c      	tst	r4, r3
 8009b1e:	d001      	beq.n	8009b24 <_strtod_l+0x614>
 8009b20:	335a      	adds	r3, #90	; 0x5a
 8009b22:	9308      	str	r3, [sp, #32]
 8009b24:	0030      	movs	r0, r6
 8009b26:	0039      	movs	r1, r7
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4dca      	ldr	r5, [pc, #808]	; (8009e54 <_strtod_l+0x944>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4214      	tst	r4, r2
 8009b30:	d004      	beq.n	8009b3c <_strtod_l+0x62c>
 8009b32:	682a      	ldr	r2, [r5, #0]
 8009b34:	686b      	ldr	r3, [r5, #4]
 8009b36:	f7f7 fcc9 	bl	80014cc <__aeabi_dmul>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	1064      	asrs	r4, r4, #1
 8009b3e:	3508      	adds	r5, #8
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	d1f3      	bne.n	8009b2c <_strtod_l+0x61c>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <_strtod_l+0x63c>
 8009b48:	0006      	movs	r6, r0
 8009b4a:	000f      	movs	r7, r1
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00f      	beq.n	8009b72 <_strtod_l+0x662>
 8009b52:	236b      	movs	r3, #107	; 0x6b
 8009b54:	0079      	lsls	r1, r7, #1
 8009b56:	0d49      	lsrs	r1, r1, #21
 8009b58:	003a      	movs	r2, r7
 8009b5a:	1a5b      	subs	r3, r3, r1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd08      	ble.n	8009b72 <_strtod_l+0x662>
 8009b60:	2b1f      	cmp	r3, #31
 8009b62:	dc00      	bgt.n	8009b66 <_strtod_l+0x656>
 8009b64:	e126      	b.n	8009db4 <_strtod_l+0x8a4>
 8009b66:	2600      	movs	r6, #0
 8009b68:	2b34      	cmp	r3, #52	; 0x34
 8009b6a:	dc00      	bgt.n	8009b6e <_strtod_l+0x65e>
 8009b6c:	e11b      	b.n	8009da6 <_strtod_l+0x896>
 8009b6e:	27dc      	movs	r7, #220	; 0xdc
 8009b70:	04bf      	lsls	r7, r7, #18
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	0030      	movs	r0, r6
 8009b78:	0039      	movs	r1, r7
 8009b7a:	f7f6 fc71 	bl	8000460 <__aeabi_dcmpeq>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1a0      	bne.n	8009ac4 <_strtod_l+0x5b4>
 8009b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	f000 ff99 	bl	800aac4 <__s2b>
 8009b92:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d100      	bne.n	8009b9a <_strtod_l+0x68a>
 8009b98:	e723      	b.n	80099e2 <_strtod_l+0x4d2>
 8009b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9c:	9907      	ldr	r1, [sp, #28]
 8009b9e:	17da      	asrs	r2, r3, #31
 8009ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ba2:	1a5b      	subs	r3, r3, r1
 8009ba4:	401a      	ands	r2, r3
 8009ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba8:	9215      	str	r2, [sp, #84]	; 0x54
 8009baa:	43db      	mvns	r3, r3
 8009bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bae:	17db      	asrs	r3, r3, #31
 8009bb0:	401a      	ands	r2, r3
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	921c      	str	r2, [sp, #112]	; 0x70
 8009bb6:	9306      	str	r3, [sp, #24]
 8009bb8:	9307      	str	r3, [sp, #28]
 8009bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bbc:	9805      	ldr	r0, [sp, #20]
 8009bbe:	6859      	ldr	r1, [r3, #4]
 8009bc0:	f000 fed4 	bl	800a96c <_Balloc>
 8009bc4:	9009      	str	r0, [sp, #36]	; 0x24
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d100      	bne.n	8009bcc <_strtod_l+0x6bc>
 8009bca:	e70f      	b.n	80099ec <_strtod_l+0x4dc>
 8009bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	310c      	adds	r1, #12
 8009bd4:	1c9a      	adds	r2, r3, #2
 8009bd6:	0092      	lsls	r2, r2, #2
 8009bd8:	300c      	adds	r0, #12
 8009bda:	930c      	str	r3, [sp, #48]	; 0x30
 8009bdc:	f7ff fa96 	bl	800910c <memcpy>
 8009be0:	ab24      	add	r3, sp, #144	; 0x90
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	ab23      	add	r3, sp, #140	; 0x8c
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	0032      	movs	r2, r6
 8009bea:	003b      	movs	r3, r7
 8009bec:	9805      	ldr	r0, [sp, #20]
 8009bee:	960e      	str	r6, [sp, #56]	; 0x38
 8009bf0:	970f      	str	r7, [sp, #60]	; 0x3c
 8009bf2:	f001 fab5 	bl	800b160 <__d2b>
 8009bf6:	9022      	str	r0, [sp, #136]	; 0x88
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d100      	bne.n	8009bfe <_strtod_l+0x6ee>
 8009bfc:	e6f6      	b.n	80099ec <_strtod_l+0x4dc>
 8009bfe:	2101      	movs	r1, #1
 8009c00:	9805      	ldr	r0, [sp, #20]
 8009c02:	f000 fff3 	bl	800abec <__i2b>
 8009c06:	9007      	str	r0, [sp, #28]
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d100      	bne.n	8009c0e <_strtod_l+0x6fe>
 8009c0c:	e6ee      	b.n	80099ec <_strtod_l+0x4dc>
 8009c0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da00      	bge.n	8009c16 <_strtod_l+0x706>
 8009c14:	e0d3      	b.n	8009dbe <_strtod_l+0x8ae>
 8009c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c18:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009c1a:	189d      	adds	r5, r3, r2
 8009c1c:	9908      	ldr	r1, [sp, #32]
 8009c1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c20:	1a5b      	subs	r3, r3, r1
 8009c22:	2136      	movs	r1, #54	; 0x36
 8009c24:	189b      	adds	r3, r3, r2
 8009c26:	1a8a      	subs	r2, r1, r2
 8009c28:	498b      	ldr	r1, [pc, #556]	; (8009e58 <_strtod_l+0x948>)
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	428b      	cmp	r3, r1
 8009c30:	db00      	blt.n	8009c34 <_strtod_l+0x724>
 8009c32:	e0cf      	b.n	8009dd4 <_strtod_l+0x8c4>
 8009c34:	1ac9      	subs	r1, r1, r3
 8009c36:	1a52      	subs	r2, r2, r1
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	dd00      	ble.n	8009c3e <_strtod_l+0x72e>
 8009c3c:	e0c3      	b.n	8009dc6 <_strtod_l+0x8b6>
 8009c3e:	4088      	lsls	r0, r1
 8009c40:	2300      	movs	r3, #0
 8009c42:	9014      	str	r0, [sp, #80]	; 0x50
 8009c44:	9312      	str	r3, [sp, #72]	; 0x48
 8009c46:	18ab      	adds	r3, r5, r2
 8009c48:	930c      	str	r3, [sp, #48]	; 0x30
 8009c4a:	18a4      	adds	r4, r4, r2
 8009c4c:	9b08      	ldr	r3, [sp, #32]
 8009c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c50:	191c      	adds	r4, r3, r4
 8009c52:	002b      	movs	r3, r5
 8009c54:	4295      	cmp	r5, r2
 8009c56:	dd00      	ble.n	8009c5a <_strtod_l+0x74a>
 8009c58:	0013      	movs	r3, r2
 8009c5a:	42a3      	cmp	r3, r4
 8009c5c:	dd00      	ble.n	8009c60 <_strtod_l+0x750>
 8009c5e:	0023      	movs	r3, r4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dd04      	ble.n	8009c6e <_strtod_l+0x75e>
 8009c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c66:	1ae4      	subs	r4, r4, r3
 8009c68:	1ad2      	subs	r2, r2, r3
 8009c6a:	920c      	str	r2, [sp, #48]	; 0x30
 8009c6c:	1aed      	subs	r5, r5, r3
 8009c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dd17      	ble.n	8009ca4 <_strtod_l+0x794>
 8009c74:	001a      	movs	r2, r3
 8009c76:	9907      	ldr	r1, [sp, #28]
 8009c78:	9805      	ldr	r0, [sp, #20]
 8009c7a:	f001 f87d 	bl	800ad78 <__pow5mult>
 8009c7e:	9007      	str	r0, [sp, #28]
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d100      	bne.n	8009c86 <_strtod_l+0x776>
 8009c84:	e6b2      	b.n	80099ec <_strtod_l+0x4dc>
 8009c86:	0001      	movs	r1, r0
 8009c88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c8a:	9805      	ldr	r0, [sp, #20]
 8009c8c:	f000 ffc4 	bl	800ac18 <__multiply>
 8009c90:	9011      	str	r0, [sp, #68]	; 0x44
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d100      	bne.n	8009c98 <_strtod_l+0x788>
 8009c96:	e6a9      	b.n	80099ec <_strtod_l+0x4dc>
 8009c98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009c9a:	9805      	ldr	r0, [sp, #20]
 8009c9c:	f000 feaa 	bl	800a9f4 <_Bfree>
 8009ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ca2:	9322      	str	r3, [sp, #136]	; 0x88
 8009ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dd00      	ble.n	8009cac <_strtod_l+0x79c>
 8009caa:	e096      	b.n	8009dda <_strtod_l+0x8ca>
 8009cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dd08      	ble.n	8009cc4 <_strtod_l+0x7b4>
 8009cb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cb6:	9805      	ldr	r0, [sp, #20]
 8009cb8:	f001 f85e 	bl	800ad78 <__pow5mult>
 8009cbc:	9009      	str	r0, [sp, #36]	; 0x24
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d100      	bne.n	8009cc4 <_strtod_l+0x7b4>
 8009cc2:	e693      	b.n	80099ec <_strtod_l+0x4dc>
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	dd08      	ble.n	8009cda <_strtod_l+0x7ca>
 8009cc8:	0022      	movs	r2, r4
 8009cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ccc:	9805      	ldr	r0, [sp, #20]
 8009cce:	f001 f8af 	bl	800ae30 <__lshift>
 8009cd2:	9009      	str	r0, [sp, #36]	; 0x24
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d100      	bne.n	8009cda <_strtod_l+0x7ca>
 8009cd8:	e688      	b.n	80099ec <_strtod_l+0x4dc>
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	dd08      	ble.n	8009cf0 <_strtod_l+0x7e0>
 8009cde:	002a      	movs	r2, r5
 8009ce0:	9907      	ldr	r1, [sp, #28]
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	f001 f8a4 	bl	800ae30 <__lshift>
 8009ce8:	9007      	str	r0, [sp, #28]
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d100      	bne.n	8009cf0 <_strtod_l+0x7e0>
 8009cee:	e67d      	b.n	80099ec <_strtod_l+0x4dc>
 8009cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009cf4:	9805      	ldr	r0, [sp, #20]
 8009cf6:	f001 f927 	bl	800af48 <__mdiff>
 8009cfa:	9006      	str	r0, [sp, #24]
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d100      	bne.n	8009d02 <_strtod_l+0x7f2>
 8009d00:	e674      	b.n	80099ec <_strtod_l+0x4dc>
 8009d02:	2200      	movs	r2, #0
 8009d04:	68c3      	ldr	r3, [r0, #12]
 8009d06:	9907      	ldr	r1, [sp, #28]
 8009d08:	60c2      	str	r2, [r0, #12]
 8009d0a:	9311      	str	r3, [sp, #68]	; 0x44
 8009d0c:	f001 f900 	bl	800af10 <__mcmp>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	da6c      	bge.n	8009dee <_strtod_l+0x8de>
 8009d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d16:	4333      	orrs	r3, r6
 8009d18:	d000      	beq.n	8009d1c <_strtod_l+0x80c>
 8009d1a:	e097      	b.n	8009e4c <_strtod_l+0x93c>
 8009d1c:	033b      	lsls	r3, r7, #12
 8009d1e:	d000      	beq.n	8009d22 <_strtod_l+0x812>
 8009d20:	e094      	b.n	8009e4c <_strtod_l+0x93c>
 8009d22:	22d6      	movs	r2, #214	; 0xd6
 8009d24:	4b4d      	ldr	r3, [pc, #308]	; (8009e5c <_strtod_l+0x94c>)
 8009d26:	04d2      	lsls	r2, r2, #19
 8009d28:	403b      	ands	r3, r7
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d800      	bhi.n	8009d30 <_strtod_l+0x820>
 8009d2e:	e08d      	b.n	8009e4c <_strtod_l+0x93c>
 8009d30:	9b06      	ldr	r3, [sp, #24]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	930a      	str	r3, [sp, #40]	; 0x28
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <_strtod_l+0x836>
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	dc00      	bgt.n	8009d46 <_strtod_l+0x836>
 8009d44:	e082      	b.n	8009e4c <_strtod_l+0x93c>
 8009d46:	9906      	ldr	r1, [sp, #24]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	9805      	ldr	r0, [sp, #20]
 8009d4c:	f001 f870 	bl	800ae30 <__lshift>
 8009d50:	9907      	ldr	r1, [sp, #28]
 8009d52:	9006      	str	r0, [sp, #24]
 8009d54:	f001 f8dc 	bl	800af10 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dd77      	ble.n	8009e4c <_strtod_l+0x93c>
 8009d5c:	9908      	ldr	r1, [sp, #32]
 8009d5e:	003b      	movs	r3, r7
 8009d60:	4a3e      	ldr	r2, [pc, #248]	; (8009e5c <_strtod_l+0x94c>)
 8009d62:	2900      	cmp	r1, #0
 8009d64:	d100      	bne.n	8009d68 <_strtod_l+0x858>
 8009d66:	e09e      	b.n	8009ea6 <_strtod_l+0x996>
 8009d68:	0011      	movs	r1, r2
 8009d6a:	20d6      	movs	r0, #214	; 0xd6
 8009d6c:	4039      	ands	r1, r7
 8009d6e:	04c0      	lsls	r0, r0, #19
 8009d70:	4281      	cmp	r1, r0
 8009d72:	dd00      	ble.n	8009d76 <_strtod_l+0x866>
 8009d74:	e097      	b.n	8009ea6 <_strtod_l+0x996>
 8009d76:	23dc      	movs	r3, #220	; 0xdc
 8009d78:	049b      	lsls	r3, r3, #18
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	dc00      	bgt.n	8009d80 <_strtod_l+0x870>
 8009d7e:	e6a6      	b.n	8009ace <_strtod_l+0x5be>
 8009d80:	4b37      	ldr	r3, [pc, #220]	; (8009e60 <_strtod_l+0x950>)
 8009d82:	0030      	movs	r0, r6
 8009d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d86:	2300      	movs	r3, #0
 8009d88:	931a      	str	r3, [sp, #104]	; 0x68
 8009d8a:	0039      	movs	r1, r7
 8009d8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d90:	f7f7 fb9c 	bl	80014cc <__aeabi_dmul>
 8009d94:	0006      	movs	r6, r0
 8009d96:	000f      	movs	r7, r1
 8009d98:	4308      	orrs	r0, r1
 8009d9a:	d000      	beq.n	8009d9e <_strtod_l+0x88e>
 8009d9c:	e62f      	b.n	80099fe <_strtod_l+0x4ee>
 8009d9e:	2322      	movs	r3, #34	; 0x22
 8009da0:	9a05      	ldr	r2, [sp, #20]
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	e62b      	b.n	80099fe <_strtod_l+0x4ee>
 8009da6:	2101      	movs	r1, #1
 8009da8:	3b20      	subs	r3, #32
 8009daa:	4249      	negs	r1, r1
 8009dac:	4099      	lsls	r1, r3
 8009dae:	400a      	ands	r2, r1
 8009db0:	0017      	movs	r7, r2
 8009db2:	e6de      	b.n	8009b72 <_strtod_l+0x662>
 8009db4:	2201      	movs	r2, #1
 8009db6:	4252      	negs	r2, r2
 8009db8:	409a      	lsls	r2, r3
 8009dba:	4016      	ands	r6, r2
 8009dbc:	e6d9      	b.n	8009b72 <_strtod_l+0x662>
 8009dbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009dc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009dc2:	1ad4      	subs	r4, r2, r3
 8009dc4:	e72a      	b.n	8009c1c <_strtod_l+0x70c>
 8009dc6:	4927      	ldr	r1, [pc, #156]	; (8009e64 <_strtod_l+0x954>)
 8009dc8:	1acb      	subs	r3, r1, r3
 8009dca:	0001      	movs	r1, r0
 8009dcc:	4099      	lsls	r1, r3
 8009dce:	9112      	str	r1, [sp, #72]	; 0x48
 8009dd0:	9014      	str	r0, [sp, #80]	; 0x50
 8009dd2:	e738      	b.n	8009c46 <_strtod_l+0x736>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8009dd8:	e7fa      	b.n	8009dd0 <_strtod_l+0x8c0>
 8009dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ddc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009dde:	9805      	ldr	r0, [sp, #20]
 8009de0:	f001 f826 	bl	800ae30 <__lshift>
 8009de4:	9022      	str	r0, [sp, #136]	; 0x88
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d000      	beq.n	8009dec <_strtod_l+0x8dc>
 8009dea:	e75f      	b.n	8009cac <_strtod_l+0x79c>
 8009dec:	e5fe      	b.n	80099ec <_strtod_l+0x4dc>
 8009dee:	970c      	str	r7, [sp, #48]	; 0x30
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d176      	bne.n	8009ee2 <_strtod_l+0x9d2>
 8009df4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009df6:	033b      	lsls	r3, r7, #12
 8009df8:	0b1b      	lsrs	r3, r3, #12
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d038      	beq.n	8009e70 <_strtod_l+0x960>
 8009dfe:	4a1a      	ldr	r2, [pc, #104]	; (8009e68 <_strtod_l+0x958>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d138      	bne.n	8009e76 <_strtod_l+0x966>
 8009e04:	2201      	movs	r2, #1
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	4252      	negs	r2, r2
 8009e0a:	0031      	movs	r1, r6
 8009e0c:	0010      	movs	r0, r2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00b      	beq.n	8009e2a <_strtod_l+0x91a>
 8009e12:	24d4      	movs	r4, #212	; 0xd4
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <_strtod_l+0x94c>)
 8009e16:	0010      	movs	r0, r2
 8009e18:	403b      	ands	r3, r7
 8009e1a:	04e4      	lsls	r4, r4, #19
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	d804      	bhi.n	8009e2a <_strtod_l+0x91a>
 8009e20:	306c      	adds	r0, #108	; 0x6c
 8009e22:	0d1b      	lsrs	r3, r3, #20
 8009e24:	1ac3      	subs	r3, r0, r3
 8009e26:	409a      	lsls	r2, r3
 8009e28:	0010      	movs	r0, r2
 8009e2a:	4281      	cmp	r1, r0
 8009e2c:	d123      	bne.n	8009e76 <_strtod_l+0x966>
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <_strtod_l+0x95c>)
 8009e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d102      	bne.n	8009e3c <_strtod_l+0x92c>
 8009e36:	1c4b      	adds	r3, r1, #1
 8009e38:	d100      	bne.n	8009e3c <_strtod_l+0x92c>
 8009e3a:	e5d7      	b.n	80099ec <_strtod_l+0x4dc>
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <_strtod_l+0x94c>)
 8009e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e40:	2600      	movs	r6, #0
 8009e42:	401a      	ands	r2, r3
 8009e44:	0013      	movs	r3, r2
 8009e46:	2280      	movs	r2, #128	; 0x80
 8009e48:	0352      	lsls	r2, r2, #13
 8009e4a:	189f      	adds	r7, r3, r2
 8009e4c:	9b08      	ldr	r3, [sp, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d196      	bne.n	8009d80 <_strtod_l+0x870>
 8009e52:	e5d4      	b.n	80099fe <_strtod_l+0x4ee>
 8009e54:	0800d320 	.word	0x0800d320
 8009e58:	fffffc02 	.word	0xfffffc02
 8009e5c:	7ff00000 	.word	0x7ff00000
 8009e60:	39500000 	.word	0x39500000
 8009e64:	fffffbe2 	.word	0xfffffbe2
 8009e68:	000fffff 	.word	0x000fffff
 8009e6c:	7fefffff 	.word	0x7fefffff
 8009e70:	4333      	orrs	r3, r6
 8009e72:	d100      	bne.n	8009e76 <_strtod_l+0x966>
 8009e74:	e772      	b.n	8009d5c <_strtod_l+0x84c>
 8009e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01d      	beq.n	8009eb8 <_strtod_l+0x9a8>
 8009e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e80:	4213      	tst	r3, r2
 8009e82:	d0e3      	beq.n	8009e4c <_strtod_l+0x93c>
 8009e84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e86:	0030      	movs	r0, r6
 8009e88:	0039      	movs	r1, r7
 8009e8a:	9a08      	ldr	r2, [sp, #32]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d017      	beq.n	8009ec0 <_strtod_l+0x9b0>
 8009e90:	f7ff fb26 	bl	80094e0 <sulp>
 8009e94:	0002      	movs	r2, r0
 8009e96:	000b      	movs	r3, r1
 8009e98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e9c:	f7f6 fba6 	bl	80005ec <__aeabi_dadd>
 8009ea0:	0006      	movs	r6, r0
 8009ea2:	000f      	movs	r7, r1
 8009ea4:	e7d2      	b.n	8009e4c <_strtod_l+0x93c>
 8009ea6:	2601      	movs	r6, #1
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	4a9b      	ldr	r2, [pc, #620]	; (800a118 <_strtod_l+0xc08>)
 8009eac:	4276      	negs	r6, r6
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	4a9a      	ldr	r2, [pc, #616]	; (800a11c <_strtod_l+0xc0c>)
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	0017      	movs	r7, r2
 8009eb6:	e7c9      	b.n	8009e4c <_strtod_l+0x93c>
 8009eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eba:	4233      	tst	r3, r6
 8009ebc:	d0c6      	beq.n	8009e4c <_strtod_l+0x93c>
 8009ebe:	e7e1      	b.n	8009e84 <_strtod_l+0x974>
 8009ec0:	f7ff fb0e 	bl	80094e0 <sulp>
 8009ec4:	0002      	movs	r2, r0
 8009ec6:	000b      	movs	r3, r1
 8009ec8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009eca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ecc:	f7f7 fd6a 	bl	80019a4 <__aeabi_dsub>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	0006      	movs	r6, r0
 8009ed6:	000f      	movs	r7, r1
 8009ed8:	f7f6 fac2 	bl	8000460 <__aeabi_dcmpeq>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0b5      	beq.n	8009e4c <_strtod_l+0x93c>
 8009ee0:	e5f5      	b.n	8009ace <_strtod_l+0x5be>
 8009ee2:	9907      	ldr	r1, [sp, #28]
 8009ee4:	9806      	ldr	r0, [sp, #24]
 8009ee6:	f001 f99f 	bl	800b228 <__ratio>
 8009eea:	2380      	movs	r3, #128	; 0x80
 8009eec:	2200      	movs	r2, #0
 8009eee:	05db      	lsls	r3, r3, #23
 8009ef0:	0004      	movs	r4, r0
 8009ef2:	000d      	movs	r5, r1
 8009ef4:	f7f6 fac4 	bl	8000480 <__aeabi_dcmple>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d079      	beq.n	8009ff0 <_strtod_l+0xae0>
 8009efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d04b      	beq.n	8009f9a <_strtod_l+0xa8a>
 8009f02:	2300      	movs	r3, #0
 8009f04:	4c86      	ldr	r4, [pc, #536]	; (800a120 <_strtod_l+0xc10>)
 8009f06:	2500      	movs	r5, #0
 8009f08:	9312      	str	r3, [sp, #72]	; 0x48
 8009f0a:	9413      	str	r4, [sp, #76]	; 0x4c
 8009f0c:	4c84      	ldr	r4, [pc, #528]	; (800a120 <_strtod_l+0xc10>)
 8009f0e:	4a85      	ldr	r2, [pc, #532]	; (800a124 <_strtod_l+0xc14>)
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	4013      	ands	r3, r2
 8009f14:	9314      	str	r3, [sp, #80]	; 0x50
 8009f16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f18:	4b83      	ldr	r3, [pc, #524]	; (800a128 <_strtod_l+0xc18>)
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d000      	beq.n	8009f20 <_strtod_l+0xa10>
 8009f1e:	e0b0      	b.n	800a082 <_strtod_l+0xb72>
 8009f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f24:	921a      	str	r2, [sp, #104]	; 0x68
 8009f26:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f28:	4a80      	ldr	r2, [pc, #512]	; (800a12c <_strtod_l+0xc1c>)
 8009f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f2c:	4694      	mov	ip, r2
 8009f2e:	4463      	add	r3, ip
 8009f30:	001f      	movs	r7, r3
 8009f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f36:	0030      	movs	r0, r6
 8009f38:	0039      	movs	r1, r7
 8009f3a:	920c      	str	r2, [sp, #48]	; 0x30
 8009f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f3e:	f001 f89b 	bl	800b078 <__ulp>
 8009f42:	0002      	movs	r2, r0
 8009f44:	000b      	movs	r3, r1
 8009f46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f4a:	f7f7 fabf 	bl	80014cc <__aeabi_dmul>
 8009f4e:	0032      	movs	r2, r6
 8009f50:	003b      	movs	r3, r7
 8009f52:	f7f6 fb4b 	bl	80005ec <__aeabi_dadd>
 8009f56:	4a73      	ldr	r2, [pc, #460]	; (800a124 <_strtod_l+0xc14>)
 8009f58:	4b75      	ldr	r3, [pc, #468]	; (800a130 <_strtod_l+0xc20>)
 8009f5a:	0006      	movs	r6, r0
 8009f5c:	400a      	ands	r2, r1
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d95e      	bls.n	800a020 <_strtod_l+0xb10>
 8009f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f64:	4a73      	ldr	r2, [pc, #460]	; (800a134 <_strtod_l+0xc24>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d103      	bne.n	8009f72 <_strtod_l+0xa62>
 8009f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	d100      	bne.n	8009f72 <_strtod_l+0xa62>
 8009f70:	e53c      	b.n	80099ec <_strtod_l+0x4dc>
 8009f72:	2601      	movs	r6, #1
 8009f74:	4f6f      	ldr	r7, [pc, #444]	; (800a134 <_strtod_l+0xc24>)
 8009f76:	4276      	negs	r6, r6
 8009f78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009f7a:	9805      	ldr	r0, [sp, #20]
 8009f7c:	f000 fd3a 	bl	800a9f4 <_Bfree>
 8009f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f82:	9805      	ldr	r0, [sp, #20]
 8009f84:	f000 fd36 	bl	800a9f4 <_Bfree>
 8009f88:	9907      	ldr	r1, [sp, #28]
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	f000 fd32 	bl	800a9f4 <_Bfree>
 8009f90:	9906      	ldr	r1, [sp, #24]
 8009f92:	9805      	ldr	r0, [sp, #20]
 8009f94:	f000 fd2e 	bl	800a9f4 <_Bfree>
 8009f98:	e60f      	b.n	8009bba <_strtod_l+0x6aa>
 8009f9a:	2e00      	cmp	r6, #0
 8009f9c:	d11c      	bne.n	8009fd8 <_strtod_l+0xac8>
 8009f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa0:	031b      	lsls	r3, r3, #12
 8009fa2:	d11f      	bne.n	8009fe4 <_strtod_l+0xad4>
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	0020      	movs	r0, r4
 8009fa8:	0029      	movs	r1, r5
 8009faa:	4b5d      	ldr	r3, [pc, #372]	; (800a120 <_strtod_l+0xc10>)
 8009fac:	f7f6 fa5e 	bl	800046c <__aeabi_dcmplt>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d11a      	bne.n	8009fea <_strtod_l+0xada>
 8009fb4:	0020      	movs	r0, r4
 8009fb6:	0029      	movs	r1, r5
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4b5f      	ldr	r3, [pc, #380]	; (800a138 <_strtod_l+0xc28>)
 8009fbc:	f7f7 fa86 	bl	80014cc <__aeabi_dmul>
 8009fc0:	0005      	movs	r5, r0
 8009fc2:	000c      	movs	r4, r1
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	061b      	lsls	r3, r3, #24
 8009fc8:	18e3      	adds	r3, r4, r3
 8009fca:	951e      	str	r5, [sp, #120]	; 0x78
 8009fcc:	931f      	str	r3, [sp, #124]	; 0x7c
 8009fce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009fd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fd2:	9212      	str	r2, [sp, #72]	; 0x48
 8009fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fd6:	e79a      	b.n	8009f0e <_strtod_l+0x9fe>
 8009fd8:	2e01      	cmp	r6, #1
 8009fda:	d103      	bne.n	8009fe4 <_strtod_l+0xad4>
 8009fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d100      	bne.n	8009fe4 <_strtod_l+0xad4>
 8009fe2:	e574      	b.n	8009ace <_strtod_l+0x5be>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4c55      	ldr	r4, [pc, #340]	; (800a13c <_strtod_l+0xc2c>)
 8009fe8:	e78d      	b.n	8009f06 <_strtod_l+0x9f6>
 8009fea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009fec:	4c52      	ldr	r4, [pc, #328]	; (800a138 <_strtod_l+0xc28>)
 8009fee:	e7e9      	b.n	8009fc4 <_strtod_l+0xab4>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	0020      	movs	r0, r4
 8009ff4:	0029      	movs	r1, r5
 8009ff6:	4b50      	ldr	r3, [pc, #320]	; (800a138 <_strtod_l+0xc28>)
 8009ff8:	f7f7 fa68 	bl	80014cc <__aeabi_dmul>
 8009ffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ffe:	0005      	movs	r5, r0
 800a000:	000b      	movs	r3, r1
 800a002:	000c      	movs	r4, r1
 800a004:	2a00      	cmp	r2, #0
 800a006:	d107      	bne.n	800a018 <_strtod_l+0xb08>
 800a008:	2280      	movs	r2, #128	; 0x80
 800a00a:	0612      	lsls	r2, r2, #24
 800a00c:	188b      	adds	r3, r1, r2
 800a00e:	9016      	str	r0, [sp, #88]	; 0x58
 800a010:	9317      	str	r3, [sp, #92]	; 0x5c
 800a012:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a016:	e7dc      	b.n	8009fd2 <_strtod_l+0xac2>
 800a018:	0002      	movs	r2, r0
 800a01a:	9216      	str	r2, [sp, #88]	; 0x58
 800a01c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a01e:	e7f8      	b.n	800a012 <_strtod_l+0xb02>
 800a020:	23d4      	movs	r3, #212	; 0xd4
 800a022:	049b      	lsls	r3, r3, #18
 800a024:	18cf      	adds	r7, r1, r3
 800a026:	9b08      	ldr	r3, [sp, #32]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1a5      	bne.n	8009f78 <_strtod_l+0xa68>
 800a02c:	4b3d      	ldr	r3, [pc, #244]	; (800a124 <_strtod_l+0xc14>)
 800a02e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a030:	403b      	ands	r3, r7
 800a032:	429a      	cmp	r2, r3
 800a034:	d1a0      	bne.n	8009f78 <_strtod_l+0xa68>
 800a036:	0028      	movs	r0, r5
 800a038:	0021      	movs	r1, r4
 800a03a:	f7f6 fa85 	bl	8000548 <__aeabi_d2lz>
 800a03e:	f7f6 fabf 	bl	80005c0 <__aeabi_l2d>
 800a042:	0002      	movs	r2, r0
 800a044:	000b      	movs	r3, r1
 800a046:	0028      	movs	r0, r5
 800a048:	0021      	movs	r1, r4
 800a04a:	f7f7 fcab 	bl	80019a4 <__aeabi_dsub>
 800a04e:	033b      	lsls	r3, r7, #12
 800a050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a052:	0b1b      	lsrs	r3, r3, #12
 800a054:	4333      	orrs	r3, r6
 800a056:	4313      	orrs	r3, r2
 800a058:	0004      	movs	r4, r0
 800a05a:	000d      	movs	r5, r1
 800a05c:	4a38      	ldr	r2, [pc, #224]	; (800a140 <_strtod_l+0xc30>)
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d055      	beq.n	800a10e <_strtod_l+0xbfe>
 800a062:	4b38      	ldr	r3, [pc, #224]	; (800a144 <_strtod_l+0xc34>)
 800a064:	f7f6 fa02 	bl	800046c <__aeabi_dcmplt>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d000      	beq.n	800a06e <_strtod_l+0xb5e>
 800a06c:	e4c7      	b.n	80099fe <_strtod_l+0x4ee>
 800a06e:	0020      	movs	r0, r4
 800a070:	0029      	movs	r1, r5
 800a072:	4a35      	ldr	r2, [pc, #212]	; (800a148 <_strtod_l+0xc38>)
 800a074:	4b30      	ldr	r3, [pc, #192]	; (800a138 <_strtod_l+0xc28>)
 800a076:	f7f6 fa0d 	bl	8000494 <__aeabi_dcmpgt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d100      	bne.n	800a080 <_strtod_l+0xb70>
 800a07e:	e77b      	b.n	8009f78 <_strtod_l+0xa68>
 800a080:	e4bd      	b.n	80099fe <_strtod_l+0x4ee>
 800a082:	9b08      	ldr	r3, [sp, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02b      	beq.n	800a0e0 <_strtod_l+0xbd0>
 800a088:	23d4      	movs	r3, #212	; 0xd4
 800a08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a08c:	04db      	lsls	r3, r3, #19
 800a08e:	429a      	cmp	r2, r3
 800a090:	d826      	bhi.n	800a0e0 <_strtod_l+0xbd0>
 800a092:	0028      	movs	r0, r5
 800a094:	0021      	movs	r1, r4
 800a096:	4a2d      	ldr	r2, [pc, #180]	; (800a14c <_strtod_l+0xc3c>)
 800a098:	4b2d      	ldr	r3, [pc, #180]	; (800a150 <_strtod_l+0xc40>)
 800a09a:	f7f6 f9f1 	bl	8000480 <__aeabi_dcmple>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d017      	beq.n	800a0d2 <_strtod_l+0xbc2>
 800a0a2:	0028      	movs	r0, r5
 800a0a4:	0021      	movs	r1, r4
 800a0a6:	f7f6 fa31 	bl	800050c <__aeabi_d2uiz>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d100      	bne.n	800a0b0 <_strtod_l+0xba0>
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	f7f8 f870 	bl	8002194 <__aeabi_ui2d>
 800a0b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0b6:	0005      	movs	r5, r0
 800a0b8:	000b      	movs	r3, r1
 800a0ba:	000c      	movs	r4, r1
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	d122      	bne.n	800a106 <_strtod_l+0xbf6>
 800a0c0:	2280      	movs	r2, #128	; 0x80
 800a0c2:	0612      	lsls	r2, r2, #24
 800a0c4:	188b      	adds	r3, r1, r2
 800a0c6:	9018      	str	r0, [sp, #96]	; 0x60
 800a0c8:	9319      	str	r3, [sp, #100]	; 0x64
 800a0ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0ce:	9212      	str	r2, [sp, #72]	; 0x48
 800a0d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0d2:	22d6      	movs	r2, #214	; 0xd6
 800a0d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0d6:	04d2      	lsls	r2, r2, #19
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a0e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a0e6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a0e8:	f000 ffc6 	bl	800b078 <__ulp>
 800a0ec:	0002      	movs	r2, r0
 800a0ee:	000b      	movs	r3, r1
 800a0f0:	0030      	movs	r0, r6
 800a0f2:	0039      	movs	r1, r7
 800a0f4:	f7f7 f9ea 	bl	80014cc <__aeabi_dmul>
 800a0f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fc:	f7f6 fa76 	bl	80005ec <__aeabi_dadd>
 800a100:	0006      	movs	r6, r0
 800a102:	000f      	movs	r7, r1
 800a104:	e78f      	b.n	800a026 <_strtod_l+0xb16>
 800a106:	0002      	movs	r2, r0
 800a108:	9218      	str	r2, [sp, #96]	; 0x60
 800a10a:	9319      	str	r3, [sp, #100]	; 0x64
 800a10c:	e7dd      	b.n	800a0ca <_strtod_l+0xbba>
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <_strtod_l+0xc44>)
 800a110:	f7f6 f9ac 	bl	800046c <__aeabi_dcmplt>
 800a114:	e7b1      	b.n	800a07a <_strtod_l+0xb6a>
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	fff00000 	.word	0xfff00000
 800a11c:	000fffff 	.word	0x000fffff
 800a120:	3ff00000 	.word	0x3ff00000
 800a124:	7ff00000 	.word	0x7ff00000
 800a128:	7fe00000 	.word	0x7fe00000
 800a12c:	fcb00000 	.word	0xfcb00000
 800a130:	7c9fffff 	.word	0x7c9fffff
 800a134:	7fefffff 	.word	0x7fefffff
 800a138:	3fe00000 	.word	0x3fe00000
 800a13c:	bff00000 	.word	0xbff00000
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fdfffff 	.word	0x3fdfffff
 800a148:	35afe535 	.word	0x35afe535
 800a14c:	ffc00000 	.word	0xffc00000
 800a150:	41dfffff 	.word	0x41dfffff
 800a154:	3fcfffff 	.word	0x3fcfffff

0800a158 <strtod>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	000a      	movs	r2, r1
 800a15c:	0001      	movs	r1, r0
 800a15e:	4803      	ldr	r0, [pc, #12]	; (800a16c <strtod+0x14>)
 800a160:	4b03      	ldr	r3, [pc, #12]	; (800a170 <strtod+0x18>)
 800a162:	6800      	ldr	r0, [r0, #0]
 800a164:	f7ff f9d4 	bl	8009510 <_strtod_l>
 800a168:	bd10      	pop	{r4, pc}
 800a16a:	46c0      	nop			; (mov r8, r8)
 800a16c:	20000028 	.word	0x20000028
 800a170:	20000090 	.word	0x20000090

0800a174 <_write_r>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	0004      	movs	r4, r0
 800a178:	0008      	movs	r0, r1
 800a17a:	0011      	movs	r1, r2
 800a17c:	001a      	movs	r2, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	4d05      	ldr	r5, [pc, #20]	; (800a198 <_write_r+0x24>)
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7fb fb65 	bl	8005852 <_write>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d103      	bne.n	800a194 <_write_r+0x20>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d000      	beq.n	800a194 <_write_r+0x20>
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	bd70      	pop	{r4, r5, r6, pc}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	20000448 	.word	0x20000448

0800a19c <__assert_func>:
 800a19c:	b530      	push	{r4, r5, lr}
 800a19e:	0014      	movs	r4, r2
 800a1a0:	001a      	movs	r2, r3
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <__assert_func+0x2c>)
 800a1a4:	0005      	movs	r5, r0
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	68d8      	ldr	r0, [r3, #12]
 800a1ac:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <__assert_func+0x30>)
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	d101      	bne.n	800a1b6 <__assert_func+0x1a>
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <__assert_func+0x34>)
 800a1b4:	001c      	movs	r4, r3
 800a1b6:	9301      	str	r3, [sp, #4]
 800a1b8:	9100      	str	r1, [sp, #0]
 800a1ba:	002b      	movs	r3, r5
 800a1bc:	4905      	ldr	r1, [pc, #20]	; (800a1d4 <__assert_func+0x38>)
 800a1be:	9402      	str	r4, [sp, #8]
 800a1c0:	f000 f81c 	bl	800a1fc <fiprintf>
 800a1c4:	f001 fe0c 	bl	800bde0 <abort>
 800a1c8:	20000028 	.word	0x20000028
 800a1cc:	0800d348 	.word	0x0800d348
 800a1d0:	0800d383 	.word	0x0800d383
 800a1d4:	0800d355 	.word	0x0800d355

0800a1d8 <_close_r>:
 800a1d8:	2300      	movs	r3, #0
 800a1da:	b570      	push	{r4, r5, r6, lr}
 800a1dc:	4d06      	ldr	r5, [pc, #24]	; (800a1f8 <_close_r+0x20>)
 800a1de:	0004      	movs	r4, r0
 800a1e0:	0008      	movs	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7fb fb51 	bl	800588a <_close>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d103      	bne.n	800a1f4 <_close_r+0x1c>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d000      	beq.n	800a1f4 <_close_r+0x1c>
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	20000448 	.word	0x20000448

0800a1fc <fiprintf>:
 800a1fc:	b40e      	push	{r1, r2, r3}
 800a1fe:	b503      	push	{r0, r1, lr}
 800a200:	0001      	movs	r1, r0
 800a202:	ab03      	add	r3, sp, #12
 800a204:	4804      	ldr	r0, [pc, #16]	; (800a218 <fiprintf+0x1c>)
 800a206:	cb04      	ldmia	r3!, {r2}
 800a208:	6800      	ldr	r0, [r0, #0]
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	f001 fa36 	bl	800b67c <_vfiprintf_r>
 800a210:	b002      	add	sp, #8
 800a212:	bc08      	pop	{r3}
 800a214:	b003      	add	sp, #12
 800a216:	4718      	bx	r3
 800a218:	20000028 	.word	0x20000028

0800a21c <rshift>:
 800a21c:	0002      	movs	r2, r0
 800a21e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a220:	6907      	ldr	r7, [r0, #16]
 800a222:	3214      	adds	r2, #20
 800a224:	0013      	movs	r3, r2
 800a226:	b085      	sub	sp, #20
 800a228:	114e      	asrs	r6, r1, #5
 800a22a:	42b7      	cmp	r7, r6
 800a22c:	dd31      	ble.n	800a292 <rshift+0x76>
 800a22e:	00b3      	lsls	r3, r6, #2
 800a230:	18d3      	adds	r3, r2, r3
 800a232:	251f      	movs	r5, #31
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	000b      	movs	r3, r1
 800a238:	00bc      	lsls	r4, r7, #2
 800a23a:	402b      	ands	r3, r5
 800a23c:	1914      	adds	r4, r2, r4
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	4229      	tst	r1, r5
 800a242:	d10c      	bne.n	800a25e <rshift+0x42>
 800a244:	0015      	movs	r5, r2
 800a246:	9901      	ldr	r1, [sp, #4]
 800a248:	428c      	cmp	r4, r1
 800a24a:	d838      	bhi.n	800a2be <rshift+0xa2>
 800a24c:	9901      	ldr	r1, [sp, #4]
 800a24e:	2300      	movs	r3, #0
 800a250:	3903      	subs	r1, #3
 800a252:	428c      	cmp	r4, r1
 800a254:	d301      	bcc.n	800a25a <rshift+0x3e>
 800a256:	1bbb      	subs	r3, r7, r6
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	18d3      	adds	r3, r2, r3
 800a25c:	e019      	b.n	800a292 <rshift+0x76>
 800a25e:	2120      	movs	r1, #32
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	9d01      	ldr	r5, [sp, #4]
 800a264:	1acb      	subs	r3, r1, r3
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	cd02      	ldmia	r5!, {r1}
 800a26a:	9b02      	ldr	r3, [sp, #8]
 800a26c:	4694      	mov	ip, r2
 800a26e:	40d9      	lsrs	r1, r3
 800a270:	9100      	str	r1, [sp, #0]
 800a272:	42ac      	cmp	r4, r5
 800a274:	d816      	bhi.n	800a2a4 <rshift+0x88>
 800a276:	9d01      	ldr	r5, [sp, #4]
 800a278:	2300      	movs	r3, #0
 800a27a:	3501      	adds	r5, #1
 800a27c:	42ac      	cmp	r4, r5
 800a27e:	d302      	bcc.n	800a286 <rshift+0x6a>
 800a280:	1bbb      	subs	r3, r7, r6
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	3b04      	subs	r3, #4
 800a286:	9900      	ldr	r1, [sp, #0]
 800a288:	18d3      	adds	r3, r2, r3
 800a28a:	6019      	str	r1, [r3, #0]
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d000      	beq.n	800a292 <rshift+0x76>
 800a290:	3304      	adds	r3, #4
 800a292:	1a99      	subs	r1, r3, r2
 800a294:	1089      	asrs	r1, r1, #2
 800a296:	6101      	str	r1, [r0, #16]
 800a298:	4293      	cmp	r3, r2
 800a29a:	d101      	bne.n	800a2a0 <rshift+0x84>
 800a29c:	2300      	movs	r3, #0
 800a29e:	6143      	str	r3, [r0, #20]
 800a2a0:	b005      	add	sp, #20
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	9903      	ldr	r1, [sp, #12]
 800a2a8:	408b      	lsls	r3, r1
 800a2aa:	9900      	ldr	r1, [sp, #0]
 800a2ac:	4319      	orrs	r1, r3
 800a2ae:	4663      	mov	r3, ip
 800a2b0:	c302      	stmia	r3!, {r1}
 800a2b2:	469c      	mov	ip, r3
 800a2b4:	cd02      	ldmia	r5!, {r1}
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	40d9      	lsrs	r1, r3
 800a2ba:	9100      	str	r1, [sp, #0]
 800a2bc:	e7d9      	b.n	800a272 <rshift+0x56>
 800a2be:	c908      	ldmia	r1!, {r3}
 800a2c0:	c508      	stmia	r5!, {r3}
 800a2c2:	e7c1      	b.n	800a248 <rshift+0x2c>

0800a2c4 <__hexdig_fun>:
 800a2c4:	0002      	movs	r2, r0
 800a2c6:	3a30      	subs	r2, #48	; 0x30
 800a2c8:	0003      	movs	r3, r0
 800a2ca:	2a09      	cmp	r2, #9
 800a2cc:	d802      	bhi.n	800a2d4 <__hexdig_fun+0x10>
 800a2ce:	3b20      	subs	r3, #32
 800a2d0:	b2d8      	uxtb	r0, r3
 800a2d2:	4770      	bx	lr
 800a2d4:	0002      	movs	r2, r0
 800a2d6:	3a61      	subs	r2, #97	; 0x61
 800a2d8:	2a05      	cmp	r2, #5
 800a2da:	d801      	bhi.n	800a2e0 <__hexdig_fun+0x1c>
 800a2dc:	3b47      	subs	r3, #71	; 0x47
 800a2de:	e7f7      	b.n	800a2d0 <__hexdig_fun+0xc>
 800a2e0:	001a      	movs	r2, r3
 800a2e2:	3a41      	subs	r2, #65	; 0x41
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	2a05      	cmp	r2, #5
 800a2e8:	d8f3      	bhi.n	800a2d2 <__hexdig_fun+0xe>
 800a2ea:	3b27      	subs	r3, #39	; 0x27
 800a2ec:	e7f0      	b.n	800a2d0 <__hexdig_fun+0xc>
	...

0800a2f0 <__gethex>:
 800a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2f2:	b08d      	sub	sp, #52	; 0x34
 800a2f4:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f6:	4bbd      	ldr	r3, [pc, #756]	; (800a5ec <__gethex+0x2fc>)
 800a2f8:	9005      	str	r0, [sp, #20]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a2fe:	0018      	movs	r0, r3
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f7f5 ff0a 	bl	800011c <strlen>
 800a308:	2202      	movs	r2, #2
 800a30a:	9b07      	ldr	r3, [sp, #28]
 800a30c:	4252      	negs	r2, r2
 800a30e:	181b      	adds	r3, r3, r0
 800a310:	3b01      	subs	r3, #1
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	9003      	str	r0, [sp, #12]
 800a316:	930b      	str	r3, [sp, #44]	; 0x2c
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	6819      	ldr	r1, [r3, #0]
 800a31c:	1c8b      	adds	r3, r1, #2
 800a31e:	1a52      	subs	r2, r2, r1
 800a320:	18d1      	adds	r1, r2, r3
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	9108      	str	r1, [sp, #32]
 800a326:	9901      	ldr	r1, [sp, #4]
 800a328:	3301      	adds	r3, #1
 800a32a:	7808      	ldrb	r0, [r1, #0]
 800a32c:	2830      	cmp	r0, #48	; 0x30
 800a32e:	d0f7      	beq.n	800a320 <__gethex+0x30>
 800a330:	f7ff ffc8 	bl	800a2c4 <__hexdig_fun>
 800a334:	1e04      	subs	r4, r0, #0
 800a336:	d13e      	bne.n	800a3b6 <__gethex+0xc6>
 800a338:	9a03      	ldr	r2, [sp, #12]
 800a33a:	9907      	ldr	r1, [sp, #28]
 800a33c:	9801      	ldr	r0, [sp, #4]
 800a33e:	f7ff f8a9 	bl	8009494 <strncmp>
 800a342:	1e07      	subs	r7, r0, #0
 800a344:	d000      	beq.n	800a348 <__gethex+0x58>
 800a346:	e06f      	b.n	800a428 <__gethex+0x138>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	9a03      	ldr	r2, [sp, #12]
 800a34c:	5c98      	ldrb	r0, [r3, r2]
 800a34e:	189d      	adds	r5, r3, r2
 800a350:	f7ff ffb8 	bl	800a2c4 <__hexdig_fun>
 800a354:	2301      	movs	r3, #1
 800a356:	9304      	str	r3, [sp, #16]
 800a358:	2800      	cmp	r0, #0
 800a35a:	d034      	beq.n	800a3c6 <__gethex+0xd6>
 800a35c:	9501      	str	r5, [sp, #4]
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	7818      	ldrb	r0, [r3, #0]
 800a362:	2830      	cmp	r0, #48	; 0x30
 800a364:	d009      	beq.n	800a37a <__gethex+0x8a>
 800a366:	f7ff ffad 	bl	800a2c4 <__hexdig_fun>
 800a36a:	4243      	negs	r3, r0
 800a36c:	4143      	adcs	r3, r0
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	2301      	movs	r3, #1
 800a372:	002c      	movs	r4, r5
 800a374:	9308      	str	r3, [sp, #32]
 800a376:	9d01      	ldr	r5, [sp, #4]
 800a378:	e004      	b.n	800a384 <__gethex+0x94>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	3301      	adds	r3, #1
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	e7ed      	b.n	800a35e <__gethex+0x6e>
 800a382:	3501      	adds	r5, #1
 800a384:	7828      	ldrb	r0, [r5, #0]
 800a386:	f7ff ff9d 	bl	800a2c4 <__hexdig_fun>
 800a38a:	1e07      	subs	r7, r0, #0
 800a38c:	d1f9      	bne.n	800a382 <__gethex+0x92>
 800a38e:	0028      	movs	r0, r5
 800a390:	9a03      	ldr	r2, [sp, #12]
 800a392:	9907      	ldr	r1, [sp, #28]
 800a394:	f7ff f87e 	bl	8009494 <strncmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d112      	bne.n	800a3c2 <__gethex+0xd2>
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	d107      	bne.n	800a3b0 <__gethex+0xc0>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	18ed      	adds	r5, r5, r3
 800a3a4:	002c      	movs	r4, r5
 800a3a6:	7828      	ldrb	r0, [r5, #0]
 800a3a8:	f7ff ff8c 	bl	800a2c4 <__hexdig_fun>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d106      	bne.n	800a3be <__gethex+0xce>
 800a3b0:	1b67      	subs	r7, r4, r5
 800a3b2:	00bf      	lsls	r7, r7, #2
 800a3b4:	e007      	b.n	800a3c6 <__gethex+0xd6>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	001c      	movs	r4, r3
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	e7db      	b.n	800a376 <__gethex+0x86>
 800a3be:	3501      	adds	r5, #1
 800a3c0:	e7f1      	b.n	800a3a6 <__gethex+0xb6>
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d1f4      	bne.n	800a3b0 <__gethex+0xc0>
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	782b      	ldrb	r3, [r5, #0]
 800a3ca:	002e      	movs	r6, r5
 800a3cc:	4393      	bics	r3, r2
 800a3ce:	2b50      	cmp	r3, #80	; 0x50
 800a3d0:	d11d      	bne.n	800a40e <__gethex+0x11e>
 800a3d2:	786b      	ldrb	r3, [r5, #1]
 800a3d4:	2b2b      	cmp	r3, #43	; 0x2b
 800a3d6:	d02c      	beq.n	800a432 <__gethex+0x142>
 800a3d8:	2b2d      	cmp	r3, #45	; 0x2d
 800a3da:	d02e      	beq.n	800a43a <__gethex+0x14a>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	1c6e      	adds	r6, r5, #1
 800a3e0:	9306      	str	r3, [sp, #24]
 800a3e2:	7830      	ldrb	r0, [r6, #0]
 800a3e4:	f7ff ff6e 	bl	800a2c4 <__hexdig_fun>
 800a3e8:	1e43      	subs	r3, r0, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b18      	cmp	r3, #24
 800a3ee:	d82b      	bhi.n	800a448 <__gethex+0x158>
 800a3f0:	3810      	subs	r0, #16
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	7870      	ldrb	r0, [r6, #1]
 800a3f6:	f7ff ff65 	bl	800a2c4 <__hexdig_fun>
 800a3fa:	1e43      	subs	r3, r0, #1
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	3601      	adds	r6, #1
 800a400:	2b18      	cmp	r3, #24
 800a402:	d91c      	bls.n	800a43e <__gethex+0x14e>
 800a404:	9b06      	ldr	r3, [sp, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d000      	beq.n	800a40c <__gethex+0x11c>
 800a40a:	4264      	negs	r4, r4
 800a40c:	193f      	adds	r7, r7, r4
 800a40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a410:	601e      	str	r6, [r3, #0]
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d019      	beq.n	800a44c <__gethex+0x15c>
 800a418:	2600      	movs	r6, #0
 800a41a:	9b08      	ldr	r3, [sp, #32]
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	d100      	bne.n	800a422 <__gethex+0x132>
 800a420:	3606      	adds	r6, #6
 800a422:	0030      	movs	r0, r6
 800a424:	b00d      	add	sp, #52	; 0x34
 800a426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a428:	2301      	movs	r3, #1
 800a42a:	0027      	movs	r7, r4
 800a42c:	9d01      	ldr	r5, [sp, #4]
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	e7c9      	b.n	800a3c6 <__gethex+0xd6>
 800a432:	2300      	movs	r3, #0
 800a434:	9306      	str	r3, [sp, #24]
 800a436:	1cae      	adds	r6, r5, #2
 800a438:	e7d3      	b.n	800a3e2 <__gethex+0xf2>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7fa      	b.n	800a434 <__gethex+0x144>
 800a43e:	230a      	movs	r3, #10
 800a440:	435c      	muls	r4, r3
 800a442:	1824      	adds	r4, r4, r0
 800a444:	3c10      	subs	r4, #16
 800a446:	e7d5      	b.n	800a3f4 <__gethex+0x104>
 800a448:	002e      	movs	r6, r5
 800a44a:	e7e0      	b.n	800a40e <__gethex+0x11e>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	9904      	ldr	r1, [sp, #16]
 800a450:	1aeb      	subs	r3, r5, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	2b07      	cmp	r3, #7
 800a456:	dc0a      	bgt.n	800a46e <__gethex+0x17e>
 800a458:	9805      	ldr	r0, [sp, #20]
 800a45a:	f000 fa87 	bl	800a96c <_Balloc>
 800a45e:	1e04      	subs	r4, r0, #0
 800a460:	d108      	bne.n	800a474 <__gethex+0x184>
 800a462:	0002      	movs	r2, r0
 800a464:	21de      	movs	r1, #222	; 0xde
 800a466:	4b62      	ldr	r3, [pc, #392]	; (800a5f0 <__gethex+0x300>)
 800a468:	4862      	ldr	r0, [pc, #392]	; (800a5f4 <__gethex+0x304>)
 800a46a:	f7ff fe97 	bl	800a19c <__assert_func>
 800a46e:	3101      	adds	r1, #1
 800a470:	105b      	asrs	r3, r3, #1
 800a472:	e7ef      	b.n	800a454 <__gethex+0x164>
 800a474:	0003      	movs	r3, r0
 800a476:	3314      	adds	r3, #20
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	9309      	str	r3, [sp, #36]	; 0x24
 800a47c:	2300      	movs	r3, #0
 800a47e:	001e      	movs	r6, r3
 800a480:	9306      	str	r3, [sp, #24]
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	42ab      	cmp	r3, r5
 800a486:	d340      	bcc.n	800a50a <__gethex+0x21a>
 800a488:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a48a:	9b04      	ldr	r3, [sp, #16]
 800a48c:	c540      	stmia	r5!, {r6}
 800a48e:	1aed      	subs	r5, r5, r3
 800a490:	10ad      	asrs	r5, r5, #2
 800a492:	0030      	movs	r0, r6
 800a494:	6125      	str	r5, [r4, #16]
 800a496:	f000 fb61 	bl	800ab5c <__hi0bits>
 800a49a:	9b02      	ldr	r3, [sp, #8]
 800a49c:	016d      	lsls	r5, r5, #5
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	1a2e      	subs	r6, r5, r0
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	429e      	cmp	r6, r3
 800a4a6:	dd5a      	ble.n	800a55e <__gethex+0x26e>
 800a4a8:	1af6      	subs	r6, r6, r3
 800a4aa:	0031      	movs	r1, r6
 800a4ac:	0020      	movs	r0, r4
 800a4ae:	f000 ff04 	bl	800b2ba <__any_on>
 800a4b2:	1e05      	subs	r5, r0, #0
 800a4b4:	d016      	beq.n	800a4e4 <__gethex+0x1f4>
 800a4b6:	2501      	movs	r5, #1
 800a4b8:	211f      	movs	r1, #31
 800a4ba:	0028      	movs	r0, r5
 800a4bc:	1e73      	subs	r3, r6, #1
 800a4be:	4019      	ands	r1, r3
 800a4c0:	4088      	lsls	r0, r1
 800a4c2:	0001      	movs	r1, r0
 800a4c4:	115a      	asrs	r2, r3, #5
 800a4c6:	9804      	ldr	r0, [sp, #16]
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	5812      	ldr	r2, [r2, r0]
 800a4cc:	420a      	tst	r2, r1
 800a4ce:	d009      	beq.n	800a4e4 <__gethex+0x1f4>
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	dd06      	ble.n	800a4e2 <__gethex+0x1f2>
 800a4d4:	0020      	movs	r0, r4
 800a4d6:	1eb1      	subs	r1, r6, #2
 800a4d8:	f000 feef 	bl	800b2ba <__any_on>
 800a4dc:	3502      	adds	r5, #2
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d100      	bne.n	800a4e4 <__gethex+0x1f4>
 800a4e2:	2502      	movs	r5, #2
 800a4e4:	0031      	movs	r1, r6
 800a4e6:	0020      	movs	r0, r4
 800a4e8:	f7ff fe98 	bl	800a21c <rshift>
 800a4ec:	19bf      	adds	r7, r7, r6
 800a4ee:	9b02      	ldr	r3, [sp, #8]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	42bb      	cmp	r3, r7
 800a4f6:	da42      	bge.n	800a57e <__gethex+0x28e>
 800a4f8:	0021      	movs	r1, r4
 800a4fa:	9805      	ldr	r0, [sp, #20]
 800a4fc:	f000 fa7a 	bl	800a9f4 <_Bfree>
 800a500:	2300      	movs	r3, #0
 800a502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a504:	26a3      	movs	r6, #163	; 0xa3
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	e78b      	b.n	800a422 <__gethex+0x132>
 800a50a:	1e6b      	subs	r3, r5, #1
 800a50c:	9308      	str	r3, [sp, #32]
 800a50e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	4293      	cmp	r3, r2
 800a514:	d014      	beq.n	800a540 <__gethex+0x250>
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	2b20      	cmp	r3, #32
 800a51a:	d104      	bne.n	800a526 <__gethex+0x236>
 800a51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51e:	c340      	stmia	r3!, {r6}
 800a520:	2600      	movs	r6, #0
 800a522:	9309      	str	r3, [sp, #36]	; 0x24
 800a524:	9606      	str	r6, [sp, #24]
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	7818      	ldrb	r0, [r3, #0]
 800a52a:	f7ff fecb 	bl	800a2c4 <__hexdig_fun>
 800a52e:	230f      	movs	r3, #15
 800a530:	4018      	ands	r0, r3
 800a532:	9b06      	ldr	r3, [sp, #24]
 800a534:	9d08      	ldr	r5, [sp, #32]
 800a536:	4098      	lsls	r0, r3
 800a538:	3304      	adds	r3, #4
 800a53a:	4306      	orrs	r6, r0
 800a53c:	9306      	str	r3, [sp, #24]
 800a53e:	e7a0      	b.n	800a482 <__gethex+0x192>
 800a540:	2301      	movs	r3, #1
 800a542:	9a03      	ldr	r2, [sp, #12]
 800a544:	1a9d      	subs	r5, r3, r2
 800a546:	9b08      	ldr	r3, [sp, #32]
 800a548:	195d      	adds	r5, r3, r5
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	429d      	cmp	r5, r3
 800a54e:	d3e2      	bcc.n	800a516 <__gethex+0x226>
 800a550:	0028      	movs	r0, r5
 800a552:	9907      	ldr	r1, [sp, #28]
 800a554:	f7fe ff9e 	bl	8009494 <strncmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d1dc      	bne.n	800a516 <__gethex+0x226>
 800a55c:	e791      	b.n	800a482 <__gethex+0x192>
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	2500      	movs	r5, #0
 800a562:	429e      	cmp	r6, r3
 800a564:	dac3      	bge.n	800a4ee <__gethex+0x1fe>
 800a566:	1b9e      	subs	r6, r3, r6
 800a568:	0021      	movs	r1, r4
 800a56a:	0032      	movs	r2, r6
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	f000 fc5f 	bl	800ae30 <__lshift>
 800a572:	0003      	movs	r3, r0
 800a574:	3314      	adds	r3, #20
 800a576:	0004      	movs	r4, r0
 800a578:	1bbf      	subs	r7, r7, r6
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	e7b7      	b.n	800a4ee <__gethex+0x1fe>
 800a57e:	9b02      	ldr	r3, [sp, #8]
 800a580:	685e      	ldr	r6, [r3, #4]
 800a582:	42be      	cmp	r6, r7
 800a584:	dd71      	ble.n	800a66a <__gethex+0x37a>
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	1bf6      	subs	r6, r6, r7
 800a58a:	42b3      	cmp	r3, r6
 800a58c:	dc38      	bgt.n	800a600 <__gethex+0x310>
 800a58e:	9b02      	ldr	r3, [sp, #8]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d026      	beq.n	800a5e4 <__gethex+0x2f4>
 800a596:	2b03      	cmp	r3, #3
 800a598:	d02e      	beq.n	800a5f8 <__gethex+0x308>
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d119      	bne.n	800a5d2 <__gethex+0x2e2>
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	42b3      	cmp	r3, r6
 800a5a2:	d116      	bne.n	800a5d2 <__gethex+0x2e2>
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d10d      	bne.n	800a5c4 <__gethex+0x2d4>
 800a5a8:	9b02      	ldr	r3, [sp, #8]
 800a5aa:	2662      	movs	r6, #98	; 0x62
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	9a01      	ldr	r2, [sp, #4]
 800a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	9a04      	ldr	r2, [sp, #16]
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5c0:	601c      	str	r4, [r3, #0]
 800a5c2:	e72e      	b.n	800a422 <__gethex+0x132>
 800a5c4:	9901      	ldr	r1, [sp, #4]
 800a5c6:	0020      	movs	r0, r4
 800a5c8:	3901      	subs	r1, #1
 800a5ca:	f000 fe76 	bl	800b2ba <__any_on>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d1ea      	bne.n	800a5a8 <__gethex+0x2b8>
 800a5d2:	0021      	movs	r1, r4
 800a5d4:	9805      	ldr	r0, [sp, #20]
 800a5d6:	f000 fa0d 	bl	800a9f4 <_Bfree>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5de:	2650      	movs	r6, #80	; 0x50
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	e71e      	b.n	800a422 <__gethex+0x132>
 800a5e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f3      	bne.n	800a5d2 <__gethex+0x2e2>
 800a5ea:	e7dd      	b.n	800a5a8 <__gethex+0x2b8>
 800a5ec:	0800d400 	.word	0x0800d400
 800a5f0:	0800d384 	.word	0x0800d384
 800a5f4:	0800d395 	.word	0x0800d395
 800a5f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1d4      	bne.n	800a5a8 <__gethex+0x2b8>
 800a5fe:	e7e8      	b.n	800a5d2 <__gethex+0x2e2>
 800a600:	1e77      	subs	r7, r6, #1
 800a602:	2d00      	cmp	r5, #0
 800a604:	d12f      	bne.n	800a666 <__gethex+0x376>
 800a606:	2f00      	cmp	r7, #0
 800a608:	d004      	beq.n	800a614 <__gethex+0x324>
 800a60a:	0039      	movs	r1, r7
 800a60c:	0020      	movs	r0, r4
 800a60e:	f000 fe54 	bl	800b2ba <__any_on>
 800a612:	0005      	movs	r5, r0
 800a614:	231f      	movs	r3, #31
 800a616:	117a      	asrs	r2, r7, #5
 800a618:	401f      	ands	r7, r3
 800a61a:	3b1e      	subs	r3, #30
 800a61c:	40bb      	lsls	r3, r7
 800a61e:	9904      	ldr	r1, [sp, #16]
 800a620:	0092      	lsls	r2, r2, #2
 800a622:	5852      	ldr	r2, [r2, r1]
 800a624:	421a      	tst	r2, r3
 800a626:	d001      	beq.n	800a62c <__gethex+0x33c>
 800a628:	2302      	movs	r3, #2
 800a62a:	431d      	orrs	r5, r3
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	0031      	movs	r1, r6
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	2602      	movs	r6, #2
 800a634:	0020      	movs	r0, r4
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f7ff fdf0 	bl	800a21c <rshift>
 800a63c:	9b02      	ldr	r3, [sp, #8]
 800a63e:	685f      	ldr	r7, [r3, #4]
 800a640:	2d00      	cmp	r5, #0
 800a642:	d041      	beq.n	800a6c8 <__gethex+0x3d8>
 800a644:	9b02      	ldr	r3, [sp, #8]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d010      	beq.n	800a66e <__gethex+0x37e>
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d012      	beq.n	800a676 <__gethex+0x386>
 800a650:	2b01      	cmp	r3, #1
 800a652:	d106      	bne.n	800a662 <__gethex+0x372>
 800a654:	07aa      	lsls	r2, r5, #30
 800a656:	d504      	bpl.n	800a662 <__gethex+0x372>
 800a658:	9a04      	ldr	r2, [sp, #16]
 800a65a:	6810      	ldr	r0, [r2, #0]
 800a65c:	4305      	orrs	r5, r0
 800a65e:	421d      	tst	r5, r3
 800a660:	d10c      	bne.n	800a67c <__gethex+0x38c>
 800a662:	2310      	movs	r3, #16
 800a664:	e02f      	b.n	800a6c6 <__gethex+0x3d6>
 800a666:	2501      	movs	r5, #1
 800a668:	e7d4      	b.n	800a614 <__gethex+0x324>
 800a66a:	2601      	movs	r6, #1
 800a66c:	e7e8      	b.n	800a640 <__gethex+0x350>
 800a66e:	2301      	movs	r3, #1
 800a670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a672:	1a9b      	subs	r3, r3, r2
 800a674:	9313      	str	r3, [sp, #76]	; 0x4c
 800a676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0f2      	beq.n	800a662 <__gethex+0x372>
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	2000      	movs	r0, #0
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	0023      	movs	r3, r4
 800a688:	9a04      	ldr	r2, [sp, #16]
 800a68a:	3314      	adds	r3, #20
 800a68c:	1899      	adds	r1, r3, r2
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	1c55      	adds	r5, r2, #1
 800a692:	d01e      	beq.n	800a6d2 <__gethex+0x3e2>
 800a694:	3201      	adds	r2, #1
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	0023      	movs	r3, r4
 800a69a:	3314      	adds	r3, #20
 800a69c:	2e02      	cmp	r6, #2
 800a69e:	d140      	bne.n	800a722 <__gethex+0x432>
 800a6a0:	9a02      	ldr	r2, [sp, #8]
 800a6a2:	9901      	ldr	r1, [sp, #4]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	3a01      	subs	r2, #1
 800a6a8:	428a      	cmp	r2, r1
 800a6aa:	d10b      	bne.n	800a6c4 <__gethex+0x3d4>
 800a6ac:	114a      	asrs	r2, r1, #5
 800a6ae:	211f      	movs	r1, #31
 800a6b0:	9801      	ldr	r0, [sp, #4]
 800a6b2:	0092      	lsls	r2, r2, #2
 800a6b4:	4001      	ands	r1, r0
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	0005      	movs	r5, r0
 800a6ba:	408d      	lsls	r5, r1
 800a6bc:	58d3      	ldr	r3, [r2, r3]
 800a6be:	422b      	tst	r3, r5
 800a6c0:	d000      	beq.n	800a6c4 <__gethex+0x3d4>
 800a6c2:	2601      	movs	r6, #1
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	431e      	orrs	r6, r3
 800a6c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ca:	601c      	str	r4, [r3, #0]
 800a6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ce:	601f      	str	r7, [r3, #0]
 800a6d0:	e6a7      	b.n	800a422 <__gethex+0x132>
 800a6d2:	c301      	stmia	r3!, {r0}
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d8da      	bhi.n	800a68e <__gethex+0x39e>
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	68a2      	ldr	r2, [r4, #8]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	db17      	blt.n	800a710 <__gethex+0x420>
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	9805      	ldr	r0, [sp, #20]
 800a6e4:	1c59      	adds	r1, r3, #1
 800a6e6:	f000 f941 	bl	800a96c <_Balloc>
 800a6ea:	1e05      	subs	r5, r0, #0
 800a6ec:	d103      	bne.n	800a6f6 <__gethex+0x406>
 800a6ee:	0002      	movs	r2, r0
 800a6f0:	2184      	movs	r1, #132	; 0x84
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <__gethex+0x474>)
 800a6f4:	e6b8      	b.n	800a468 <__gethex+0x178>
 800a6f6:	0021      	movs	r1, r4
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	310c      	adds	r1, #12
 800a6fc:	1c9a      	adds	r2, r3, #2
 800a6fe:	0092      	lsls	r2, r2, #2
 800a700:	300c      	adds	r0, #12
 800a702:	f7fe fd03 	bl	800910c <memcpy>
 800a706:	0021      	movs	r1, r4
 800a708:	9805      	ldr	r0, [sp, #20]
 800a70a:	f000 f973 	bl	800a9f4 <_Bfree>
 800a70e:	002c      	movs	r4, r5
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	6122      	str	r2, [r4, #16]
 800a716:	2201      	movs	r2, #1
 800a718:	3304      	adds	r3, #4
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	18e3      	adds	r3, r4, r3
 800a71e:	605a      	str	r2, [r3, #4]
 800a720:	e7ba      	b.n	800a698 <__gethex+0x3a8>
 800a722:	6922      	ldr	r2, [r4, #16]
 800a724:	9903      	ldr	r1, [sp, #12]
 800a726:	428a      	cmp	r2, r1
 800a728:	dd09      	ble.n	800a73e <__gethex+0x44e>
 800a72a:	2101      	movs	r1, #1
 800a72c:	0020      	movs	r0, r4
 800a72e:	f7ff fd75 	bl	800a21c <rshift>
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	3701      	adds	r7, #1
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	42bb      	cmp	r3, r7
 800a73a:	dac2      	bge.n	800a6c2 <__gethex+0x3d2>
 800a73c:	e6dc      	b.n	800a4f8 <__gethex+0x208>
 800a73e:	221f      	movs	r2, #31
 800a740:	9d01      	ldr	r5, [sp, #4]
 800a742:	9901      	ldr	r1, [sp, #4]
 800a744:	2601      	movs	r6, #1
 800a746:	4015      	ands	r5, r2
 800a748:	4211      	tst	r1, r2
 800a74a:	d0bb      	beq.n	800a6c4 <__gethex+0x3d4>
 800a74c:	9a04      	ldr	r2, [sp, #16]
 800a74e:	189b      	adds	r3, r3, r2
 800a750:	3b04      	subs	r3, #4
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	f000 fa02 	bl	800ab5c <__hi0bits>
 800a758:	2320      	movs	r3, #32
 800a75a:	1b5d      	subs	r5, r3, r5
 800a75c:	42a8      	cmp	r0, r5
 800a75e:	dbe4      	blt.n	800a72a <__gethex+0x43a>
 800a760:	e7b0      	b.n	800a6c4 <__gethex+0x3d4>
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	0800d384 	.word	0x0800d384

0800a768 <L_shift>:
 800a768:	2308      	movs	r3, #8
 800a76a:	b570      	push	{r4, r5, r6, lr}
 800a76c:	2520      	movs	r5, #32
 800a76e:	1a9a      	subs	r2, r3, r2
 800a770:	0092      	lsls	r2, r2, #2
 800a772:	1aad      	subs	r5, r5, r2
 800a774:	6843      	ldr	r3, [r0, #4]
 800a776:	6806      	ldr	r6, [r0, #0]
 800a778:	001c      	movs	r4, r3
 800a77a:	40ac      	lsls	r4, r5
 800a77c:	40d3      	lsrs	r3, r2
 800a77e:	4334      	orrs	r4, r6
 800a780:	6004      	str	r4, [r0, #0]
 800a782:	6043      	str	r3, [r0, #4]
 800a784:	3004      	adds	r0, #4
 800a786:	4288      	cmp	r0, r1
 800a788:	d3f4      	bcc.n	800a774 <L_shift+0xc>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}

0800a78c <__match>:
 800a78c:	b530      	push	{r4, r5, lr}
 800a78e:	6803      	ldr	r3, [r0, #0]
 800a790:	780c      	ldrb	r4, [r1, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	2c00      	cmp	r4, #0
 800a796:	d102      	bne.n	800a79e <__match+0x12>
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	2001      	movs	r0, #1
 800a79c:	bd30      	pop	{r4, r5, pc}
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	0015      	movs	r5, r2
 800a7a2:	3d41      	subs	r5, #65	; 0x41
 800a7a4:	2d19      	cmp	r5, #25
 800a7a6:	d800      	bhi.n	800a7aa <__match+0x1e>
 800a7a8:	3220      	adds	r2, #32
 800a7aa:	3101      	adds	r1, #1
 800a7ac:	42a2      	cmp	r2, r4
 800a7ae:	d0ef      	beq.n	800a790 <__match+0x4>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e7f3      	b.n	800a79c <__match+0x10>

0800a7b4 <__hexnan>:
 800a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b6:	680b      	ldr	r3, [r1, #0]
 800a7b8:	b08b      	sub	sp, #44	; 0x2c
 800a7ba:	115c      	asrs	r4, r3, #5
 800a7bc:	00a4      	lsls	r4, r4, #2
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	1912      	adds	r2, r2, r4
 800a7c2:	0019      	movs	r1, r3
 800a7c4:	9202      	str	r2, [sp, #8]
 800a7c6:	221f      	movs	r2, #31
 800a7c8:	4011      	ands	r1, r2
 800a7ca:	9008      	str	r0, [sp, #32]
 800a7cc:	9106      	str	r1, [sp, #24]
 800a7ce:	4213      	tst	r3, r2
 800a7d0:	d002      	beq.n	800a7d8 <__hexnan+0x24>
 800a7d2:	9b02      	ldr	r3, [sp, #8]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	9302      	str	r3, [sp, #8]
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	2500      	movs	r5, #0
 800a7dc:	1f1e      	subs	r6, r3, #4
 800a7de:	0037      	movs	r7, r6
 800a7e0:	0034      	movs	r4, r6
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	6035      	str	r5, [r6, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	9507      	str	r5, [sp, #28]
 800a7ea:	9305      	str	r3, [sp, #20]
 800a7ec:	9503      	str	r5, [sp, #12]
 800a7ee:	9b05      	ldr	r3, [sp, #20]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f4:	9b05      	ldr	r3, [sp, #20]
 800a7f6:	785b      	ldrb	r3, [r3, #1]
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d028      	beq.n	800a850 <__hexnan+0x9c>
 800a7fe:	9804      	ldr	r0, [sp, #16]
 800a800:	f7ff fd60 	bl	800a2c4 <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d154      	bne.n	800a8b2 <__hexnan+0xfe>
 800a808:	9b04      	ldr	r3, [sp, #16]
 800a80a:	2b20      	cmp	r3, #32
 800a80c:	d819      	bhi.n	800a842 <__hexnan+0x8e>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	9a07      	ldr	r2, [sp, #28]
 800a812:	4293      	cmp	r3, r2
 800a814:	dd12      	ble.n	800a83c <__hexnan+0x88>
 800a816:	42bc      	cmp	r4, r7
 800a818:	d206      	bcs.n	800a828 <__hexnan+0x74>
 800a81a:	2d07      	cmp	r5, #7
 800a81c:	dc04      	bgt.n	800a828 <__hexnan+0x74>
 800a81e:	002a      	movs	r2, r5
 800a820:	0039      	movs	r1, r7
 800a822:	0020      	movs	r0, r4
 800a824:	f7ff ffa0 	bl	800a768 <L_shift>
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	2508      	movs	r5, #8
 800a82c:	429c      	cmp	r4, r3
 800a82e:	d905      	bls.n	800a83c <__hexnan+0x88>
 800a830:	1f27      	subs	r7, r4, #4
 800a832:	2500      	movs	r5, #0
 800a834:	003c      	movs	r4, r7
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	603d      	str	r5, [r7, #0]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	e7d5      	b.n	800a7ee <__hexnan+0x3a>
 800a842:	9b04      	ldr	r3, [sp, #16]
 800a844:	2b29      	cmp	r3, #41	; 0x29
 800a846:	d158      	bne.n	800a8fa <__hexnan+0x146>
 800a848:	9b05      	ldr	r3, [sp, #20]
 800a84a:	9a08      	ldr	r2, [sp, #32]
 800a84c:	3302      	adds	r3, #2
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d051      	beq.n	800a8fa <__hexnan+0x146>
 800a856:	42bc      	cmp	r4, r7
 800a858:	d206      	bcs.n	800a868 <__hexnan+0xb4>
 800a85a:	2d07      	cmp	r5, #7
 800a85c:	dc04      	bgt.n	800a868 <__hexnan+0xb4>
 800a85e:	002a      	movs	r2, r5
 800a860:	0039      	movs	r1, r7
 800a862:	0020      	movs	r0, r4
 800a864:	f7ff ff80 	bl	800a768 <L_shift>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d935      	bls.n	800a8da <__hexnan+0x126>
 800a86e:	001a      	movs	r2, r3
 800a870:	0023      	movs	r3, r4
 800a872:	cb02      	ldmia	r3!, {r1}
 800a874:	c202      	stmia	r2!, {r1}
 800a876:	429e      	cmp	r6, r3
 800a878:	d2fb      	bcs.n	800a872 <__hexnan+0xbe>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	1c61      	adds	r1, r4, #1
 800a87e:	1eda      	subs	r2, r3, #3
 800a880:	2304      	movs	r3, #4
 800a882:	4291      	cmp	r1, r2
 800a884:	d805      	bhi.n	800a892 <__hexnan+0xde>
 800a886:	9b02      	ldr	r3, [sp, #8]
 800a888:	3b04      	subs	r3, #4
 800a88a:	1b1c      	subs	r4, r3, r4
 800a88c:	08a4      	lsrs	r4, r4, #2
 800a88e:	3401      	adds	r4, #1
 800a890:	00a3      	lsls	r3, r4, #2
 800a892:	9a01      	ldr	r2, [sp, #4]
 800a894:	18d4      	adds	r4, r2, r3
 800a896:	2300      	movs	r3, #0
 800a898:	c408      	stmia	r4!, {r3}
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	d2fc      	bcs.n	800a898 <__hexnan+0xe4>
 800a89e:	6833      	ldr	r3, [r6, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <__hexnan+0xfa>
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	429e      	cmp	r6, r3
 800a8a8:	d125      	bne.n	800a8f6 <__hexnan+0x142>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	2005      	movs	r0, #5
 800a8b0:	e024      	b.n	800a8fc <__hexnan+0x148>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	9303      	str	r3, [sp, #12]
 800a8ba:	2d08      	cmp	r5, #8
 800a8bc:	dd06      	ble.n	800a8cc <__hexnan+0x118>
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	d9bb      	bls.n	800a83c <__hexnan+0x88>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2501      	movs	r5, #1
 800a8c8:	3c04      	subs	r4, #4
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	220f      	movs	r2, #15
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	4010      	ands	r0, r2
 800a8d2:	011b      	lsls	r3, r3, #4
 800a8d4:	4318      	orrs	r0, r3
 800a8d6:	6020      	str	r0, [r4, #0]
 800a8d8:	e7b0      	b.n	800a83c <__hexnan+0x88>
 800a8da:	9b06      	ldr	r3, [sp, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0de      	beq.n	800a89e <__hexnan+0xea>
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	425b      	negs	r3, r3
 800a8e8:	40d3      	lsrs	r3, r2
 800a8ea:	9c02      	ldr	r4, [sp, #8]
 800a8ec:	3c04      	subs	r4, #4
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	e7d3      	b.n	800a89e <__hexnan+0xea>
 800a8f6:	3e04      	subs	r6, #4
 800a8f8:	e7d1      	b.n	800a89e <__hexnan+0xea>
 800a8fa:	2004      	movs	r0, #4
 800a8fc:	b00b      	add	sp, #44	; 0x2c
 800a8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a900 <_lseek_r>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	0004      	movs	r4, r0
 800a904:	0008      	movs	r0, r1
 800a906:	0011      	movs	r1, r2
 800a908:	001a      	movs	r2, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	4d05      	ldr	r5, [pc, #20]	; (800a924 <_lseek_r+0x24>)
 800a90e:	602b      	str	r3, [r5, #0]
 800a910:	f7fa ffdc 	bl	80058cc <_lseek>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d103      	bne.n	800a920 <_lseek_r+0x20>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d000      	beq.n	800a920 <_lseek_r+0x20>
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	20000448 	.word	0x20000448

0800a928 <__ascii_mbtowc>:
 800a928:	b082      	sub	sp, #8
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d100      	bne.n	800a930 <__ascii_mbtowc+0x8>
 800a92e:	a901      	add	r1, sp, #4
 800a930:	1e10      	subs	r0, r2, #0
 800a932:	d006      	beq.n	800a942 <__ascii_mbtowc+0x1a>
 800a934:	2b00      	cmp	r3, #0
 800a936:	d006      	beq.n	800a946 <__ascii_mbtowc+0x1e>
 800a938:	7813      	ldrb	r3, [r2, #0]
 800a93a:	600b      	str	r3, [r1, #0]
 800a93c:	7810      	ldrb	r0, [r2, #0]
 800a93e:	1e43      	subs	r3, r0, #1
 800a940:	4198      	sbcs	r0, r3
 800a942:	b002      	add	sp, #8
 800a944:	4770      	bx	lr
 800a946:	2002      	movs	r0, #2
 800a948:	4240      	negs	r0, r0
 800a94a:	e7fa      	b.n	800a942 <__ascii_mbtowc+0x1a>

0800a94c <__malloc_lock>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4802      	ldr	r0, [pc, #8]	; (800a958 <__malloc_lock+0xc>)
 800a950:	f001 fc1d 	bl	800c18e <__retarget_lock_acquire_recursive>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	20000450 	.word	0x20000450

0800a95c <__malloc_unlock>:
 800a95c:	b510      	push	{r4, lr}
 800a95e:	4802      	ldr	r0, [pc, #8]	; (800a968 <__malloc_unlock+0xc>)
 800a960:	f001 fc16 	bl	800c190 <__retarget_lock_release_recursive>
 800a964:	bd10      	pop	{r4, pc}
 800a966:	46c0      	nop			; (mov r8, r8)
 800a968:	20000450 	.word	0x20000450

0800a96c <_Balloc>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a970:	0006      	movs	r6, r0
 800a972:	000c      	movs	r4, r1
 800a974:	2d00      	cmp	r5, #0
 800a976:	d10e      	bne.n	800a996 <_Balloc+0x2a>
 800a978:	2010      	movs	r0, #16
 800a97a:	f7fe fbb3 	bl	80090e4 <malloc>
 800a97e:	1e02      	subs	r2, r0, #0
 800a980:	6270      	str	r0, [r6, #36]	; 0x24
 800a982:	d104      	bne.n	800a98e <_Balloc+0x22>
 800a984:	2166      	movs	r1, #102	; 0x66
 800a986:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <_Balloc+0x80>)
 800a988:	4819      	ldr	r0, [pc, #100]	; (800a9f0 <_Balloc+0x84>)
 800a98a:	f7ff fc07 	bl	800a19c <__assert_func>
 800a98e:	6045      	str	r5, [r0, #4]
 800a990:	6085      	str	r5, [r0, #8]
 800a992:	6005      	str	r5, [r0, #0]
 800a994:	60c5      	str	r5, [r0, #12]
 800a996:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a998:	68eb      	ldr	r3, [r5, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d013      	beq.n	800a9c6 <_Balloc+0x5a>
 800a99e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a9a0:	00a2      	lsls	r2, r4, #2
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	189b      	adds	r3, r3, r2
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d118      	bne.n	800a9de <_Balloc+0x72>
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	000d      	movs	r5, r1
 800a9b0:	40a5      	lsls	r5, r4
 800a9b2:	1d6a      	adds	r2, r5, #5
 800a9b4:	0030      	movs	r0, r6
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	f000 fca2 	bl	800b300 <_calloc_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d00c      	beq.n	800a9da <_Balloc+0x6e>
 800a9c0:	6044      	str	r4, [r0, #4]
 800a9c2:	6085      	str	r5, [r0, #8]
 800a9c4:	e00d      	b.n	800a9e2 <_Balloc+0x76>
 800a9c6:	2221      	movs	r2, #33	; 0x21
 800a9c8:	2104      	movs	r1, #4
 800a9ca:	0030      	movs	r0, r6
 800a9cc:	f000 fc98 	bl	800b300 <_calloc_r>
 800a9d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a9d2:	60e8      	str	r0, [r5, #12]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e1      	bne.n	800a99e <_Balloc+0x32>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	6802      	ldr	r2, [r0, #0]
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6103      	str	r3, [r0, #16]
 800a9e6:	60c3      	str	r3, [r0, #12]
 800a9e8:	e7f8      	b.n	800a9dc <_Balloc+0x70>
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	0800d274 	.word	0x0800d274
 800a9f0:	0800d414 	.word	0x0800d414

0800a9f4 <_Bfree>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9f8:	0005      	movs	r5, r0
 800a9fa:	000c      	movs	r4, r1
 800a9fc:	2e00      	cmp	r6, #0
 800a9fe:	d10e      	bne.n	800aa1e <_Bfree+0x2a>
 800aa00:	2010      	movs	r0, #16
 800aa02:	f7fe fb6f 	bl	80090e4 <malloc>
 800aa06:	1e02      	subs	r2, r0, #0
 800aa08:	6268      	str	r0, [r5, #36]	; 0x24
 800aa0a:	d104      	bne.n	800aa16 <_Bfree+0x22>
 800aa0c:	218a      	movs	r1, #138	; 0x8a
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <_Bfree+0x40>)
 800aa10:	4809      	ldr	r0, [pc, #36]	; (800aa38 <_Bfree+0x44>)
 800aa12:	f7ff fbc3 	bl	800a19c <__assert_func>
 800aa16:	6046      	str	r6, [r0, #4]
 800aa18:	6086      	str	r6, [r0, #8]
 800aa1a:	6006      	str	r6, [r0, #0]
 800aa1c:	60c6      	str	r6, [r0, #12]
 800aa1e:	2c00      	cmp	r4, #0
 800aa20:	d007      	beq.n	800aa32 <_Bfree+0x3e>
 800aa22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa24:	6862      	ldr	r2, [r4, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	0092      	lsls	r2, r2, #2
 800aa2a:	189b      	adds	r3, r3, r2
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	601c      	str	r4, [r3, #0]
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	0800d274 	.word	0x0800d274
 800aa38:	0800d414 	.word	0x0800d414

0800aa3c <__multadd>:
 800aa3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa3e:	000e      	movs	r6, r1
 800aa40:	9001      	str	r0, [sp, #4]
 800aa42:	000c      	movs	r4, r1
 800aa44:	001d      	movs	r5, r3
 800aa46:	2000      	movs	r0, #0
 800aa48:	690f      	ldr	r7, [r1, #16]
 800aa4a:	3614      	adds	r6, #20
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	3001      	adds	r0, #1
 800aa50:	b299      	uxth	r1, r3
 800aa52:	4351      	muls	r1, r2
 800aa54:	0c1b      	lsrs	r3, r3, #16
 800aa56:	4353      	muls	r3, r2
 800aa58:	1949      	adds	r1, r1, r5
 800aa5a:	0c0d      	lsrs	r5, r1, #16
 800aa5c:	195b      	adds	r3, r3, r5
 800aa5e:	0c1d      	lsrs	r5, r3, #16
 800aa60:	b289      	uxth	r1, r1
 800aa62:	041b      	lsls	r3, r3, #16
 800aa64:	185b      	adds	r3, r3, r1
 800aa66:	c608      	stmia	r6!, {r3}
 800aa68:	4287      	cmp	r7, r0
 800aa6a:	dcef      	bgt.n	800aa4c <__multadd+0x10>
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	d022      	beq.n	800aab6 <__multadd+0x7a>
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	42bb      	cmp	r3, r7
 800aa74:	dc19      	bgt.n	800aaaa <__multadd+0x6e>
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	9801      	ldr	r0, [sp, #4]
 800aa7a:	1c59      	adds	r1, r3, #1
 800aa7c:	f7ff ff76 	bl	800a96c <_Balloc>
 800aa80:	1e06      	subs	r6, r0, #0
 800aa82:	d105      	bne.n	800aa90 <__multadd+0x54>
 800aa84:	0002      	movs	r2, r0
 800aa86:	21b5      	movs	r1, #181	; 0xb5
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <__multadd+0x80>)
 800aa8a:	480d      	ldr	r0, [pc, #52]	; (800aac0 <__multadd+0x84>)
 800aa8c:	f7ff fb86 	bl	800a19c <__assert_func>
 800aa90:	0021      	movs	r1, r4
 800aa92:	6923      	ldr	r3, [r4, #16]
 800aa94:	310c      	adds	r1, #12
 800aa96:	1c9a      	adds	r2, r3, #2
 800aa98:	0092      	lsls	r2, r2, #2
 800aa9a:	300c      	adds	r0, #12
 800aa9c:	f7fe fb36 	bl	800910c <memcpy>
 800aaa0:	0021      	movs	r1, r4
 800aaa2:	9801      	ldr	r0, [sp, #4]
 800aaa4:	f7ff ffa6 	bl	800a9f4 <_Bfree>
 800aaa8:	0034      	movs	r4, r6
 800aaaa:	1d3b      	adds	r3, r7, #4
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	18e3      	adds	r3, r4, r3
 800aab0:	605d      	str	r5, [r3, #4]
 800aab2:	1c7b      	adds	r3, r7, #1
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	0020      	movs	r0, r4
 800aab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaba:	46c0      	nop			; (mov r8, r8)
 800aabc:	0800d384 	.word	0x0800d384
 800aac0:	0800d414 	.word	0x0800d414

0800aac4 <__s2b>:
 800aac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac6:	0006      	movs	r6, r0
 800aac8:	0018      	movs	r0, r3
 800aaca:	000c      	movs	r4, r1
 800aacc:	3008      	adds	r0, #8
 800aace:	2109      	movs	r1, #9
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	0015      	movs	r5, r2
 800aad4:	f7f5 fbc8 	bl	8000268 <__divsi3>
 800aad8:	2301      	movs	r3, #1
 800aada:	2100      	movs	r1, #0
 800aadc:	4283      	cmp	r3, r0
 800aade:	db0a      	blt.n	800aaf6 <__s2b+0x32>
 800aae0:	0030      	movs	r0, r6
 800aae2:	f7ff ff43 	bl	800a96c <_Balloc>
 800aae6:	1e01      	subs	r1, r0, #0
 800aae8:	d108      	bne.n	800aafc <__s2b+0x38>
 800aaea:	0002      	movs	r2, r0
 800aaec:	4b19      	ldr	r3, [pc, #100]	; (800ab54 <__s2b+0x90>)
 800aaee:	481a      	ldr	r0, [pc, #104]	; (800ab58 <__s2b+0x94>)
 800aaf0:	31ce      	adds	r1, #206	; 0xce
 800aaf2:	f7ff fb53 	bl	800a19c <__assert_func>
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	3101      	adds	r1, #1
 800aafa:	e7ef      	b.n	800aadc <__s2b+0x18>
 800aafc:	9b08      	ldr	r3, [sp, #32]
 800aafe:	6143      	str	r3, [r0, #20]
 800ab00:	2301      	movs	r3, #1
 800ab02:	6103      	str	r3, [r0, #16]
 800ab04:	2d09      	cmp	r5, #9
 800ab06:	dd18      	ble.n	800ab3a <__s2b+0x76>
 800ab08:	0023      	movs	r3, r4
 800ab0a:	3309      	adds	r3, #9
 800ab0c:	001f      	movs	r7, r3
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	1964      	adds	r4, r4, r5
 800ab12:	783b      	ldrb	r3, [r7, #0]
 800ab14:	220a      	movs	r2, #10
 800ab16:	0030      	movs	r0, r6
 800ab18:	3b30      	subs	r3, #48	; 0x30
 800ab1a:	f7ff ff8f 	bl	800aa3c <__multadd>
 800ab1e:	3701      	adds	r7, #1
 800ab20:	0001      	movs	r1, r0
 800ab22:	42a7      	cmp	r7, r4
 800ab24:	d1f5      	bne.n	800ab12 <__s2b+0x4e>
 800ab26:	002c      	movs	r4, r5
 800ab28:	9b00      	ldr	r3, [sp, #0]
 800ab2a:	3c08      	subs	r4, #8
 800ab2c:	191c      	adds	r4, r3, r4
 800ab2e:	002f      	movs	r7, r5
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	429f      	cmp	r7, r3
 800ab34:	db04      	blt.n	800ab40 <__s2b+0x7c>
 800ab36:	0008      	movs	r0, r1
 800ab38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab3a:	2509      	movs	r5, #9
 800ab3c:	340a      	adds	r4, #10
 800ab3e:	e7f6      	b.n	800ab2e <__s2b+0x6a>
 800ab40:	1b63      	subs	r3, r4, r5
 800ab42:	5ddb      	ldrb	r3, [r3, r7]
 800ab44:	220a      	movs	r2, #10
 800ab46:	0030      	movs	r0, r6
 800ab48:	3b30      	subs	r3, #48	; 0x30
 800ab4a:	f7ff ff77 	bl	800aa3c <__multadd>
 800ab4e:	3701      	adds	r7, #1
 800ab50:	0001      	movs	r1, r0
 800ab52:	e7ed      	b.n	800ab30 <__s2b+0x6c>
 800ab54:	0800d384 	.word	0x0800d384
 800ab58:	0800d414 	.word	0x0800d414

0800ab5c <__hi0bits>:
 800ab5c:	0003      	movs	r3, r0
 800ab5e:	0c02      	lsrs	r2, r0, #16
 800ab60:	2000      	movs	r0, #0
 800ab62:	4282      	cmp	r2, r0
 800ab64:	d101      	bne.n	800ab6a <__hi0bits+0xe>
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	3010      	adds	r0, #16
 800ab6a:	0e1a      	lsrs	r2, r3, #24
 800ab6c:	d101      	bne.n	800ab72 <__hi0bits+0x16>
 800ab6e:	3008      	adds	r0, #8
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	0f1a      	lsrs	r2, r3, #28
 800ab74:	d101      	bne.n	800ab7a <__hi0bits+0x1e>
 800ab76:	3004      	adds	r0, #4
 800ab78:	011b      	lsls	r3, r3, #4
 800ab7a:	0f9a      	lsrs	r2, r3, #30
 800ab7c:	d101      	bne.n	800ab82 <__hi0bits+0x26>
 800ab7e:	3002      	adds	r0, #2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	db03      	blt.n	800ab8e <__hi0bits+0x32>
 800ab86:	3001      	adds	r0, #1
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	d400      	bmi.n	800ab8e <__hi0bits+0x32>
 800ab8c:	2020      	movs	r0, #32
 800ab8e:	4770      	bx	lr

0800ab90 <__lo0bits>:
 800ab90:	6803      	ldr	r3, [r0, #0]
 800ab92:	0002      	movs	r2, r0
 800ab94:	2107      	movs	r1, #7
 800ab96:	0018      	movs	r0, r3
 800ab98:	4008      	ands	r0, r1
 800ab9a:	420b      	tst	r3, r1
 800ab9c:	d00d      	beq.n	800abba <__lo0bits+0x2a>
 800ab9e:	3906      	subs	r1, #6
 800aba0:	2000      	movs	r0, #0
 800aba2:	420b      	tst	r3, r1
 800aba4:	d105      	bne.n	800abb2 <__lo0bits+0x22>
 800aba6:	3002      	adds	r0, #2
 800aba8:	4203      	tst	r3, r0
 800abaa:	d003      	beq.n	800abb4 <__lo0bits+0x24>
 800abac:	40cb      	lsrs	r3, r1
 800abae:	0008      	movs	r0, r1
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	4770      	bx	lr
 800abb4:	089b      	lsrs	r3, r3, #2
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	e7fb      	b.n	800abb2 <__lo0bits+0x22>
 800abba:	b299      	uxth	r1, r3
 800abbc:	2900      	cmp	r1, #0
 800abbe:	d101      	bne.n	800abc4 <__lo0bits+0x34>
 800abc0:	2010      	movs	r0, #16
 800abc2:	0c1b      	lsrs	r3, r3, #16
 800abc4:	b2d9      	uxtb	r1, r3
 800abc6:	2900      	cmp	r1, #0
 800abc8:	d101      	bne.n	800abce <__lo0bits+0x3e>
 800abca:	3008      	adds	r0, #8
 800abcc:	0a1b      	lsrs	r3, r3, #8
 800abce:	0719      	lsls	r1, r3, #28
 800abd0:	d101      	bne.n	800abd6 <__lo0bits+0x46>
 800abd2:	3004      	adds	r0, #4
 800abd4:	091b      	lsrs	r3, r3, #4
 800abd6:	0799      	lsls	r1, r3, #30
 800abd8:	d101      	bne.n	800abde <__lo0bits+0x4e>
 800abda:	3002      	adds	r0, #2
 800abdc:	089b      	lsrs	r3, r3, #2
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	d4e9      	bmi.n	800abb6 <__lo0bits+0x26>
 800abe2:	3001      	adds	r0, #1
 800abe4:	085b      	lsrs	r3, r3, #1
 800abe6:	d1e6      	bne.n	800abb6 <__lo0bits+0x26>
 800abe8:	2020      	movs	r0, #32
 800abea:	e7e2      	b.n	800abb2 <__lo0bits+0x22>

0800abec <__i2b>:
 800abec:	b510      	push	{r4, lr}
 800abee:	000c      	movs	r4, r1
 800abf0:	2101      	movs	r1, #1
 800abf2:	f7ff febb 	bl	800a96c <_Balloc>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d106      	bne.n	800ac08 <__i2b+0x1c>
 800abfa:	21a0      	movs	r1, #160	; 0xa0
 800abfc:	0002      	movs	r2, r0
 800abfe:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <__i2b+0x24>)
 800ac00:	4804      	ldr	r0, [pc, #16]	; (800ac14 <__i2b+0x28>)
 800ac02:	0049      	lsls	r1, r1, #1
 800ac04:	f7ff faca 	bl	800a19c <__assert_func>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	6144      	str	r4, [r0, #20]
 800ac0c:	6103      	str	r3, [r0, #16]
 800ac0e:	bd10      	pop	{r4, pc}
 800ac10:	0800d384 	.word	0x0800d384
 800ac14:	0800d414 	.word	0x0800d414

0800ac18 <__multiply>:
 800ac18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	0014      	movs	r4, r2
 800ac1e:	6912      	ldr	r2, [r2, #16]
 800ac20:	000d      	movs	r5, r1
 800ac22:	b089      	sub	sp, #36	; 0x24
 800ac24:	4293      	cmp	r3, r2
 800ac26:	da01      	bge.n	800ac2c <__multiply+0x14>
 800ac28:	0025      	movs	r5, r4
 800ac2a:	000c      	movs	r4, r1
 800ac2c:	692f      	ldr	r7, [r5, #16]
 800ac2e:	6926      	ldr	r6, [r4, #16]
 800ac30:	6869      	ldr	r1, [r5, #4]
 800ac32:	19bb      	adds	r3, r7, r6
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	68ab      	ldr	r3, [r5, #8]
 800ac38:	19ba      	adds	r2, r7, r6
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	da00      	bge.n	800ac40 <__multiply+0x28>
 800ac3e:	3101      	adds	r1, #1
 800ac40:	f7ff fe94 	bl	800a96c <_Balloc>
 800ac44:	9001      	str	r0, [sp, #4]
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d106      	bne.n	800ac58 <__multiply+0x40>
 800ac4a:	215e      	movs	r1, #94	; 0x5e
 800ac4c:	0002      	movs	r2, r0
 800ac4e:	4b48      	ldr	r3, [pc, #288]	; (800ad70 <__multiply+0x158>)
 800ac50:	4848      	ldr	r0, [pc, #288]	; (800ad74 <__multiply+0x15c>)
 800ac52:	31ff      	adds	r1, #255	; 0xff
 800ac54:	f7ff faa2 	bl	800a19c <__assert_func>
 800ac58:	9b01      	ldr	r3, [sp, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	3314      	adds	r3, #20
 800ac5e:	469c      	mov	ip, r3
 800ac60:	19bb      	adds	r3, r7, r6
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4463      	add	r3, ip
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	4663      	mov	r3, ip
 800ac6a:	9903      	ldr	r1, [sp, #12]
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	d32c      	bcc.n	800acca <__multiply+0xb2>
 800ac70:	002b      	movs	r3, r5
 800ac72:	0022      	movs	r2, r4
 800ac74:	3314      	adds	r3, #20
 800ac76:	00bf      	lsls	r7, r7, #2
 800ac78:	3214      	adds	r2, #20
 800ac7a:	9306      	str	r3, [sp, #24]
 800ac7c:	00b6      	lsls	r6, r6, #2
 800ac7e:	19db      	adds	r3, r3, r7
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	1993      	adds	r3, r2, r6
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	2304      	movs	r3, #4
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	002b      	movs	r3, r5
 800ac8c:	9904      	ldr	r1, [sp, #16]
 800ac8e:	3315      	adds	r3, #21
 800ac90:	9200      	str	r2, [sp, #0]
 800ac92:	4299      	cmp	r1, r3
 800ac94:	d305      	bcc.n	800aca2 <__multiply+0x8a>
 800ac96:	1b4b      	subs	r3, r1, r5
 800ac98:	3b15      	subs	r3, #21
 800ac9a:	089b      	lsrs	r3, r3, #2
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	9305      	str	r3, [sp, #20]
 800aca2:	9b07      	ldr	r3, [sp, #28]
 800aca4:	9a00      	ldr	r2, [sp, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d311      	bcc.n	800acce <__multiply+0xb6>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	dd06      	ble.n	800acbe <__multiply+0xa6>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	3b04      	subs	r3, #4
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d054      	beq.n	800ad68 <__multiply+0x150>
 800acbe:	9b01      	ldr	r3, [sp, #4]
 800acc0:	9a02      	ldr	r2, [sp, #8]
 800acc2:	0018      	movs	r0, r3
 800acc4:	611a      	str	r2, [r3, #16]
 800acc6:	b009      	add	sp, #36	; 0x24
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acca:	c304      	stmia	r3!, {r2}
 800accc:	e7cd      	b.n	800ac6a <__multiply+0x52>
 800acce:	9b00      	ldr	r3, [sp, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	b298      	uxth	r0, r3
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d01c      	beq.n	800ad12 <__multiply+0xfa>
 800acd8:	4667      	mov	r7, ip
 800acda:	2400      	movs	r4, #0
 800acdc:	9e06      	ldr	r6, [sp, #24]
 800acde:	ce02      	ldmia	r6!, {r1}
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	b28b      	uxth	r3, r1
 800ace4:	4343      	muls	r3, r0
 800ace6:	0c09      	lsrs	r1, r1, #16
 800ace8:	4341      	muls	r1, r0
 800acea:	b292      	uxth	r2, r2
 800acec:	189b      	adds	r3, r3, r2
 800acee:	191b      	adds	r3, r3, r4
 800acf0:	000c      	movs	r4, r1
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	0c11      	lsrs	r1, r2, #16
 800acf6:	1861      	adds	r1, r4, r1
 800acf8:	0c1c      	lsrs	r4, r3, #16
 800acfa:	1909      	adds	r1, r1, r4
 800acfc:	0c0c      	lsrs	r4, r1, #16
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	0409      	lsls	r1, r1, #16
 800ad02:	430b      	orrs	r3, r1
 800ad04:	c708      	stmia	r7!, {r3}
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	42b3      	cmp	r3, r6
 800ad0a:	d8e8      	bhi.n	800acde <__multiply+0xc6>
 800ad0c:	4663      	mov	r3, ip
 800ad0e:	9a05      	ldr	r2, [sp, #20]
 800ad10:	509c      	str	r4, [r3, r2]
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	0c1e      	lsrs	r6, r3, #16
 800ad18:	d020      	beq.n	800ad5c <__multiply+0x144>
 800ad1a:	4663      	mov	r3, ip
 800ad1c:	002c      	movs	r4, r5
 800ad1e:	4660      	mov	r0, ip
 800ad20:	2700      	movs	r7, #0
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3414      	adds	r4, #20
 800ad26:	6822      	ldr	r2, [r4, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	b291      	uxth	r1, r2
 800ad2c:	4371      	muls	r1, r6
 800ad2e:	6802      	ldr	r2, [r0, #0]
 800ad30:	0c12      	lsrs	r2, r2, #16
 800ad32:	1889      	adds	r1, r1, r2
 800ad34:	19cf      	adds	r7, r1, r7
 800ad36:	0439      	lsls	r1, r7, #16
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	6003      	str	r3, [r0, #0]
 800ad3c:	cc02      	ldmia	r4!, {r1}
 800ad3e:	6843      	ldr	r3, [r0, #4]
 800ad40:	0c09      	lsrs	r1, r1, #16
 800ad42:	4371      	muls	r1, r6
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	0c3f      	lsrs	r7, r7, #16
 800ad48:	18cb      	adds	r3, r1, r3
 800ad4a:	9a04      	ldr	r2, [sp, #16]
 800ad4c:	19db      	adds	r3, r3, r7
 800ad4e:	0c1f      	lsrs	r7, r3, #16
 800ad50:	3004      	adds	r0, #4
 800ad52:	42a2      	cmp	r2, r4
 800ad54:	d8e7      	bhi.n	800ad26 <__multiply+0x10e>
 800ad56:	4662      	mov	r2, ip
 800ad58:	9905      	ldr	r1, [sp, #20]
 800ad5a:	5053      	str	r3, [r2, r1]
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	2304      	movs	r3, #4
 800ad64:	449c      	add	ip, r3
 800ad66:	e79c      	b.n	800aca2 <__multiply+0x8a>
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	9302      	str	r3, [sp, #8]
 800ad6e:	e79c      	b.n	800acaa <__multiply+0x92>
 800ad70:	0800d384 	.word	0x0800d384
 800ad74:	0800d414 	.word	0x0800d414

0800ad78 <__pow5mult>:
 800ad78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	0015      	movs	r5, r2
 800ad7e:	0007      	movs	r7, r0
 800ad80:	000e      	movs	r6, r1
 800ad82:	401a      	ands	r2, r3
 800ad84:	421d      	tst	r5, r3
 800ad86:	d008      	beq.n	800ad9a <__pow5mult+0x22>
 800ad88:	4925      	ldr	r1, [pc, #148]	; (800ae20 <__pow5mult+0xa8>)
 800ad8a:	3a01      	subs	r2, #1
 800ad8c:	0092      	lsls	r2, r2, #2
 800ad8e:	5852      	ldr	r2, [r2, r1]
 800ad90:	2300      	movs	r3, #0
 800ad92:	0031      	movs	r1, r6
 800ad94:	f7ff fe52 	bl	800aa3c <__multadd>
 800ad98:	0006      	movs	r6, r0
 800ad9a:	10ad      	asrs	r5, r5, #2
 800ad9c:	d03d      	beq.n	800ae1a <__pow5mult+0xa2>
 800ad9e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	d10f      	bne.n	800adc4 <__pow5mult+0x4c>
 800ada4:	2010      	movs	r0, #16
 800ada6:	f7fe f99d 	bl	80090e4 <malloc>
 800adaa:	1e02      	subs	r2, r0, #0
 800adac:	6278      	str	r0, [r7, #36]	; 0x24
 800adae:	d105      	bne.n	800adbc <__pow5mult+0x44>
 800adb0:	21d7      	movs	r1, #215	; 0xd7
 800adb2:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <__pow5mult+0xac>)
 800adb4:	481c      	ldr	r0, [pc, #112]	; (800ae28 <__pow5mult+0xb0>)
 800adb6:	0049      	lsls	r1, r1, #1
 800adb8:	f7ff f9f0 	bl	800a19c <__assert_func>
 800adbc:	6044      	str	r4, [r0, #4]
 800adbe:	6084      	str	r4, [r0, #8]
 800adc0:	6004      	str	r4, [r0, #0]
 800adc2:	60c4      	str	r4, [r0, #12]
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	689c      	ldr	r4, [r3, #8]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d108      	bne.n	800ade0 <__pow5mult+0x68>
 800adce:	0038      	movs	r0, r7
 800add0:	4916      	ldr	r1, [pc, #88]	; (800ae2c <__pow5mult+0xb4>)
 800add2:	f7ff ff0b 	bl	800abec <__i2b>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	0004      	movs	r4, r0
 800adda:	6098      	str	r0, [r3, #8]
 800addc:	2300      	movs	r3, #0
 800adde:	6003      	str	r3, [r0, #0]
 800ade0:	2301      	movs	r3, #1
 800ade2:	421d      	tst	r5, r3
 800ade4:	d00a      	beq.n	800adfc <__pow5mult+0x84>
 800ade6:	0031      	movs	r1, r6
 800ade8:	0022      	movs	r2, r4
 800adea:	0038      	movs	r0, r7
 800adec:	f7ff ff14 	bl	800ac18 <__multiply>
 800adf0:	0031      	movs	r1, r6
 800adf2:	9001      	str	r0, [sp, #4]
 800adf4:	0038      	movs	r0, r7
 800adf6:	f7ff fdfd 	bl	800a9f4 <_Bfree>
 800adfa:	9e01      	ldr	r6, [sp, #4]
 800adfc:	106d      	asrs	r5, r5, #1
 800adfe:	d00c      	beq.n	800ae1a <__pow5mult+0xa2>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d107      	bne.n	800ae16 <__pow5mult+0x9e>
 800ae06:	0022      	movs	r2, r4
 800ae08:	0021      	movs	r1, r4
 800ae0a:	0038      	movs	r0, r7
 800ae0c:	f7ff ff04 	bl	800ac18 <__multiply>
 800ae10:	2300      	movs	r3, #0
 800ae12:	6020      	str	r0, [r4, #0]
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	0004      	movs	r4, r0
 800ae18:	e7e2      	b.n	800ade0 <__pow5mult+0x68>
 800ae1a:	0030      	movs	r0, r6
 800ae1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae1e:	46c0      	nop			; (mov r8, r8)
 800ae20:	0800d568 	.word	0x0800d568
 800ae24:	0800d274 	.word	0x0800d274
 800ae28:	0800d414 	.word	0x0800d414
 800ae2c:	00000271 	.word	0x00000271

0800ae30 <__lshift>:
 800ae30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae32:	000c      	movs	r4, r1
 800ae34:	0017      	movs	r7, r2
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	1155      	asrs	r5, r2, #5
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	18eb      	adds	r3, r5, r3
 800ae3e:	9302      	str	r3, [sp, #8]
 800ae40:	3301      	adds	r3, #1
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	6849      	ldr	r1, [r1, #4]
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	9004      	str	r0, [sp, #16]
 800ae4a:	9a01      	ldr	r2, [sp, #4]
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	db11      	blt.n	800ae74 <__lshift+0x44>
 800ae50:	9804      	ldr	r0, [sp, #16]
 800ae52:	f7ff fd8b 	bl	800a96c <_Balloc>
 800ae56:	0002      	movs	r2, r0
 800ae58:	2300      	movs	r3, #0
 800ae5a:	3214      	adds	r2, #20
 800ae5c:	0006      	movs	r6, r0
 800ae5e:	0011      	movs	r1, r2
 800ae60:	9203      	str	r2, [sp, #12]
 800ae62:	4298      	cmp	r0, r3
 800ae64:	d10d      	bne.n	800ae82 <__lshift+0x52>
 800ae66:	21da      	movs	r1, #218	; 0xda
 800ae68:	0002      	movs	r2, r0
 800ae6a:	4b27      	ldr	r3, [pc, #156]	; (800af08 <__lshift+0xd8>)
 800ae6c:	4827      	ldr	r0, [pc, #156]	; (800af0c <__lshift+0xdc>)
 800ae6e:	31ff      	adds	r1, #255	; 0xff
 800ae70:	f7ff f994 	bl	800a19c <__assert_func>
 800ae74:	3101      	adds	r1, #1
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	e7e7      	b.n	800ae4a <__lshift+0x1a>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	0098      	lsls	r0, r3, #2
 800ae7e:	500a      	str	r2, [r1, r0]
 800ae80:	3301      	adds	r3, #1
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	dbf9      	blt.n	800ae7a <__lshift+0x4a>
 800ae86:	43eb      	mvns	r3, r5
 800ae88:	17db      	asrs	r3, r3, #31
 800ae8a:	401d      	ands	r5, r3
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	00ad      	lsls	r5, r5, #2
 800ae90:	211f      	movs	r1, #31
 800ae92:	0038      	movs	r0, r7
 800ae94:	195d      	adds	r5, r3, r5
 800ae96:	0023      	movs	r3, r4
 800ae98:	6922      	ldr	r2, [r4, #16]
 800ae9a:	3314      	adds	r3, #20
 800ae9c:	0092      	lsls	r2, r2, #2
 800ae9e:	4008      	ands	r0, r1
 800aea0:	4684      	mov	ip, r0
 800aea2:	189a      	adds	r2, r3, r2
 800aea4:	420f      	tst	r7, r1
 800aea6:	d02a      	beq.n	800aefe <__lshift+0xce>
 800aea8:	3101      	adds	r1, #1
 800aeaa:	1a09      	subs	r1, r1, r0
 800aeac:	9105      	str	r1, [sp, #20]
 800aeae:	2100      	movs	r1, #0
 800aeb0:	9503      	str	r5, [sp, #12]
 800aeb2:	4667      	mov	r7, ip
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	40b8      	lsls	r0, r7
 800aeb8:	4301      	orrs	r1, r0
 800aeba:	9803      	ldr	r0, [sp, #12]
 800aebc:	c002      	stmia	r0!, {r1}
 800aebe:	cb02      	ldmia	r3!, {r1}
 800aec0:	9003      	str	r0, [sp, #12]
 800aec2:	9805      	ldr	r0, [sp, #20]
 800aec4:	40c1      	lsrs	r1, r0
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d8f3      	bhi.n	800aeb2 <__lshift+0x82>
 800aeca:	0020      	movs	r0, r4
 800aecc:	3015      	adds	r0, #21
 800aece:	2304      	movs	r3, #4
 800aed0:	4282      	cmp	r2, r0
 800aed2:	d304      	bcc.n	800aede <__lshift+0xae>
 800aed4:	1b13      	subs	r3, r2, r4
 800aed6:	3b15      	subs	r3, #21
 800aed8:	089b      	lsrs	r3, r3, #2
 800aeda:	3301      	adds	r3, #1
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	50e9      	str	r1, [r5, r3]
 800aee0:	2900      	cmp	r1, #0
 800aee2:	d002      	beq.n	800aeea <__lshift+0xba>
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	3302      	adds	r3, #2
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	9b01      	ldr	r3, [sp, #4]
 800aeec:	9804      	ldr	r0, [sp, #16]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	0021      	movs	r1, r4
 800aef2:	6133      	str	r3, [r6, #16]
 800aef4:	f7ff fd7e 	bl	800a9f4 <_Bfree>
 800aef8:	0030      	movs	r0, r6
 800aefa:	b007      	add	sp, #28
 800aefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aefe:	cb02      	ldmia	r3!, {r1}
 800af00:	c502      	stmia	r5!, {r1}
 800af02:	429a      	cmp	r2, r3
 800af04:	d8fb      	bhi.n	800aefe <__lshift+0xce>
 800af06:	e7f0      	b.n	800aeea <__lshift+0xba>
 800af08:	0800d384 	.word	0x0800d384
 800af0c:	0800d414 	.word	0x0800d414

0800af10 <__mcmp>:
 800af10:	6902      	ldr	r2, [r0, #16]
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	b530      	push	{r4, r5, lr}
 800af16:	0004      	movs	r4, r0
 800af18:	1ad0      	subs	r0, r2, r3
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d10d      	bne.n	800af3a <__mcmp+0x2a>
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	3414      	adds	r4, #20
 800af22:	3114      	adds	r1, #20
 800af24:	18e2      	adds	r2, r4, r3
 800af26:	18c9      	adds	r1, r1, r3
 800af28:	3a04      	subs	r2, #4
 800af2a:	3904      	subs	r1, #4
 800af2c:	6815      	ldr	r5, [r2, #0]
 800af2e:	680b      	ldr	r3, [r1, #0]
 800af30:	429d      	cmp	r5, r3
 800af32:	d003      	beq.n	800af3c <__mcmp+0x2c>
 800af34:	2001      	movs	r0, #1
 800af36:	429d      	cmp	r5, r3
 800af38:	d303      	bcc.n	800af42 <__mcmp+0x32>
 800af3a:	bd30      	pop	{r4, r5, pc}
 800af3c:	4294      	cmp	r4, r2
 800af3e:	d3f3      	bcc.n	800af28 <__mcmp+0x18>
 800af40:	e7fb      	b.n	800af3a <__mcmp+0x2a>
 800af42:	4240      	negs	r0, r0
 800af44:	e7f9      	b.n	800af3a <__mcmp+0x2a>
	...

0800af48 <__mdiff>:
 800af48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4a:	000e      	movs	r6, r1
 800af4c:	0007      	movs	r7, r0
 800af4e:	0011      	movs	r1, r2
 800af50:	0030      	movs	r0, r6
 800af52:	b087      	sub	sp, #28
 800af54:	0014      	movs	r4, r2
 800af56:	f7ff ffdb 	bl	800af10 <__mcmp>
 800af5a:	1e05      	subs	r5, r0, #0
 800af5c:	d110      	bne.n	800af80 <__mdiff+0x38>
 800af5e:	0001      	movs	r1, r0
 800af60:	0038      	movs	r0, r7
 800af62:	f7ff fd03 	bl	800a96c <_Balloc>
 800af66:	1e02      	subs	r2, r0, #0
 800af68:	d104      	bne.n	800af74 <__mdiff+0x2c>
 800af6a:	4b40      	ldr	r3, [pc, #256]	; (800b06c <__mdiff+0x124>)
 800af6c:	4940      	ldr	r1, [pc, #256]	; (800b070 <__mdiff+0x128>)
 800af6e:	4841      	ldr	r0, [pc, #260]	; (800b074 <__mdiff+0x12c>)
 800af70:	f7ff f914 	bl	800a19c <__assert_func>
 800af74:	2301      	movs	r3, #1
 800af76:	6145      	str	r5, [r0, #20]
 800af78:	6103      	str	r3, [r0, #16]
 800af7a:	0010      	movs	r0, r2
 800af7c:	b007      	add	sp, #28
 800af7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af80:	2301      	movs	r3, #1
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	2800      	cmp	r0, #0
 800af86:	db04      	blt.n	800af92 <__mdiff+0x4a>
 800af88:	0023      	movs	r3, r4
 800af8a:	0034      	movs	r4, r6
 800af8c:	001e      	movs	r6, r3
 800af8e:	2300      	movs	r3, #0
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	0038      	movs	r0, r7
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	f7ff fce9 	bl	800a96c <_Balloc>
 800af9a:	1e02      	subs	r2, r0, #0
 800af9c:	d103      	bne.n	800afa6 <__mdiff+0x5e>
 800af9e:	2190      	movs	r1, #144	; 0x90
 800afa0:	4b32      	ldr	r3, [pc, #200]	; (800b06c <__mdiff+0x124>)
 800afa2:	0089      	lsls	r1, r1, #2
 800afa4:	e7e3      	b.n	800af6e <__mdiff+0x26>
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	2700      	movs	r7, #0
 800afaa:	60c3      	str	r3, [r0, #12]
 800afac:	6920      	ldr	r0, [r4, #16]
 800afae:	3414      	adds	r4, #20
 800afb0:	9401      	str	r4, [sp, #4]
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	0084      	lsls	r4, r0, #2
 800afb6:	191b      	adds	r3, r3, r4
 800afb8:	0034      	movs	r4, r6
 800afba:	9302      	str	r3, [sp, #8]
 800afbc:	6933      	ldr	r3, [r6, #16]
 800afbe:	3414      	adds	r4, #20
 800afc0:	0099      	lsls	r1, r3, #2
 800afc2:	1863      	adds	r3, r4, r1
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	0013      	movs	r3, r2
 800afc8:	3314      	adds	r3, #20
 800afca:	469c      	mov	ip, r3
 800afcc:	9305      	str	r3, [sp, #20]
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	cc02      	ldmia	r4!, {r1}
 800afd6:	cb20      	ldmia	r3!, {r5}
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	b2ab      	uxth	r3, r5
 800afdc:	19df      	adds	r7, r3, r7
 800afde:	b28b      	uxth	r3, r1
 800afe0:	1afb      	subs	r3, r7, r3
 800afe2:	0c2d      	lsrs	r5, r5, #16
 800afe4:	0c09      	lsrs	r1, r1, #16
 800afe6:	1a69      	subs	r1, r5, r1
 800afe8:	141d      	asrs	r5, r3, #16
 800afea:	1949      	adds	r1, r1, r5
 800afec:	140f      	asrs	r7, r1, #16
 800afee:	b29b      	uxth	r3, r3
 800aff0:	0409      	lsls	r1, r1, #16
 800aff2:	430b      	orrs	r3, r1
 800aff4:	4661      	mov	r1, ip
 800aff6:	c108      	stmia	r1!, {r3}
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	468c      	mov	ip, r1
 800affc:	42a3      	cmp	r3, r4
 800affe:	d8e8      	bhi.n	800afd2 <__mdiff+0x8a>
 800b000:	0031      	movs	r1, r6
 800b002:	9c03      	ldr	r4, [sp, #12]
 800b004:	3115      	adds	r1, #21
 800b006:	2304      	movs	r3, #4
 800b008:	428c      	cmp	r4, r1
 800b00a:	d304      	bcc.n	800b016 <__mdiff+0xce>
 800b00c:	1ba3      	subs	r3, r4, r6
 800b00e:	3b15      	subs	r3, #21
 800b010:	089b      	lsrs	r3, r3, #2
 800b012:	3301      	adds	r3, #1
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	9901      	ldr	r1, [sp, #4]
 800b018:	18cc      	adds	r4, r1, r3
 800b01a:	9905      	ldr	r1, [sp, #20]
 800b01c:	0026      	movs	r6, r4
 800b01e:	18cb      	adds	r3, r1, r3
 800b020:	469c      	mov	ip, r3
 800b022:	9902      	ldr	r1, [sp, #8]
 800b024:	428e      	cmp	r6, r1
 800b026:	d310      	bcc.n	800b04a <__mdiff+0x102>
 800b028:	9e02      	ldr	r6, [sp, #8]
 800b02a:	1ee5      	subs	r5, r4, #3
 800b02c:	2100      	movs	r1, #0
 800b02e:	42ae      	cmp	r6, r5
 800b030:	d304      	bcc.n	800b03c <__mdiff+0xf4>
 800b032:	0031      	movs	r1, r6
 800b034:	3103      	adds	r1, #3
 800b036:	1b09      	subs	r1, r1, r4
 800b038:	0889      	lsrs	r1, r1, #2
 800b03a:	0089      	lsls	r1, r1, #2
 800b03c:	185b      	adds	r3, r3, r1
 800b03e:	3b04      	subs	r3, #4
 800b040:	6819      	ldr	r1, [r3, #0]
 800b042:	2900      	cmp	r1, #0
 800b044:	d00f      	beq.n	800b066 <__mdiff+0x11e>
 800b046:	6110      	str	r0, [r2, #16]
 800b048:	e797      	b.n	800af7a <__mdiff+0x32>
 800b04a:	ce02      	ldmia	r6!, {r1}
 800b04c:	b28d      	uxth	r5, r1
 800b04e:	19ed      	adds	r5, r5, r7
 800b050:	0c0f      	lsrs	r7, r1, #16
 800b052:	1429      	asrs	r1, r5, #16
 800b054:	1879      	adds	r1, r7, r1
 800b056:	140f      	asrs	r7, r1, #16
 800b058:	b2ad      	uxth	r5, r5
 800b05a:	0409      	lsls	r1, r1, #16
 800b05c:	430d      	orrs	r5, r1
 800b05e:	4661      	mov	r1, ip
 800b060:	c120      	stmia	r1!, {r5}
 800b062:	468c      	mov	ip, r1
 800b064:	e7dd      	b.n	800b022 <__mdiff+0xda>
 800b066:	3801      	subs	r0, #1
 800b068:	e7e9      	b.n	800b03e <__mdiff+0xf6>
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	0800d384 	.word	0x0800d384
 800b070:	00000232 	.word	0x00000232
 800b074:	0800d414 	.word	0x0800d414

0800b078 <__ulp>:
 800b078:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <__ulp+0x40>)
 800b07a:	4019      	ands	r1, r3
 800b07c:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <__ulp+0x44>)
 800b07e:	18c9      	adds	r1, r1, r3
 800b080:	2900      	cmp	r1, #0
 800b082:	dd04      	ble.n	800b08e <__ulp+0x16>
 800b084:	2200      	movs	r2, #0
 800b086:	000b      	movs	r3, r1
 800b088:	0010      	movs	r0, r2
 800b08a:	0019      	movs	r1, r3
 800b08c:	4770      	bx	lr
 800b08e:	4249      	negs	r1, r1
 800b090:	2200      	movs	r2, #0
 800b092:	2300      	movs	r3, #0
 800b094:	1509      	asrs	r1, r1, #20
 800b096:	2913      	cmp	r1, #19
 800b098:	dc04      	bgt.n	800b0a4 <__ulp+0x2c>
 800b09a:	2080      	movs	r0, #128	; 0x80
 800b09c:	0300      	lsls	r0, r0, #12
 800b09e:	4108      	asrs	r0, r1
 800b0a0:	0003      	movs	r3, r0
 800b0a2:	e7f1      	b.n	800b088 <__ulp+0x10>
 800b0a4:	3914      	subs	r1, #20
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	291e      	cmp	r1, #30
 800b0aa:	dc02      	bgt.n	800b0b2 <__ulp+0x3a>
 800b0ac:	2080      	movs	r0, #128	; 0x80
 800b0ae:	0600      	lsls	r0, r0, #24
 800b0b0:	40c8      	lsrs	r0, r1
 800b0b2:	0002      	movs	r2, r0
 800b0b4:	e7e8      	b.n	800b088 <__ulp+0x10>
 800b0b6:	46c0      	nop			; (mov r8, r8)
 800b0b8:	7ff00000 	.word	0x7ff00000
 800b0bc:	fcc00000 	.word	0xfcc00000

0800b0c0 <__b2d>:
 800b0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c2:	0006      	movs	r6, r0
 800b0c4:	6903      	ldr	r3, [r0, #16]
 800b0c6:	3614      	adds	r6, #20
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	18f3      	adds	r3, r6, r3
 800b0cc:	1f1d      	subs	r5, r3, #4
 800b0ce:	682c      	ldr	r4, [r5, #0]
 800b0d0:	000f      	movs	r7, r1
 800b0d2:	0020      	movs	r0, r4
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	f7ff fd41 	bl	800ab5c <__hi0bits>
 800b0da:	2320      	movs	r3, #32
 800b0dc:	1a1b      	subs	r3, r3, r0
 800b0de:	491f      	ldr	r1, [pc, #124]	; (800b15c <__b2d+0x9c>)
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	280a      	cmp	r0, #10
 800b0e4:	dc16      	bgt.n	800b114 <__b2d+0x54>
 800b0e6:	230b      	movs	r3, #11
 800b0e8:	0027      	movs	r7, r4
 800b0ea:	1a1b      	subs	r3, r3, r0
 800b0ec:	40df      	lsrs	r7, r3
 800b0ee:	4339      	orrs	r1, r7
 800b0f0:	469c      	mov	ip, r3
 800b0f2:	000b      	movs	r3, r1
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	42ae      	cmp	r6, r5
 800b0f8:	d202      	bcs.n	800b100 <__b2d+0x40>
 800b0fa:	9901      	ldr	r1, [sp, #4]
 800b0fc:	3908      	subs	r1, #8
 800b0fe:	6809      	ldr	r1, [r1, #0]
 800b100:	3015      	adds	r0, #21
 800b102:	4084      	lsls	r4, r0
 800b104:	4660      	mov	r0, ip
 800b106:	40c1      	lsrs	r1, r0
 800b108:	430c      	orrs	r4, r1
 800b10a:	0022      	movs	r2, r4
 800b10c:	0010      	movs	r0, r2
 800b10e:	0019      	movs	r1, r3
 800b110:	b003      	add	sp, #12
 800b112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b114:	2700      	movs	r7, #0
 800b116:	42ae      	cmp	r6, r5
 800b118:	d202      	bcs.n	800b120 <__b2d+0x60>
 800b11a:	9d01      	ldr	r5, [sp, #4]
 800b11c:	3d08      	subs	r5, #8
 800b11e:	682f      	ldr	r7, [r5, #0]
 800b120:	230b      	movs	r3, #11
 800b122:	425b      	negs	r3, r3
 800b124:	469c      	mov	ip, r3
 800b126:	4484      	add	ip, r0
 800b128:	280b      	cmp	r0, #11
 800b12a:	d013      	beq.n	800b154 <__b2d+0x94>
 800b12c:	4663      	mov	r3, ip
 800b12e:	2020      	movs	r0, #32
 800b130:	409c      	lsls	r4, r3
 800b132:	1ac0      	subs	r0, r0, r3
 800b134:	003b      	movs	r3, r7
 800b136:	40c3      	lsrs	r3, r0
 800b138:	431c      	orrs	r4, r3
 800b13a:	4321      	orrs	r1, r4
 800b13c:	000b      	movs	r3, r1
 800b13e:	2100      	movs	r1, #0
 800b140:	42b5      	cmp	r5, r6
 800b142:	d901      	bls.n	800b148 <__b2d+0x88>
 800b144:	3d04      	subs	r5, #4
 800b146:	6829      	ldr	r1, [r5, #0]
 800b148:	4664      	mov	r4, ip
 800b14a:	40c1      	lsrs	r1, r0
 800b14c:	40a7      	lsls	r7, r4
 800b14e:	430f      	orrs	r7, r1
 800b150:	003a      	movs	r2, r7
 800b152:	e7db      	b.n	800b10c <__b2d+0x4c>
 800b154:	4321      	orrs	r1, r4
 800b156:	000b      	movs	r3, r1
 800b158:	e7fa      	b.n	800b150 <__b2d+0x90>
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	3ff00000 	.word	0x3ff00000

0800b160 <__d2b>:
 800b160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b162:	2101      	movs	r1, #1
 800b164:	0014      	movs	r4, r2
 800b166:	001e      	movs	r6, r3
 800b168:	9f08      	ldr	r7, [sp, #32]
 800b16a:	f7ff fbff 	bl	800a96c <_Balloc>
 800b16e:	1e05      	subs	r5, r0, #0
 800b170:	d105      	bne.n	800b17e <__d2b+0x1e>
 800b172:	0002      	movs	r2, r0
 800b174:	4b26      	ldr	r3, [pc, #152]	; (800b210 <__d2b+0xb0>)
 800b176:	4927      	ldr	r1, [pc, #156]	; (800b214 <__d2b+0xb4>)
 800b178:	4827      	ldr	r0, [pc, #156]	; (800b218 <__d2b+0xb8>)
 800b17a:	f7ff f80f 	bl	800a19c <__assert_func>
 800b17e:	0333      	lsls	r3, r6, #12
 800b180:	0076      	lsls	r6, r6, #1
 800b182:	0b1b      	lsrs	r3, r3, #12
 800b184:	0d76      	lsrs	r6, r6, #21
 800b186:	d124      	bne.n	800b1d2 <__d2b+0x72>
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	2c00      	cmp	r4, #0
 800b18c:	d027      	beq.n	800b1de <__d2b+0x7e>
 800b18e:	4668      	mov	r0, sp
 800b190:	9400      	str	r4, [sp, #0]
 800b192:	f7ff fcfd 	bl	800ab90 <__lo0bits>
 800b196:	9c00      	ldr	r4, [sp, #0]
 800b198:	2800      	cmp	r0, #0
 800b19a:	d01e      	beq.n	800b1da <__d2b+0x7a>
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	2120      	movs	r1, #32
 800b1a0:	001a      	movs	r2, r3
 800b1a2:	1a09      	subs	r1, r1, r0
 800b1a4:	408a      	lsls	r2, r1
 800b1a6:	40c3      	lsrs	r3, r0
 800b1a8:	4322      	orrs	r2, r4
 800b1aa:	616a      	str	r2, [r5, #20]
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	9c01      	ldr	r4, [sp, #4]
 800b1b0:	61ac      	str	r4, [r5, #24]
 800b1b2:	1e63      	subs	r3, r4, #1
 800b1b4:	419c      	sbcs	r4, r3
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	612c      	str	r4, [r5, #16]
 800b1ba:	2e00      	cmp	r6, #0
 800b1bc:	d018      	beq.n	800b1f0 <__d2b+0x90>
 800b1be:	4b17      	ldr	r3, [pc, #92]	; (800b21c <__d2b+0xbc>)
 800b1c0:	18f6      	adds	r6, r6, r3
 800b1c2:	2335      	movs	r3, #53	; 0x35
 800b1c4:	1836      	adds	r6, r6, r0
 800b1c6:	1a18      	subs	r0, r3, r0
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	603e      	str	r6, [r7, #0]
 800b1cc:	6018      	str	r0, [r3, #0]
 800b1ce:	0028      	movs	r0, r5
 800b1d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1d2:	2280      	movs	r2, #128	; 0x80
 800b1d4:	0352      	lsls	r2, r2, #13
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	e7d6      	b.n	800b188 <__d2b+0x28>
 800b1da:	616c      	str	r4, [r5, #20]
 800b1dc:	e7e7      	b.n	800b1ae <__d2b+0x4e>
 800b1de:	a801      	add	r0, sp, #4
 800b1e0:	f7ff fcd6 	bl	800ab90 <__lo0bits>
 800b1e4:	2401      	movs	r4, #1
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	612c      	str	r4, [r5, #16]
 800b1ea:	616b      	str	r3, [r5, #20]
 800b1ec:	3020      	adds	r0, #32
 800b1ee:	e7e4      	b.n	800b1ba <__d2b+0x5a>
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <__d2b+0xc0>)
 800b1f2:	18c0      	adds	r0, r0, r3
 800b1f4:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <__d2b+0xc4>)
 800b1f6:	6038      	str	r0, [r7, #0]
 800b1f8:	18e3      	adds	r3, r4, r3
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	18eb      	adds	r3, r5, r3
 800b1fe:	6958      	ldr	r0, [r3, #20]
 800b200:	f7ff fcac 	bl	800ab5c <__hi0bits>
 800b204:	0164      	lsls	r4, r4, #5
 800b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b208:	1a24      	subs	r4, r4, r0
 800b20a:	601c      	str	r4, [r3, #0]
 800b20c:	e7df      	b.n	800b1ce <__d2b+0x6e>
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	0800d384 	.word	0x0800d384
 800b214:	0000030a 	.word	0x0000030a
 800b218:	0800d414 	.word	0x0800d414
 800b21c:	fffffbcd 	.word	0xfffffbcd
 800b220:	fffffbce 	.word	0xfffffbce
 800b224:	3fffffff 	.word	0x3fffffff

0800b228 <__ratio>:
 800b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22a:	b085      	sub	sp, #20
 800b22c:	000d      	movs	r5, r1
 800b22e:	a902      	add	r1, sp, #8
 800b230:	0004      	movs	r4, r0
 800b232:	f7ff ff45 	bl	800b0c0 <__b2d>
 800b236:	9000      	str	r0, [sp, #0]
 800b238:	9101      	str	r1, [sp, #4]
 800b23a:	9e00      	ldr	r6, [sp, #0]
 800b23c:	9f01      	ldr	r7, [sp, #4]
 800b23e:	0028      	movs	r0, r5
 800b240:	a903      	add	r1, sp, #12
 800b242:	f7ff ff3d 	bl	800b0c0 <__b2d>
 800b246:	6924      	ldr	r4, [r4, #16]
 800b248:	692d      	ldr	r5, [r5, #16]
 800b24a:	0002      	movs	r2, r0
 800b24c:	1b65      	subs	r5, r4, r5
 800b24e:	016c      	lsls	r4, r5, #5
 800b250:	46a4      	mov	ip, r4
 800b252:	9d03      	ldr	r5, [sp, #12]
 800b254:	9c02      	ldr	r4, [sp, #8]
 800b256:	000b      	movs	r3, r1
 800b258:	1b64      	subs	r4, r4, r5
 800b25a:	4464      	add	r4, ip
 800b25c:	0525      	lsls	r5, r4, #20
 800b25e:	2c00      	cmp	r4, #0
 800b260:	dd07      	ble.n	800b272 <__ratio+0x4a>
 800b262:	9901      	ldr	r1, [sp, #4]
 800b264:	186f      	adds	r7, r5, r1
 800b266:	0030      	movs	r0, r6
 800b268:	0039      	movs	r1, r7
 800b26a:	f7f5 fd29 	bl	8000cc0 <__aeabi_ddiv>
 800b26e:	b005      	add	sp, #20
 800b270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b272:	1b4b      	subs	r3, r1, r5
 800b274:	e7f7      	b.n	800b266 <__ratio+0x3e>

0800b276 <__copybits>:
 800b276:	b570      	push	{r4, r5, r6, lr}
 800b278:	0015      	movs	r5, r2
 800b27a:	6913      	ldr	r3, [r2, #16]
 800b27c:	3514      	adds	r5, #20
 800b27e:	009c      	lsls	r4, r3, #2
 800b280:	0006      	movs	r6, r0
 800b282:	002b      	movs	r3, r5
 800b284:	3901      	subs	r1, #1
 800b286:	1149      	asrs	r1, r1, #5
 800b288:	3101      	adds	r1, #1
 800b28a:	0089      	lsls	r1, r1, #2
 800b28c:	1841      	adds	r1, r0, r1
 800b28e:	192c      	adds	r4, r5, r4
 800b290:	429c      	cmp	r4, r3
 800b292:	d80d      	bhi.n	800b2b0 <__copybits+0x3a>
 800b294:	0015      	movs	r5, r2
 800b296:	3511      	adds	r5, #17
 800b298:	2300      	movs	r3, #0
 800b29a:	42a5      	cmp	r5, r4
 800b29c:	d803      	bhi.n	800b2a6 <__copybits+0x30>
 800b29e:	1aa3      	subs	r3, r4, r2
 800b2a0:	3b11      	subs	r3, #17
 800b2a2:	089b      	lsrs	r3, r3, #2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	18c0      	adds	r0, r0, r3
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4281      	cmp	r1, r0
 800b2ac:	d803      	bhi.n	800b2b6 <__copybits+0x40>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	cb20      	ldmia	r3!, {r5}
 800b2b2:	c620      	stmia	r6!, {r5}
 800b2b4:	e7ec      	b.n	800b290 <__copybits+0x1a>
 800b2b6:	c008      	stmia	r0!, {r3}
 800b2b8:	e7f7      	b.n	800b2aa <__copybits+0x34>

0800b2ba <__any_on>:
 800b2ba:	0002      	movs	r2, r0
 800b2bc:	6900      	ldr	r0, [r0, #16]
 800b2be:	b510      	push	{r4, lr}
 800b2c0:	3214      	adds	r2, #20
 800b2c2:	114b      	asrs	r3, r1, #5
 800b2c4:	4298      	cmp	r0, r3
 800b2c6:	db13      	blt.n	800b2f0 <__any_on+0x36>
 800b2c8:	dd0c      	ble.n	800b2e4 <__any_on+0x2a>
 800b2ca:	241f      	movs	r4, #31
 800b2cc:	0008      	movs	r0, r1
 800b2ce:	4020      	ands	r0, r4
 800b2d0:	4221      	tst	r1, r4
 800b2d2:	d007      	beq.n	800b2e4 <__any_on+0x2a>
 800b2d4:	0099      	lsls	r1, r3, #2
 800b2d6:	588c      	ldr	r4, [r1, r2]
 800b2d8:	0021      	movs	r1, r4
 800b2da:	40c1      	lsrs	r1, r0
 800b2dc:	4081      	lsls	r1, r0
 800b2de:	2001      	movs	r0, #1
 800b2e0:	428c      	cmp	r4, r1
 800b2e2:	d104      	bne.n	800b2ee <__any_on+0x34>
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	18d3      	adds	r3, r2, r3
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d803      	bhi.n	800b2f4 <__any_on+0x3a>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	bd10      	pop	{r4, pc}
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	e7f7      	b.n	800b2e4 <__any_on+0x2a>
 800b2f4:	3b04      	subs	r3, #4
 800b2f6:	6819      	ldr	r1, [r3, #0]
 800b2f8:	2900      	cmp	r1, #0
 800b2fa:	d0f5      	beq.n	800b2e8 <__any_on+0x2e>
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7f6      	b.n	800b2ee <__any_on+0x34>

0800b300 <_calloc_r>:
 800b300:	434a      	muls	r2, r1
 800b302:	b570      	push	{r4, r5, r6, lr}
 800b304:	0011      	movs	r1, r2
 800b306:	0015      	movs	r5, r2
 800b308:	f7fd ff5c 	bl	80091c4 <_malloc_r>
 800b30c:	1e04      	subs	r4, r0, #0
 800b30e:	d003      	beq.n	800b318 <_calloc_r+0x18>
 800b310:	002a      	movs	r2, r5
 800b312:	2100      	movs	r1, #0
 800b314:	f7fd ff03 	bl	800911e <memset>
 800b318:	0020      	movs	r0, r4
 800b31a:	bd70      	pop	{r4, r5, r6, pc}

0800b31c <_realloc_r>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	0007      	movs	r7, r0
 800b320:	000d      	movs	r5, r1
 800b322:	0016      	movs	r6, r2
 800b324:	2900      	cmp	r1, #0
 800b326:	d105      	bne.n	800b334 <_realloc_r+0x18>
 800b328:	0011      	movs	r1, r2
 800b32a:	f7fd ff4b 	bl	80091c4 <_malloc_r>
 800b32e:	0004      	movs	r4, r0
 800b330:	0020      	movs	r0, r4
 800b332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b334:	2a00      	cmp	r2, #0
 800b336:	d103      	bne.n	800b340 <_realloc_r+0x24>
 800b338:	f7fd fefa 	bl	8009130 <_free_r>
 800b33c:	0034      	movs	r4, r6
 800b33e:	e7f7      	b.n	800b330 <_realloc_r+0x14>
 800b340:	f000 ffb2 	bl	800c2a8 <_malloc_usable_size_r>
 800b344:	002c      	movs	r4, r5
 800b346:	42b0      	cmp	r0, r6
 800b348:	d2f2      	bcs.n	800b330 <_realloc_r+0x14>
 800b34a:	0031      	movs	r1, r6
 800b34c:	0038      	movs	r0, r7
 800b34e:	f7fd ff39 	bl	80091c4 <_malloc_r>
 800b352:	1e04      	subs	r4, r0, #0
 800b354:	d0ec      	beq.n	800b330 <_realloc_r+0x14>
 800b356:	0029      	movs	r1, r5
 800b358:	0032      	movs	r2, r6
 800b35a:	f7fd fed7 	bl	800910c <memcpy>
 800b35e:	0029      	movs	r1, r5
 800b360:	0038      	movs	r0, r7
 800b362:	f7fd fee5 	bl	8009130 <_free_r>
 800b366:	e7e3      	b.n	800b330 <_realloc_r+0x14>

0800b368 <__ssputs_r>:
 800b368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36a:	688e      	ldr	r6, [r1, #8]
 800b36c:	b085      	sub	sp, #20
 800b36e:	0007      	movs	r7, r0
 800b370:	000c      	movs	r4, r1
 800b372:	9203      	str	r2, [sp, #12]
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	429e      	cmp	r6, r3
 800b378:	d83c      	bhi.n	800b3f4 <__ssputs_r+0x8c>
 800b37a:	2390      	movs	r3, #144	; 0x90
 800b37c:	898a      	ldrh	r2, [r1, #12]
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	421a      	tst	r2, r3
 800b382:	d034      	beq.n	800b3ee <__ssputs_r+0x86>
 800b384:	2503      	movs	r5, #3
 800b386:	6909      	ldr	r1, [r1, #16]
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	1a5b      	subs	r3, r3, r1
 800b38c:	9302      	str	r3, [sp, #8]
 800b38e:	6963      	ldr	r3, [r4, #20]
 800b390:	9802      	ldr	r0, [sp, #8]
 800b392:	435d      	muls	r5, r3
 800b394:	0feb      	lsrs	r3, r5, #31
 800b396:	195d      	adds	r5, r3, r5
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	106d      	asrs	r5, r5, #1
 800b39c:	3301      	adds	r3, #1
 800b39e:	181b      	adds	r3, r3, r0
 800b3a0:	42ab      	cmp	r3, r5
 800b3a2:	d900      	bls.n	800b3a6 <__ssputs_r+0x3e>
 800b3a4:	001d      	movs	r5, r3
 800b3a6:	0553      	lsls	r3, r2, #21
 800b3a8:	d532      	bpl.n	800b410 <__ssputs_r+0xa8>
 800b3aa:	0029      	movs	r1, r5
 800b3ac:	0038      	movs	r0, r7
 800b3ae:	f7fd ff09 	bl	80091c4 <_malloc_r>
 800b3b2:	1e06      	subs	r6, r0, #0
 800b3b4:	d109      	bne.n	800b3ca <__ssputs_r+0x62>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	603b      	str	r3, [r7, #0]
 800b3ba:	2340      	movs	r3, #64	; 0x40
 800b3bc:	2001      	movs	r0, #1
 800b3be:	89a2      	ldrh	r2, [r4, #12]
 800b3c0:	4240      	negs	r0, r0
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	b005      	add	sp, #20
 800b3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ca:	9a02      	ldr	r2, [sp, #8]
 800b3cc:	6921      	ldr	r1, [r4, #16]
 800b3ce:	f7fd fe9d 	bl	800910c <memcpy>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	4a14      	ldr	r2, [pc, #80]	; (800b428 <__ssputs_r+0xc0>)
 800b3d6:	401a      	ands	r2, r3
 800b3d8:	2380      	movs	r3, #128	; 0x80
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	9b02      	ldr	r3, [sp, #8]
 800b3e0:	6126      	str	r6, [r4, #16]
 800b3e2:	18f6      	adds	r6, r6, r3
 800b3e4:	6026      	str	r6, [r4, #0]
 800b3e6:	6165      	str	r5, [r4, #20]
 800b3e8:	9e01      	ldr	r6, [sp, #4]
 800b3ea:	1aed      	subs	r5, r5, r3
 800b3ec:	60a5      	str	r5, [r4, #8]
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	429e      	cmp	r6, r3
 800b3f2:	d900      	bls.n	800b3f6 <__ssputs_r+0x8e>
 800b3f4:	9e01      	ldr	r6, [sp, #4]
 800b3f6:	0032      	movs	r2, r6
 800b3f8:	9903      	ldr	r1, [sp, #12]
 800b3fa:	6820      	ldr	r0, [r4, #0]
 800b3fc:	f000 ff41 	bl	800c282 <memmove>
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	2000      	movs	r0, #0
 800b404:	1b9b      	subs	r3, r3, r6
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	199e      	adds	r6, r3, r6
 800b40c:	6026      	str	r6, [r4, #0]
 800b40e:	e7da      	b.n	800b3c6 <__ssputs_r+0x5e>
 800b410:	002a      	movs	r2, r5
 800b412:	0038      	movs	r0, r7
 800b414:	f7ff ff82 	bl	800b31c <_realloc_r>
 800b418:	1e06      	subs	r6, r0, #0
 800b41a:	d1e0      	bne.n	800b3de <__ssputs_r+0x76>
 800b41c:	0038      	movs	r0, r7
 800b41e:	6921      	ldr	r1, [r4, #16]
 800b420:	f7fd fe86 	bl	8009130 <_free_r>
 800b424:	e7c7      	b.n	800b3b6 <__ssputs_r+0x4e>
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	fffffb7f 	.word	0xfffffb7f

0800b42c <_svfiprintf_r>:
 800b42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b42e:	b0a1      	sub	sp, #132	; 0x84
 800b430:	9003      	str	r0, [sp, #12]
 800b432:	001d      	movs	r5, r3
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	000f      	movs	r7, r1
 800b438:	0016      	movs	r6, r2
 800b43a:	061b      	lsls	r3, r3, #24
 800b43c:	d511      	bpl.n	800b462 <_svfiprintf_r+0x36>
 800b43e:	690b      	ldr	r3, [r1, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10e      	bne.n	800b462 <_svfiprintf_r+0x36>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7fd febd 	bl	80091c4 <_malloc_r>
 800b44a:	6038      	str	r0, [r7, #0]
 800b44c:	6138      	str	r0, [r7, #16]
 800b44e:	2800      	cmp	r0, #0
 800b450:	d105      	bne.n	800b45e <_svfiprintf_r+0x32>
 800b452:	230c      	movs	r3, #12
 800b454:	9a03      	ldr	r2, [sp, #12]
 800b456:	3801      	subs	r0, #1
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	b021      	add	sp, #132	; 0x84
 800b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	2300      	movs	r3, #0
 800b464:	ac08      	add	r4, sp, #32
 800b466:	6163      	str	r3, [r4, #20]
 800b468:	3320      	adds	r3, #32
 800b46a:	7663      	strb	r3, [r4, #25]
 800b46c:	3310      	adds	r3, #16
 800b46e:	76a3      	strb	r3, [r4, #26]
 800b470:	9507      	str	r5, [sp, #28]
 800b472:	0035      	movs	r5, r6
 800b474:	782b      	ldrb	r3, [r5, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <_svfiprintf_r+0x52>
 800b47a:	2b25      	cmp	r3, #37	; 0x25
 800b47c:	d147      	bne.n	800b50e <_svfiprintf_r+0xe2>
 800b47e:	1bab      	subs	r3, r5, r6
 800b480:	9305      	str	r3, [sp, #20]
 800b482:	42b5      	cmp	r5, r6
 800b484:	d00c      	beq.n	800b4a0 <_svfiprintf_r+0x74>
 800b486:	0032      	movs	r2, r6
 800b488:	0039      	movs	r1, r7
 800b48a:	9803      	ldr	r0, [sp, #12]
 800b48c:	f7ff ff6c 	bl	800b368 <__ssputs_r>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d100      	bne.n	800b496 <_svfiprintf_r+0x6a>
 800b494:	e0ae      	b.n	800b5f4 <_svfiprintf_r+0x1c8>
 800b496:	6962      	ldr	r2, [r4, #20]
 800b498:	9b05      	ldr	r3, [sp, #20]
 800b49a:	4694      	mov	ip, r2
 800b49c:	4463      	add	r3, ip
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	782b      	ldrb	r3, [r5, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d100      	bne.n	800b4a8 <_svfiprintf_r+0x7c>
 800b4a6:	e0a5      	b.n	800b5f4 <_svfiprintf_r+0x1c8>
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	4252      	negs	r2, r2
 800b4ae:	6062      	str	r2, [r4, #4]
 800b4b0:	a904      	add	r1, sp, #16
 800b4b2:	3254      	adds	r2, #84	; 0x54
 800b4b4:	1852      	adds	r2, r2, r1
 800b4b6:	1c6e      	adds	r6, r5, #1
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	60e3      	str	r3, [r4, #12]
 800b4bc:	60a3      	str	r3, [r4, #8]
 800b4be:	7013      	strb	r3, [r2, #0]
 800b4c0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	7831      	ldrb	r1, [r6, #0]
 800b4c6:	4854      	ldr	r0, [pc, #336]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b4c8:	f000 fed0 	bl	800c26c <memchr>
 800b4cc:	1c75      	adds	r5, r6, #1
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d11f      	bne.n	800b512 <_svfiprintf_r+0xe6>
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	06d3      	lsls	r3, r2, #27
 800b4d6:	d504      	bpl.n	800b4e2 <_svfiprintf_r+0xb6>
 800b4d8:	2353      	movs	r3, #83	; 0x53
 800b4da:	a904      	add	r1, sp, #16
 800b4dc:	185b      	adds	r3, r3, r1
 800b4de:	2120      	movs	r1, #32
 800b4e0:	7019      	strb	r1, [r3, #0]
 800b4e2:	0713      	lsls	r3, r2, #28
 800b4e4:	d504      	bpl.n	800b4f0 <_svfiprintf_r+0xc4>
 800b4e6:	2353      	movs	r3, #83	; 0x53
 800b4e8:	a904      	add	r1, sp, #16
 800b4ea:	185b      	adds	r3, r3, r1
 800b4ec:	212b      	movs	r1, #43	; 0x2b
 800b4ee:	7019      	strb	r1, [r3, #0]
 800b4f0:	7833      	ldrb	r3, [r6, #0]
 800b4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f4:	d016      	beq.n	800b524 <_svfiprintf_r+0xf8>
 800b4f6:	0035      	movs	r5, r6
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	200a      	movs	r0, #10
 800b4fc:	68e3      	ldr	r3, [r4, #12]
 800b4fe:	782a      	ldrb	r2, [r5, #0]
 800b500:	1c6e      	adds	r6, r5, #1
 800b502:	3a30      	subs	r2, #48	; 0x30
 800b504:	2a09      	cmp	r2, #9
 800b506:	d94e      	bls.n	800b5a6 <_svfiprintf_r+0x17a>
 800b508:	2900      	cmp	r1, #0
 800b50a:	d111      	bne.n	800b530 <_svfiprintf_r+0x104>
 800b50c:	e017      	b.n	800b53e <_svfiprintf_r+0x112>
 800b50e:	3501      	adds	r5, #1
 800b510:	e7b0      	b.n	800b474 <_svfiprintf_r+0x48>
 800b512:	4b41      	ldr	r3, [pc, #260]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	1ac0      	subs	r0, r0, r3
 800b518:	2301      	movs	r3, #1
 800b51a:	4083      	lsls	r3, r0
 800b51c:	4313      	orrs	r3, r2
 800b51e:	002e      	movs	r6, r5
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	e7ce      	b.n	800b4c2 <_svfiprintf_r+0x96>
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	1d19      	adds	r1, r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	9107      	str	r1, [sp, #28]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db01      	blt.n	800b534 <_svfiprintf_r+0x108>
 800b530:	930b      	str	r3, [sp, #44]	; 0x2c
 800b532:	e004      	b.n	800b53e <_svfiprintf_r+0x112>
 800b534:	425b      	negs	r3, r3
 800b536:	60e3      	str	r3, [r4, #12]
 800b538:	2302      	movs	r3, #2
 800b53a:	4313      	orrs	r3, r2
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	782b      	ldrb	r3, [r5, #0]
 800b540:	2b2e      	cmp	r3, #46	; 0x2e
 800b542:	d10a      	bne.n	800b55a <_svfiprintf_r+0x12e>
 800b544:	786b      	ldrb	r3, [r5, #1]
 800b546:	2b2a      	cmp	r3, #42	; 0x2a
 800b548:	d135      	bne.n	800b5b6 <_svfiprintf_r+0x18a>
 800b54a:	9b07      	ldr	r3, [sp, #28]
 800b54c:	3502      	adds	r5, #2
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	9207      	str	r2, [sp, #28]
 800b554:	2b00      	cmp	r3, #0
 800b556:	db2b      	blt.n	800b5b0 <_svfiprintf_r+0x184>
 800b558:	9309      	str	r3, [sp, #36]	; 0x24
 800b55a:	4e30      	ldr	r6, [pc, #192]	; (800b61c <_svfiprintf_r+0x1f0>)
 800b55c:	2203      	movs	r2, #3
 800b55e:	0030      	movs	r0, r6
 800b560:	7829      	ldrb	r1, [r5, #0]
 800b562:	f000 fe83 	bl	800c26c <memchr>
 800b566:	2800      	cmp	r0, #0
 800b568:	d006      	beq.n	800b578 <_svfiprintf_r+0x14c>
 800b56a:	2340      	movs	r3, #64	; 0x40
 800b56c:	1b80      	subs	r0, r0, r6
 800b56e:	4083      	lsls	r3, r0
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	3501      	adds	r5, #1
 800b574:	4313      	orrs	r3, r2
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	7829      	ldrb	r1, [r5, #0]
 800b57a:	2206      	movs	r2, #6
 800b57c:	4828      	ldr	r0, [pc, #160]	; (800b620 <_svfiprintf_r+0x1f4>)
 800b57e:	1c6e      	adds	r6, r5, #1
 800b580:	7621      	strb	r1, [r4, #24]
 800b582:	f000 fe73 	bl	800c26c <memchr>
 800b586:	2800      	cmp	r0, #0
 800b588:	d03c      	beq.n	800b604 <_svfiprintf_r+0x1d8>
 800b58a:	4b26      	ldr	r3, [pc, #152]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d125      	bne.n	800b5dc <_svfiprintf_r+0x1b0>
 800b590:	2207      	movs	r2, #7
 800b592:	9b07      	ldr	r3, [sp, #28]
 800b594:	3307      	adds	r3, #7
 800b596:	4393      	bics	r3, r2
 800b598:	3308      	adds	r3, #8
 800b59a:	9307      	str	r3, [sp, #28]
 800b59c:	6963      	ldr	r3, [r4, #20]
 800b59e:	9a04      	ldr	r2, [sp, #16]
 800b5a0:	189b      	adds	r3, r3, r2
 800b5a2:	6163      	str	r3, [r4, #20]
 800b5a4:	e765      	b.n	800b472 <_svfiprintf_r+0x46>
 800b5a6:	4343      	muls	r3, r0
 800b5a8:	0035      	movs	r5, r6
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	189b      	adds	r3, r3, r2
 800b5ae:	e7a6      	b.n	800b4fe <_svfiprintf_r+0xd2>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	425b      	negs	r3, r3
 800b5b4:	e7d0      	b.n	800b558 <_svfiprintf_r+0x12c>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	200a      	movs	r0, #10
 800b5ba:	001a      	movs	r2, r3
 800b5bc:	3501      	adds	r5, #1
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	7829      	ldrb	r1, [r5, #0]
 800b5c2:	1c6e      	adds	r6, r5, #1
 800b5c4:	3930      	subs	r1, #48	; 0x30
 800b5c6:	2909      	cmp	r1, #9
 800b5c8:	d903      	bls.n	800b5d2 <_svfiprintf_r+0x1a6>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0c5      	beq.n	800b55a <_svfiprintf_r+0x12e>
 800b5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b5d0:	e7c3      	b.n	800b55a <_svfiprintf_r+0x12e>
 800b5d2:	4342      	muls	r2, r0
 800b5d4:	0035      	movs	r5, r6
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	1852      	adds	r2, r2, r1
 800b5da:	e7f1      	b.n	800b5c0 <_svfiprintf_r+0x194>
 800b5dc:	ab07      	add	r3, sp, #28
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	003a      	movs	r2, r7
 800b5e2:	0021      	movs	r1, r4
 800b5e4:	4b10      	ldr	r3, [pc, #64]	; (800b628 <_svfiprintf_r+0x1fc>)
 800b5e6:	9803      	ldr	r0, [sp, #12]
 800b5e8:	e000      	b.n	800b5ec <_svfiprintf_r+0x1c0>
 800b5ea:	bf00      	nop
 800b5ec:	9004      	str	r0, [sp, #16]
 800b5ee:	9b04      	ldr	r3, [sp, #16]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	d1d3      	bne.n	800b59c <_svfiprintf_r+0x170>
 800b5f4:	89bb      	ldrh	r3, [r7, #12]
 800b5f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5f8:	065b      	lsls	r3, r3, #25
 800b5fa:	d400      	bmi.n	800b5fe <_svfiprintf_r+0x1d2>
 800b5fc:	e72d      	b.n	800b45a <_svfiprintf_r+0x2e>
 800b5fe:	2001      	movs	r0, #1
 800b600:	4240      	negs	r0, r0
 800b602:	e72a      	b.n	800b45a <_svfiprintf_r+0x2e>
 800b604:	ab07      	add	r3, sp, #28
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	003a      	movs	r2, r7
 800b60a:	0021      	movs	r1, r4
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <_svfiprintf_r+0x1fc>)
 800b60e:	9803      	ldr	r0, [sp, #12]
 800b610:	f000 f9de 	bl	800b9d0 <_printf_i>
 800b614:	e7ea      	b.n	800b5ec <_svfiprintf_r+0x1c0>
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	0800d574 	.word	0x0800d574
 800b61c:	0800d57a 	.word	0x0800d57a
 800b620:	0800d57e 	.word	0x0800d57e
 800b624:	00000000 	.word	0x00000000
 800b628:	0800b369 	.word	0x0800b369

0800b62c <__sfputc_r>:
 800b62c:	6893      	ldr	r3, [r2, #8]
 800b62e:	b510      	push	{r4, lr}
 800b630:	3b01      	subs	r3, #1
 800b632:	6093      	str	r3, [r2, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	da04      	bge.n	800b642 <__sfputc_r+0x16>
 800b638:	6994      	ldr	r4, [r2, #24]
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	db07      	blt.n	800b64e <__sfputc_r+0x22>
 800b63e:	290a      	cmp	r1, #10
 800b640:	d005      	beq.n	800b64e <__sfputc_r+0x22>
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	1c58      	adds	r0, r3, #1
 800b646:	6010      	str	r0, [r2, #0]
 800b648:	7019      	strb	r1, [r3, #0]
 800b64a:	0008      	movs	r0, r1
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	f000 faeb 	bl	800bc28 <__swbuf_r>
 800b652:	0001      	movs	r1, r0
 800b654:	e7f9      	b.n	800b64a <__sfputc_r+0x1e>

0800b656 <__sfputs_r>:
 800b656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b658:	0006      	movs	r6, r0
 800b65a:	000f      	movs	r7, r1
 800b65c:	0014      	movs	r4, r2
 800b65e:	18d5      	adds	r5, r2, r3
 800b660:	42ac      	cmp	r4, r5
 800b662:	d101      	bne.n	800b668 <__sfputs_r+0x12>
 800b664:	2000      	movs	r0, #0
 800b666:	e007      	b.n	800b678 <__sfputs_r+0x22>
 800b668:	7821      	ldrb	r1, [r4, #0]
 800b66a:	003a      	movs	r2, r7
 800b66c:	0030      	movs	r0, r6
 800b66e:	f7ff ffdd 	bl	800b62c <__sfputc_r>
 800b672:	3401      	adds	r4, #1
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d1f3      	bne.n	800b660 <__sfputs_r+0xa>
 800b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b67c <_vfiprintf_r>:
 800b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67e:	b0a1      	sub	sp, #132	; 0x84
 800b680:	0006      	movs	r6, r0
 800b682:	000c      	movs	r4, r1
 800b684:	001f      	movs	r7, r3
 800b686:	9203      	str	r2, [sp, #12]
 800b688:	2800      	cmp	r0, #0
 800b68a:	d004      	beq.n	800b696 <_vfiprintf_r+0x1a>
 800b68c:	6983      	ldr	r3, [r0, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <_vfiprintf_r+0x1a>
 800b692:	f000 fcdb 	bl	800c04c <__sinit>
 800b696:	4b8e      	ldr	r3, [pc, #568]	; (800b8d0 <_vfiprintf_r+0x254>)
 800b698:	429c      	cmp	r4, r3
 800b69a:	d11c      	bne.n	800b6d6 <_vfiprintf_r+0x5a>
 800b69c:	6874      	ldr	r4, [r6, #4]
 800b69e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a0:	07db      	lsls	r3, r3, #31
 800b6a2:	d405      	bmi.n	800b6b0 <_vfiprintf_r+0x34>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	059b      	lsls	r3, r3, #22
 800b6a8:	d402      	bmi.n	800b6b0 <_vfiprintf_r+0x34>
 800b6aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ac:	f000 fd6f 	bl	800c18e <__retarget_lock_acquire_recursive>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	071b      	lsls	r3, r3, #28
 800b6b4:	d502      	bpl.n	800b6bc <_vfiprintf_r+0x40>
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11d      	bne.n	800b6f8 <_vfiprintf_r+0x7c>
 800b6bc:	0021      	movs	r1, r4
 800b6be:	0030      	movs	r0, r6
 800b6c0:	f000 fb16 	bl	800bcf0 <__swsetup_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d017      	beq.n	800b6f8 <_vfiprintf_r+0x7c>
 800b6c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6ca:	07db      	lsls	r3, r3, #31
 800b6cc:	d50d      	bpl.n	800b6ea <_vfiprintf_r+0x6e>
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	4240      	negs	r0, r0
 800b6d2:	b021      	add	sp, #132	; 0x84
 800b6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d6:	4b7f      	ldr	r3, [pc, #508]	; (800b8d4 <_vfiprintf_r+0x258>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	d101      	bne.n	800b6e0 <_vfiprintf_r+0x64>
 800b6dc:	68b4      	ldr	r4, [r6, #8]
 800b6de:	e7de      	b.n	800b69e <_vfiprintf_r+0x22>
 800b6e0:	4b7d      	ldr	r3, [pc, #500]	; (800b8d8 <_vfiprintf_r+0x25c>)
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d1db      	bne.n	800b69e <_vfiprintf_r+0x22>
 800b6e6:	68f4      	ldr	r4, [r6, #12]
 800b6e8:	e7d9      	b.n	800b69e <_vfiprintf_r+0x22>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	059b      	lsls	r3, r3, #22
 800b6ee:	d4ee      	bmi.n	800b6ce <_vfiprintf_r+0x52>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f2:	f000 fd4d 	bl	800c190 <__retarget_lock_release_recursive>
 800b6f6:	e7ea      	b.n	800b6ce <_vfiprintf_r+0x52>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	ad08      	add	r5, sp, #32
 800b6fc:	616b      	str	r3, [r5, #20]
 800b6fe:	3320      	adds	r3, #32
 800b700:	766b      	strb	r3, [r5, #25]
 800b702:	3310      	adds	r3, #16
 800b704:	76ab      	strb	r3, [r5, #26]
 800b706:	9707      	str	r7, [sp, #28]
 800b708:	9f03      	ldr	r7, [sp, #12]
 800b70a:	783b      	ldrb	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <_vfiprintf_r+0x98>
 800b710:	2b25      	cmp	r3, #37	; 0x25
 800b712:	d14e      	bne.n	800b7b2 <_vfiprintf_r+0x136>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	1afb      	subs	r3, r7, r3
 800b718:	9305      	str	r3, [sp, #20]
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	429f      	cmp	r7, r3
 800b71e:	d00d      	beq.n	800b73c <_vfiprintf_r+0xc0>
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	0021      	movs	r1, r4
 800b724:	0030      	movs	r0, r6
 800b726:	9a03      	ldr	r2, [sp, #12]
 800b728:	f7ff ff95 	bl	800b656 <__sfputs_r>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d100      	bne.n	800b732 <_vfiprintf_r+0xb6>
 800b730:	e0b5      	b.n	800b89e <_vfiprintf_r+0x222>
 800b732:	696a      	ldr	r2, [r5, #20]
 800b734:	9b05      	ldr	r3, [sp, #20]
 800b736:	4694      	mov	ip, r2
 800b738:	4463      	add	r3, ip
 800b73a:	616b      	str	r3, [r5, #20]
 800b73c:	783b      	ldrb	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d100      	bne.n	800b744 <_vfiprintf_r+0xc8>
 800b742:	e0ac      	b.n	800b89e <_vfiprintf_r+0x222>
 800b744:	2201      	movs	r2, #1
 800b746:	1c7b      	adds	r3, r7, #1
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	2300      	movs	r3, #0
 800b74c:	4252      	negs	r2, r2
 800b74e:	606a      	str	r2, [r5, #4]
 800b750:	a904      	add	r1, sp, #16
 800b752:	3254      	adds	r2, #84	; 0x54
 800b754:	1852      	adds	r2, r2, r1
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	60eb      	str	r3, [r5, #12]
 800b75a:	60ab      	str	r3, [r5, #8]
 800b75c:	7013      	strb	r3, [r2, #0]
 800b75e:	65ab      	str	r3, [r5, #88]	; 0x58
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	2205      	movs	r2, #5
 800b764:	7819      	ldrb	r1, [r3, #0]
 800b766:	485d      	ldr	r0, [pc, #372]	; (800b8dc <_vfiprintf_r+0x260>)
 800b768:	f000 fd80 	bl	800c26c <memchr>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	1c5f      	adds	r7, r3, #1
 800b770:	2800      	cmp	r0, #0
 800b772:	d120      	bne.n	800b7b6 <_vfiprintf_r+0x13a>
 800b774:	682a      	ldr	r2, [r5, #0]
 800b776:	06d3      	lsls	r3, r2, #27
 800b778:	d504      	bpl.n	800b784 <_vfiprintf_r+0x108>
 800b77a:	2353      	movs	r3, #83	; 0x53
 800b77c:	a904      	add	r1, sp, #16
 800b77e:	185b      	adds	r3, r3, r1
 800b780:	2120      	movs	r1, #32
 800b782:	7019      	strb	r1, [r3, #0]
 800b784:	0713      	lsls	r3, r2, #28
 800b786:	d504      	bpl.n	800b792 <_vfiprintf_r+0x116>
 800b788:	2353      	movs	r3, #83	; 0x53
 800b78a:	a904      	add	r1, sp, #16
 800b78c:	185b      	adds	r3, r3, r1
 800b78e:	212b      	movs	r1, #43	; 0x2b
 800b790:	7019      	strb	r1, [r3, #0]
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b2a      	cmp	r3, #42	; 0x2a
 800b798:	d016      	beq.n	800b7c8 <_vfiprintf_r+0x14c>
 800b79a:	2100      	movs	r1, #0
 800b79c:	68eb      	ldr	r3, [r5, #12]
 800b79e:	9f03      	ldr	r7, [sp, #12]
 800b7a0:	783a      	ldrb	r2, [r7, #0]
 800b7a2:	1c78      	adds	r0, r7, #1
 800b7a4:	3a30      	subs	r2, #48	; 0x30
 800b7a6:	4684      	mov	ip, r0
 800b7a8:	2a09      	cmp	r2, #9
 800b7aa:	d94f      	bls.n	800b84c <_vfiprintf_r+0x1d0>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d111      	bne.n	800b7d4 <_vfiprintf_r+0x158>
 800b7b0:	e017      	b.n	800b7e2 <_vfiprintf_r+0x166>
 800b7b2:	3701      	adds	r7, #1
 800b7b4:	e7a9      	b.n	800b70a <_vfiprintf_r+0x8e>
 800b7b6:	4b49      	ldr	r3, [pc, #292]	; (800b8dc <_vfiprintf_r+0x260>)
 800b7b8:	682a      	ldr	r2, [r5, #0]
 800b7ba:	1ac0      	subs	r0, r0, r3
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4083      	lsls	r3, r0
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	602b      	str	r3, [r5, #0]
 800b7c4:	9703      	str	r7, [sp, #12]
 800b7c6:	e7cb      	b.n	800b760 <_vfiprintf_r+0xe4>
 800b7c8:	9b07      	ldr	r3, [sp, #28]
 800b7ca:	1d19      	adds	r1, r3, #4
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	9107      	str	r1, [sp, #28]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	db01      	blt.n	800b7d8 <_vfiprintf_r+0x15c>
 800b7d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7d6:	e004      	b.n	800b7e2 <_vfiprintf_r+0x166>
 800b7d8:	425b      	negs	r3, r3
 800b7da:	60eb      	str	r3, [r5, #12]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	783b      	ldrb	r3, [r7, #0]
 800b7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e6:	d10a      	bne.n	800b7fe <_vfiprintf_r+0x182>
 800b7e8:	787b      	ldrb	r3, [r7, #1]
 800b7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ec:	d137      	bne.n	800b85e <_vfiprintf_r+0x1e2>
 800b7ee:	9b07      	ldr	r3, [sp, #28]
 800b7f0:	3702      	adds	r7, #2
 800b7f2:	1d1a      	adds	r2, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9207      	str	r2, [sp, #28]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	db2d      	blt.n	800b858 <_vfiprintf_r+0x1dc>
 800b7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fe:	2203      	movs	r2, #3
 800b800:	7839      	ldrb	r1, [r7, #0]
 800b802:	4837      	ldr	r0, [pc, #220]	; (800b8e0 <_vfiprintf_r+0x264>)
 800b804:	f000 fd32 	bl	800c26c <memchr>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d007      	beq.n	800b81c <_vfiprintf_r+0x1a0>
 800b80c:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <_vfiprintf_r+0x264>)
 800b80e:	682a      	ldr	r2, [r5, #0]
 800b810:	1ac0      	subs	r0, r0, r3
 800b812:	2340      	movs	r3, #64	; 0x40
 800b814:	4083      	lsls	r3, r0
 800b816:	4313      	orrs	r3, r2
 800b818:	3701      	adds	r7, #1
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	7839      	ldrb	r1, [r7, #0]
 800b81e:	1c7b      	adds	r3, r7, #1
 800b820:	2206      	movs	r2, #6
 800b822:	4830      	ldr	r0, [pc, #192]	; (800b8e4 <_vfiprintf_r+0x268>)
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	7629      	strb	r1, [r5, #24]
 800b828:	f000 fd20 	bl	800c26c <memchr>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d045      	beq.n	800b8bc <_vfiprintf_r+0x240>
 800b830:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <_vfiprintf_r+0x26c>)
 800b832:	2b00      	cmp	r3, #0
 800b834:	d127      	bne.n	800b886 <_vfiprintf_r+0x20a>
 800b836:	2207      	movs	r2, #7
 800b838:	9b07      	ldr	r3, [sp, #28]
 800b83a:	3307      	adds	r3, #7
 800b83c:	4393      	bics	r3, r2
 800b83e:	3308      	adds	r3, #8
 800b840:	9307      	str	r3, [sp, #28]
 800b842:	696b      	ldr	r3, [r5, #20]
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	189b      	adds	r3, r3, r2
 800b848:	616b      	str	r3, [r5, #20]
 800b84a:	e75d      	b.n	800b708 <_vfiprintf_r+0x8c>
 800b84c:	210a      	movs	r1, #10
 800b84e:	434b      	muls	r3, r1
 800b850:	4667      	mov	r7, ip
 800b852:	189b      	adds	r3, r3, r2
 800b854:	3909      	subs	r1, #9
 800b856:	e7a3      	b.n	800b7a0 <_vfiprintf_r+0x124>
 800b858:	2301      	movs	r3, #1
 800b85a:	425b      	negs	r3, r3
 800b85c:	e7ce      	b.n	800b7fc <_vfiprintf_r+0x180>
 800b85e:	2300      	movs	r3, #0
 800b860:	001a      	movs	r2, r3
 800b862:	3701      	adds	r7, #1
 800b864:	606b      	str	r3, [r5, #4]
 800b866:	7839      	ldrb	r1, [r7, #0]
 800b868:	1c78      	adds	r0, r7, #1
 800b86a:	3930      	subs	r1, #48	; 0x30
 800b86c:	4684      	mov	ip, r0
 800b86e:	2909      	cmp	r1, #9
 800b870:	d903      	bls.n	800b87a <_vfiprintf_r+0x1fe>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0c3      	beq.n	800b7fe <_vfiprintf_r+0x182>
 800b876:	9209      	str	r2, [sp, #36]	; 0x24
 800b878:	e7c1      	b.n	800b7fe <_vfiprintf_r+0x182>
 800b87a:	230a      	movs	r3, #10
 800b87c:	435a      	muls	r2, r3
 800b87e:	4667      	mov	r7, ip
 800b880:	1852      	adds	r2, r2, r1
 800b882:	3b09      	subs	r3, #9
 800b884:	e7ef      	b.n	800b866 <_vfiprintf_r+0x1ea>
 800b886:	ab07      	add	r3, sp, #28
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	0022      	movs	r2, r4
 800b88c:	0029      	movs	r1, r5
 800b88e:	0030      	movs	r0, r6
 800b890:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <_vfiprintf_r+0x270>)
 800b892:	e000      	b.n	800b896 <_vfiprintf_r+0x21a>
 800b894:	bf00      	nop
 800b896:	9004      	str	r0, [sp, #16]
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	3301      	adds	r3, #1
 800b89c:	d1d1      	bne.n	800b842 <_vfiprintf_r+0x1c6>
 800b89e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8a0:	07db      	lsls	r3, r3, #31
 800b8a2:	d405      	bmi.n	800b8b0 <_vfiprintf_r+0x234>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	059b      	lsls	r3, r3, #22
 800b8a8:	d402      	bmi.n	800b8b0 <_vfiprintf_r+0x234>
 800b8aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ac:	f000 fc70 	bl	800c190 <__retarget_lock_release_recursive>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	065b      	lsls	r3, r3, #25
 800b8b4:	d500      	bpl.n	800b8b8 <_vfiprintf_r+0x23c>
 800b8b6:	e70a      	b.n	800b6ce <_vfiprintf_r+0x52>
 800b8b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b8ba:	e70a      	b.n	800b6d2 <_vfiprintf_r+0x56>
 800b8bc:	ab07      	add	r3, sp, #28
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	0022      	movs	r2, r4
 800b8c2:	0029      	movs	r1, r5
 800b8c4:	0030      	movs	r0, r6
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <_vfiprintf_r+0x270>)
 800b8c8:	f000 f882 	bl	800b9d0 <_printf_i>
 800b8cc:	e7e3      	b.n	800b896 <_vfiprintf_r+0x21a>
 800b8ce:	46c0      	nop			; (mov r8, r8)
 800b8d0:	0800d5c8 	.word	0x0800d5c8
 800b8d4:	0800d5e8 	.word	0x0800d5e8
 800b8d8:	0800d5a8 	.word	0x0800d5a8
 800b8dc:	0800d574 	.word	0x0800d574
 800b8e0:	0800d57a 	.word	0x0800d57a
 800b8e4:	0800d57e 	.word	0x0800d57e
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	0800b657 	.word	0x0800b657

0800b8f0 <_printf_common>:
 800b8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8f2:	0015      	movs	r5, r2
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	688a      	ldr	r2, [r1, #8]
 800b8f8:	690b      	ldr	r3, [r1, #16]
 800b8fa:	000c      	movs	r4, r1
 800b8fc:	9000      	str	r0, [sp, #0]
 800b8fe:	4293      	cmp	r3, r2
 800b900:	da00      	bge.n	800b904 <_printf_common+0x14>
 800b902:	0013      	movs	r3, r2
 800b904:	0022      	movs	r2, r4
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	3243      	adds	r2, #67	; 0x43
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d001      	beq.n	800b914 <_printf_common+0x24>
 800b910:	3301      	adds	r3, #1
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	069b      	lsls	r3, r3, #26
 800b918:	d502      	bpl.n	800b920 <_printf_common+0x30>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	3302      	adds	r3, #2
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	6822      	ldr	r2, [r4, #0]
 800b922:	2306      	movs	r3, #6
 800b924:	0017      	movs	r7, r2
 800b926:	401f      	ands	r7, r3
 800b928:	421a      	tst	r2, r3
 800b92a:	d027      	beq.n	800b97c <_printf_common+0x8c>
 800b92c:	0023      	movs	r3, r4
 800b92e:	3343      	adds	r3, #67	; 0x43
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	1e5a      	subs	r2, r3, #1
 800b934:	4193      	sbcs	r3, r2
 800b936:	6822      	ldr	r2, [r4, #0]
 800b938:	0692      	lsls	r2, r2, #26
 800b93a:	d430      	bmi.n	800b99e <_printf_common+0xae>
 800b93c:	0022      	movs	r2, r4
 800b93e:	9901      	ldr	r1, [sp, #4]
 800b940:	9800      	ldr	r0, [sp, #0]
 800b942:	9e08      	ldr	r6, [sp, #32]
 800b944:	3243      	adds	r2, #67	; 0x43
 800b946:	47b0      	blx	r6
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d025      	beq.n	800b998 <_printf_common+0xa8>
 800b94c:	2306      	movs	r3, #6
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	682a      	ldr	r2, [r5, #0]
 800b952:	68e1      	ldr	r1, [r4, #12]
 800b954:	2500      	movs	r5, #0
 800b956:	4003      	ands	r3, r0
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d103      	bne.n	800b964 <_printf_common+0x74>
 800b95c:	1a8d      	subs	r5, r1, r2
 800b95e:	43eb      	mvns	r3, r5
 800b960:	17db      	asrs	r3, r3, #31
 800b962:	401d      	ands	r5, r3
 800b964:	68a3      	ldr	r3, [r4, #8]
 800b966:	6922      	ldr	r2, [r4, #16]
 800b968:	4293      	cmp	r3, r2
 800b96a:	dd01      	ble.n	800b970 <_printf_common+0x80>
 800b96c:	1a9b      	subs	r3, r3, r2
 800b96e:	18ed      	adds	r5, r5, r3
 800b970:	2700      	movs	r7, #0
 800b972:	42bd      	cmp	r5, r7
 800b974:	d120      	bne.n	800b9b8 <_printf_common+0xc8>
 800b976:	2000      	movs	r0, #0
 800b978:	e010      	b.n	800b99c <_printf_common+0xac>
 800b97a:	3701      	adds	r7, #1
 800b97c:	68e3      	ldr	r3, [r4, #12]
 800b97e:	682a      	ldr	r2, [r5, #0]
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	42bb      	cmp	r3, r7
 800b984:	ddd2      	ble.n	800b92c <_printf_common+0x3c>
 800b986:	0022      	movs	r2, r4
 800b988:	2301      	movs	r3, #1
 800b98a:	9901      	ldr	r1, [sp, #4]
 800b98c:	9800      	ldr	r0, [sp, #0]
 800b98e:	9e08      	ldr	r6, [sp, #32]
 800b990:	3219      	adds	r2, #25
 800b992:	47b0      	blx	r6
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d1f0      	bne.n	800b97a <_printf_common+0x8a>
 800b998:	2001      	movs	r0, #1
 800b99a:	4240      	negs	r0, r0
 800b99c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b99e:	2030      	movs	r0, #48	; 0x30
 800b9a0:	18e1      	adds	r1, r4, r3
 800b9a2:	3143      	adds	r1, #67	; 0x43
 800b9a4:	7008      	strb	r0, [r1, #0]
 800b9a6:	0021      	movs	r1, r4
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	3145      	adds	r1, #69	; 0x45
 800b9ac:	7809      	ldrb	r1, [r1, #0]
 800b9ae:	18a2      	adds	r2, r4, r2
 800b9b0:	3243      	adds	r2, #67	; 0x43
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	7011      	strb	r1, [r2, #0]
 800b9b6:	e7c1      	b.n	800b93c <_printf_common+0x4c>
 800b9b8:	0022      	movs	r2, r4
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	9800      	ldr	r0, [sp, #0]
 800b9c0:	9e08      	ldr	r6, [sp, #32]
 800b9c2:	321a      	adds	r2, #26
 800b9c4:	47b0      	blx	r6
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d0e6      	beq.n	800b998 <_printf_common+0xa8>
 800b9ca:	3701      	adds	r7, #1
 800b9cc:	e7d1      	b.n	800b972 <_printf_common+0x82>
	...

0800b9d0 <_printf_i>:
 800b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d2:	b08b      	sub	sp, #44	; 0x2c
 800b9d4:	9206      	str	r2, [sp, #24]
 800b9d6:	000a      	movs	r2, r1
 800b9d8:	3243      	adds	r2, #67	; 0x43
 800b9da:	9307      	str	r3, [sp, #28]
 800b9dc:	9005      	str	r0, [sp, #20]
 800b9de:	9204      	str	r2, [sp, #16]
 800b9e0:	7e0a      	ldrb	r2, [r1, #24]
 800b9e2:	000c      	movs	r4, r1
 800b9e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9e6:	2a78      	cmp	r2, #120	; 0x78
 800b9e8:	d806      	bhi.n	800b9f8 <_printf_i+0x28>
 800b9ea:	2a62      	cmp	r2, #98	; 0x62
 800b9ec:	d808      	bhi.n	800ba00 <_printf_i+0x30>
 800b9ee:	2a00      	cmp	r2, #0
 800b9f0:	d100      	bne.n	800b9f4 <_printf_i+0x24>
 800b9f2:	e0c0      	b.n	800bb76 <_printf_i+0x1a6>
 800b9f4:	2a58      	cmp	r2, #88	; 0x58
 800b9f6:	d052      	beq.n	800ba9e <_printf_i+0xce>
 800b9f8:	0026      	movs	r6, r4
 800b9fa:	3642      	adds	r6, #66	; 0x42
 800b9fc:	7032      	strb	r2, [r6, #0]
 800b9fe:	e022      	b.n	800ba46 <_printf_i+0x76>
 800ba00:	0010      	movs	r0, r2
 800ba02:	3863      	subs	r0, #99	; 0x63
 800ba04:	2815      	cmp	r0, #21
 800ba06:	d8f7      	bhi.n	800b9f8 <_printf_i+0x28>
 800ba08:	f7f4 fb9a 	bl	8000140 <__gnu_thumb1_case_shi>
 800ba0c:	001f0016 	.word	0x001f0016
 800ba10:	fff6fff6 	.word	0xfff6fff6
 800ba14:	fff6fff6 	.word	0xfff6fff6
 800ba18:	fff6001f 	.word	0xfff6001f
 800ba1c:	fff6fff6 	.word	0xfff6fff6
 800ba20:	00a8fff6 	.word	0x00a8fff6
 800ba24:	009a0036 	.word	0x009a0036
 800ba28:	fff6fff6 	.word	0xfff6fff6
 800ba2c:	fff600b9 	.word	0xfff600b9
 800ba30:	fff60036 	.word	0xfff60036
 800ba34:	009efff6 	.word	0x009efff6
 800ba38:	0026      	movs	r6, r4
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	3642      	adds	r6, #66	; 0x42
 800ba3e:	1d11      	adds	r1, r2, #4
 800ba40:	6019      	str	r1, [r3, #0]
 800ba42:	6813      	ldr	r3, [r2, #0]
 800ba44:	7033      	strb	r3, [r6, #0]
 800ba46:	2301      	movs	r3, #1
 800ba48:	e0a7      	b.n	800bb9a <_printf_i+0x1ca>
 800ba4a:	6808      	ldr	r0, [r1, #0]
 800ba4c:	6819      	ldr	r1, [r3, #0]
 800ba4e:	1d0a      	adds	r2, r1, #4
 800ba50:	0605      	lsls	r5, r0, #24
 800ba52:	d50b      	bpl.n	800ba6c <_printf_i+0x9c>
 800ba54:	680d      	ldr	r5, [r1, #0]
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	da03      	bge.n	800ba64 <_printf_i+0x94>
 800ba5c:	232d      	movs	r3, #45	; 0x2d
 800ba5e:	9a04      	ldr	r2, [sp, #16]
 800ba60:	426d      	negs	r5, r5
 800ba62:	7013      	strb	r3, [r2, #0]
 800ba64:	4b61      	ldr	r3, [pc, #388]	; (800bbec <_printf_i+0x21c>)
 800ba66:	270a      	movs	r7, #10
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	e032      	b.n	800bad2 <_printf_i+0x102>
 800ba6c:	680d      	ldr	r5, [r1, #0]
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	0641      	lsls	r1, r0, #25
 800ba72:	d5f1      	bpl.n	800ba58 <_printf_i+0x88>
 800ba74:	b22d      	sxth	r5, r5
 800ba76:	e7ef      	b.n	800ba58 <_printf_i+0x88>
 800ba78:	680d      	ldr	r5, [r1, #0]
 800ba7a:	6819      	ldr	r1, [r3, #0]
 800ba7c:	1d08      	adds	r0, r1, #4
 800ba7e:	6018      	str	r0, [r3, #0]
 800ba80:	062e      	lsls	r6, r5, #24
 800ba82:	d501      	bpl.n	800ba88 <_printf_i+0xb8>
 800ba84:	680d      	ldr	r5, [r1, #0]
 800ba86:	e003      	b.n	800ba90 <_printf_i+0xc0>
 800ba88:	066d      	lsls	r5, r5, #25
 800ba8a:	d5fb      	bpl.n	800ba84 <_printf_i+0xb4>
 800ba8c:	680d      	ldr	r5, [r1, #0]
 800ba8e:	b2ad      	uxth	r5, r5
 800ba90:	4b56      	ldr	r3, [pc, #344]	; (800bbec <_printf_i+0x21c>)
 800ba92:	270a      	movs	r7, #10
 800ba94:	9303      	str	r3, [sp, #12]
 800ba96:	2a6f      	cmp	r2, #111	; 0x6f
 800ba98:	d117      	bne.n	800baca <_printf_i+0xfa>
 800ba9a:	2708      	movs	r7, #8
 800ba9c:	e015      	b.n	800baca <_printf_i+0xfa>
 800ba9e:	3145      	adds	r1, #69	; 0x45
 800baa0:	700a      	strb	r2, [r1, #0]
 800baa2:	4a52      	ldr	r2, [pc, #328]	; (800bbec <_printf_i+0x21c>)
 800baa4:	9203      	str	r2, [sp, #12]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	6821      	ldr	r1, [r4, #0]
 800baaa:	ca20      	ldmia	r2!, {r5}
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	0608      	lsls	r0, r1, #24
 800bab0:	d550      	bpl.n	800bb54 <_printf_i+0x184>
 800bab2:	07cb      	lsls	r3, r1, #31
 800bab4:	d502      	bpl.n	800babc <_printf_i+0xec>
 800bab6:	2320      	movs	r3, #32
 800bab8:	4319      	orrs	r1, r3
 800baba:	6021      	str	r1, [r4, #0]
 800babc:	2710      	movs	r7, #16
 800babe:	2d00      	cmp	r5, #0
 800bac0:	d103      	bne.n	800baca <_printf_i+0xfa>
 800bac2:	2320      	movs	r3, #32
 800bac4:	6822      	ldr	r2, [r4, #0]
 800bac6:	439a      	bics	r2, r3
 800bac8:	6022      	str	r2, [r4, #0]
 800baca:	0023      	movs	r3, r4
 800bacc:	2200      	movs	r2, #0
 800bace:	3343      	adds	r3, #67	; 0x43
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	6863      	ldr	r3, [r4, #4]
 800bad4:	60a3      	str	r3, [r4, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	db03      	blt.n	800bae2 <_printf_i+0x112>
 800bada:	2204      	movs	r2, #4
 800badc:	6821      	ldr	r1, [r4, #0]
 800bade:	4391      	bics	r1, r2
 800bae0:	6021      	str	r1, [r4, #0]
 800bae2:	2d00      	cmp	r5, #0
 800bae4:	d102      	bne.n	800baec <_printf_i+0x11c>
 800bae6:	9e04      	ldr	r6, [sp, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00c      	beq.n	800bb06 <_printf_i+0x136>
 800baec:	9e04      	ldr	r6, [sp, #16]
 800baee:	0028      	movs	r0, r5
 800baf0:	0039      	movs	r1, r7
 800baf2:	f7f4 fbb5 	bl	8000260 <__aeabi_uidivmod>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	3e01      	subs	r6, #1
 800bafa:	5c5b      	ldrb	r3, [r3, r1]
 800bafc:	7033      	strb	r3, [r6, #0]
 800bafe:	002b      	movs	r3, r5
 800bb00:	0005      	movs	r5, r0
 800bb02:	429f      	cmp	r7, r3
 800bb04:	d9f3      	bls.n	800baee <_printf_i+0x11e>
 800bb06:	2f08      	cmp	r7, #8
 800bb08:	d109      	bne.n	800bb1e <_printf_i+0x14e>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	07db      	lsls	r3, r3, #31
 800bb0e:	d506      	bpl.n	800bb1e <_printf_i+0x14e>
 800bb10:	6863      	ldr	r3, [r4, #4]
 800bb12:	6922      	ldr	r2, [r4, #16]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	dc02      	bgt.n	800bb1e <_printf_i+0x14e>
 800bb18:	2330      	movs	r3, #48	; 0x30
 800bb1a:	3e01      	subs	r6, #1
 800bb1c:	7033      	strb	r3, [r6, #0]
 800bb1e:	9b04      	ldr	r3, [sp, #16]
 800bb20:	1b9b      	subs	r3, r3, r6
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	9b07      	ldr	r3, [sp, #28]
 800bb26:	0021      	movs	r1, r4
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	9805      	ldr	r0, [sp, #20]
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	aa09      	add	r2, sp, #36	; 0x24
 800bb30:	f7ff fede 	bl	800b8f0 <_printf_common>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d135      	bne.n	800bba4 <_printf_i+0x1d4>
 800bb38:	2001      	movs	r0, #1
 800bb3a:	4240      	negs	r0, r0
 800bb3c:	b00b      	add	sp, #44	; 0x2c
 800bb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb40:	2220      	movs	r2, #32
 800bb42:	6809      	ldr	r1, [r1, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	0022      	movs	r2, r4
 800bb4a:	2178      	movs	r1, #120	; 0x78
 800bb4c:	3245      	adds	r2, #69	; 0x45
 800bb4e:	7011      	strb	r1, [r2, #0]
 800bb50:	4a27      	ldr	r2, [pc, #156]	; (800bbf0 <_printf_i+0x220>)
 800bb52:	e7a7      	b.n	800baa4 <_printf_i+0xd4>
 800bb54:	0648      	lsls	r0, r1, #25
 800bb56:	d5ac      	bpl.n	800bab2 <_printf_i+0xe2>
 800bb58:	b2ad      	uxth	r5, r5
 800bb5a:	e7aa      	b.n	800bab2 <_printf_i+0xe2>
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	680d      	ldr	r5, [r1, #0]
 800bb60:	1d10      	adds	r0, r2, #4
 800bb62:	6949      	ldr	r1, [r1, #20]
 800bb64:	6018      	str	r0, [r3, #0]
 800bb66:	6813      	ldr	r3, [r2, #0]
 800bb68:	062e      	lsls	r6, r5, #24
 800bb6a:	d501      	bpl.n	800bb70 <_printf_i+0x1a0>
 800bb6c:	6019      	str	r1, [r3, #0]
 800bb6e:	e002      	b.n	800bb76 <_printf_i+0x1a6>
 800bb70:	066d      	lsls	r5, r5, #25
 800bb72:	d5fb      	bpl.n	800bb6c <_printf_i+0x19c>
 800bb74:	8019      	strh	r1, [r3, #0]
 800bb76:	2300      	movs	r3, #0
 800bb78:	9e04      	ldr	r6, [sp, #16]
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	e7d2      	b.n	800bb24 <_printf_i+0x154>
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	1d11      	adds	r1, r2, #4
 800bb82:	6019      	str	r1, [r3, #0]
 800bb84:	6816      	ldr	r6, [r2, #0]
 800bb86:	2100      	movs	r1, #0
 800bb88:	0030      	movs	r0, r6
 800bb8a:	6862      	ldr	r2, [r4, #4]
 800bb8c:	f000 fb6e 	bl	800c26c <memchr>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d001      	beq.n	800bb98 <_printf_i+0x1c8>
 800bb94:	1b80      	subs	r0, r0, r6
 800bb96:	6060      	str	r0, [r4, #4]
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9a04      	ldr	r2, [sp, #16]
 800bba0:	7013      	strb	r3, [r2, #0]
 800bba2:	e7bf      	b.n	800bb24 <_printf_i+0x154>
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	0032      	movs	r2, r6
 800bba8:	9906      	ldr	r1, [sp, #24]
 800bbaa:	9805      	ldr	r0, [sp, #20]
 800bbac:	9d07      	ldr	r5, [sp, #28]
 800bbae:	47a8      	blx	r5
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d0c1      	beq.n	800bb38 <_printf_i+0x168>
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	079b      	lsls	r3, r3, #30
 800bbb8:	d415      	bmi.n	800bbe6 <_printf_i+0x216>
 800bbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbc:	68e0      	ldr	r0, [r4, #12]
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	dabc      	bge.n	800bb3c <_printf_i+0x16c>
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	e7ba      	b.n	800bb3c <_printf_i+0x16c>
 800bbc6:	0022      	movs	r2, r4
 800bbc8:	2301      	movs	r3, #1
 800bbca:	9906      	ldr	r1, [sp, #24]
 800bbcc:	9805      	ldr	r0, [sp, #20]
 800bbce:	9e07      	ldr	r6, [sp, #28]
 800bbd0:	3219      	adds	r2, #25
 800bbd2:	47b0      	blx	r6
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d0af      	beq.n	800bb38 <_printf_i+0x168>
 800bbd8:	3501      	adds	r5, #1
 800bbda:	68e3      	ldr	r3, [r4, #12]
 800bbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	42ab      	cmp	r3, r5
 800bbe2:	dcf0      	bgt.n	800bbc6 <_printf_i+0x1f6>
 800bbe4:	e7e9      	b.n	800bbba <_printf_i+0x1ea>
 800bbe6:	2500      	movs	r5, #0
 800bbe8:	e7f7      	b.n	800bbda <_printf_i+0x20a>
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	0800d585 	.word	0x0800d585
 800bbf0:	0800d596 	.word	0x0800d596

0800bbf4 <_read_r>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	0004      	movs	r4, r0
 800bbf8:	0008      	movs	r0, r1
 800bbfa:	0011      	movs	r1, r2
 800bbfc:	001a      	movs	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4d05      	ldr	r5, [pc, #20]	; (800bc18 <_read_r+0x24>)
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	f7f9 fe08 	bl	8005818 <_read>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d103      	bne.n	800bc14 <_read_r+0x20>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d000      	beq.n	800bc14 <_read_r+0x20>
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	20000448 	.word	0x20000448

0800bc1c <nan>:
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4901      	ldr	r1, [pc, #4]	; (800bc24 <nan+0x8>)
 800bc20:	4770      	bx	lr
 800bc22:	46c0      	nop			; (mov r8, r8)
 800bc24:	7ff80000 	.word	0x7ff80000

0800bc28 <__swbuf_r>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	0005      	movs	r5, r0
 800bc2c:	000e      	movs	r6, r1
 800bc2e:	0014      	movs	r4, r2
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d004      	beq.n	800bc3e <__swbuf_r+0x16>
 800bc34:	6983      	ldr	r3, [r0, #24]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <__swbuf_r+0x16>
 800bc3a:	f000 fa07 	bl	800c04c <__sinit>
 800bc3e:	4b22      	ldr	r3, [pc, #136]	; (800bcc8 <__swbuf_r+0xa0>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d12e      	bne.n	800bca2 <__swbuf_r+0x7a>
 800bc44:	686c      	ldr	r4, [r5, #4]
 800bc46:	69a3      	ldr	r3, [r4, #24]
 800bc48:	60a3      	str	r3, [r4, #8]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	071b      	lsls	r3, r3, #28
 800bc4e:	d532      	bpl.n	800bcb6 <__swbuf_r+0x8e>
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d02f      	beq.n	800bcb6 <__swbuf_r+0x8e>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	6922      	ldr	r2, [r4, #16]
 800bc5a:	b2f7      	uxtb	r7, r6
 800bc5c:	1a98      	subs	r0, r3, r2
 800bc5e:	6963      	ldr	r3, [r4, #20]
 800bc60:	b2f6      	uxtb	r6, r6
 800bc62:	4283      	cmp	r3, r0
 800bc64:	dc05      	bgt.n	800bc72 <__swbuf_r+0x4a>
 800bc66:	0021      	movs	r1, r4
 800bc68:	0028      	movs	r0, r5
 800bc6a:	f000 f94d 	bl	800bf08 <_fflush_r>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d127      	bne.n	800bcc2 <__swbuf_r+0x9a>
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	3001      	adds	r0, #1
 800bc76:	3b01      	subs	r3, #1
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	6022      	str	r2, [r4, #0]
 800bc80:	701f      	strb	r7, [r3, #0]
 800bc82:	6963      	ldr	r3, [r4, #20]
 800bc84:	4283      	cmp	r3, r0
 800bc86:	d004      	beq.n	800bc92 <__swbuf_r+0x6a>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	07db      	lsls	r3, r3, #31
 800bc8c:	d507      	bpl.n	800bc9e <__swbuf_r+0x76>
 800bc8e:	2e0a      	cmp	r6, #10
 800bc90:	d105      	bne.n	800bc9e <__swbuf_r+0x76>
 800bc92:	0021      	movs	r1, r4
 800bc94:	0028      	movs	r0, r5
 800bc96:	f000 f937 	bl	800bf08 <_fflush_r>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d111      	bne.n	800bcc2 <__swbuf_r+0x9a>
 800bc9e:	0030      	movs	r0, r6
 800bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca2:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <__swbuf_r+0xa4>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d101      	bne.n	800bcac <__swbuf_r+0x84>
 800bca8:	68ac      	ldr	r4, [r5, #8]
 800bcaa:	e7cc      	b.n	800bc46 <__swbuf_r+0x1e>
 800bcac:	4b08      	ldr	r3, [pc, #32]	; (800bcd0 <__swbuf_r+0xa8>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d1c9      	bne.n	800bc46 <__swbuf_r+0x1e>
 800bcb2:	68ec      	ldr	r4, [r5, #12]
 800bcb4:	e7c7      	b.n	800bc46 <__swbuf_r+0x1e>
 800bcb6:	0021      	movs	r1, r4
 800bcb8:	0028      	movs	r0, r5
 800bcba:	f000 f819 	bl	800bcf0 <__swsetup_r>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d0c9      	beq.n	800bc56 <__swbuf_r+0x2e>
 800bcc2:	2601      	movs	r6, #1
 800bcc4:	4276      	negs	r6, r6
 800bcc6:	e7ea      	b.n	800bc9e <__swbuf_r+0x76>
 800bcc8:	0800d5c8 	.word	0x0800d5c8
 800bccc:	0800d5e8 	.word	0x0800d5e8
 800bcd0:	0800d5a8 	.word	0x0800d5a8

0800bcd4 <__ascii_wctomb>:
 800bcd4:	0003      	movs	r3, r0
 800bcd6:	1e08      	subs	r0, r1, #0
 800bcd8:	d005      	beq.n	800bce6 <__ascii_wctomb+0x12>
 800bcda:	2aff      	cmp	r2, #255	; 0xff
 800bcdc:	d904      	bls.n	800bce8 <__ascii_wctomb+0x14>
 800bcde:	228a      	movs	r2, #138	; 0x8a
 800bce0:	2001      	movs	r0, #1
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	4240      	negs	r0, r0
 800bce6:	4770      	bx	lr
 800bce8:	2001      	movs	r0, #1
 800bcea:	700a      	strb	r2, [r1, #0]
 800bcec:	e7fb      	b.n	800bce6 <__ascii_wctomb+0x12>
	...

0800bcf0 <__swsetup_r>:
 800bcf0:	4b37      	ldr	r3, [pc, #220]	; (800bdd0 <__swsetup_r+0xe0>)
 800bcf2:	b570      	push	{r4, r5, r6, lr}
 800bcf4:	681d      	ldr	r5, [r3, #0]
 800bcf6:	0006      	movs	r6, r0
 800bcf8:	000c      	movs	r4, r1
 800bcfa:	2d00      	cmp	r5, #0
 800bcfc:	d005      	beq.n	800bd0a <__swsetup_r+0x1a>
 800bcfe:	69ab      	ldr	r3, [r5, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <__swsetup_r+0x1a>
 800bd04:	0028      	movs	r0, r5
 800bd06:	f000 f9a1 	bl	800c04c <__sinit>
 800bd0a:	4b32      	ldr	r3, [pc, #200]	; (800bdd4 <__swsetup_r+0xe4>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	d10f      	bne.n	800bd30 <__swsetup_r+0x40>
 800bd10:	686c      	ldr	r4, [r5, #4]
 800bd12:	230c      	movs	r3, #12
 800bd14:	5ee2      	ldrsh	r2, [r4, r3]
 800bd16:	b293      	uxth	r3, r2
 800bd18:	0711      	lsls	r1, r2, #28
 800bd1a:	d42d      	bmi.n	800bd78 <__swsetup_r+0x88>
 800bd1c:	06d9      	lsls	r1, r3, #27
 800bd1e:	d411      	bmi.n	800bd44 <__swsetup_r+0x54>
 800bd20:	2309      	movs	r3, #9
 800bd22:	2001      	movs	r0, #1
 800bd24:	6033      	str	r3, [r6, #0]
 800bd26:	3337      	adds	r3, #55	; 0x37
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	4240      	negs	r0, r0
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <__swsetup_r+0xe8>)
 800bd32:	429c      	cmp	r4, r3
 800bd34:	d101      	bne.n	800bd3a <__swsetup_r+0x4a>
 800bd36:	68ac      	ldr	r4, [r5, #8]
 800bd38:	e7eb      	b.n	800bd12 <__swsetup_r+0x22>
 800bd3a:	4b28      	ldr	r3, [pc, #160]	; (800bddc <__swsetup_r+0xec>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	d1e8      	bne.n	800bd12 <__swsetup_r+0x22>
 800bd40:	68ec      	ldr	r4, [r5, #12]
 800bd42:	e7e6      	b.n	800bd12 <__swsetup_r+0x22>
 800bd44:	075b      	lsls	r3, r3, #29
 800bd46:	d513      	bpl.n	800bd70 <__swsetup_r+0x80>
 800bd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd4a:	2900      	cmp	r1, #0
 800bd4c:	d008      	beq.n	800bd60 <__swsetup_r+0x70>
 800bd4e:	0023      	movs	r3, r4
 800bd50:	3344      	adds	r3, #68	; 0x44
 800bd52:	4299      	cmp	r1, r3
 800bd54:	d002      	beq.n	800bd5c <__swsetup_r+0x6c>
 800bd56:	0030      	movs	r0, r6
 800bd58:	f7fd f9ea 	bl	8009130 <_free_r>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	6363      	str	r3, [r4, #52]	; 0x34
 800bd60:	2224      	movs	r2, #36	; 0x24
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	4393      	bics	r3, r2
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	6063      	str	r3, [r4, #4]
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	6023      	str	r3, [r4, #0]
 800bd70:	2308      	movs	r3, #8
 800bd72:	89a2      	ldrh	r2, [r4, #12]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10b      	bne.n	800bd96 <__swsetup_r+0xa6>
 800bd7e:	21a0      	movs	r1, #160	; 0xa0
 800bd80:	2280      	movs	r2, #128	; 0x80
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	0089      	lsls	r1, r1, #2
 800bd86:	0092      	lsls	r2, r2, #2
 800bd88:	400b      	ands	r3, r1
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d003      	beq.n	800bd96 <__swsetup_r+0xa6>
 800bd8e:	0021      	movs	r1, r4
 800bd90:	0030      	movs	r0, r6
 800bd92:	f000 fa27 	bl	800c1e4 <__smakebuf_r>
 800bd96:	220c      	movs	r2, #12
 800bd98:	5ea3      	ldrsh	r3, [r4, r2]
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	001a      	movs	r2, r3
 800bd9e:	b299      	uxth	r1, r3
 800bda0:	4002      	ands	r2, r0
 800bda2:	4203      	tst	r3, r0
 800bda4:	d00f      	beq.n	800bdc6 <__swsetup_r+0xd6>
 800bda6:	2200      	movs	r2, #0
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	6962      	ldr	r2, [r4, #20]
 800bdac:	4252      	negs	r2, r2
 800bdae:	61a2      	str	r2, [r4, #24]
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	6922      	ldr	r2, [r4, #16]
 800bdb4:	4282      	cmp	r2, r0
 800bdb6:	d1ba      	bne.n	800bd2e <__swsetup_r+0x3e>
 800bdb8:	060a      	lsls	r2, r1, #24
 800bdba:	d5b8      	bpl.n	800bd2e <__swsetup_r+0x3e>
 800bdbc:	2240      	movs	r2, #64	; 0x40
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	3801      	subs	r0, #1
 800bdc4:	e7b3      	b.n	800bd2e <__swsetup_r+0x3e>
 800bdc6:	0788      	lsls	r0, r1, #30
 800bdc8:	d400      	bmi.n	800bdcc <__swsetup_r+0xdc>
 800bdca:	6962      	ldr	r2, [r4, #20]
 800bdcc:	60a2      	str	r2, [r4, #8]
 800bdce:	e7ef      	b.n	800bdb0 <__swsetup_r+0xc0>
 800bdd0:	20000028 	.word	0x20000028
 800bdd4:	0800d5c8 	.word	0x0800d5c8
 800bdd8:	0800d5e8 	.word	0x0800d5e8
 800bddc:	0800d5a8 	.word	0x0800d5a8

0800bde0 <abort>:
 800bde0:	2006      	movs	r0, #6
 800bde2:	b510      	push	{r4, lr}
 800bde4:	f000 fa92 	bl	800c30c <raise>
 800bde8:	2001      	movs	r0, #1
 800bdea:	f7f9 fd09 	bl	8005800 <_exit>
	...

0800bdf0 <__sflush_r>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	898b      	ldrh	r3, [r1, #12]
 800bdf4:	0005      	movs	r5, r0
 800bdf6:	000c      	movs	r4, r1
 800bdf8:	071a      	lsls	r2, r3, #28
 800bdfa:	d45f      	bmi.n	800bebc <__sflush_r+0xcc>
 800bdfc:	684a      	ldr	r2, [r1, #4]
 800bdfe:	2a00      	cmp	r2, #0
 800be00:	dc04      	bgt.n	800be0c <__sflush_r+0x1c>
 800be02:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800be04:	2a00      	cmp	r2, #0
 800be06:	dc01      	bgt.n	800be0c <__sflush_r+0x1c>
 800be08:	2000      	movs	r0, #0
 800be0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800be0e:	2f00      	cmp	r7, #0
 800be10:	d0fa      	beq.n	800be08 <__sflush_r+0x18>
 800be12:	2200      	movs	r2, #0
 800be14:	2180      	movs	r1, #128	; 0x80
 800be16:	682e      	ldr	r6, [r5, #0]
 800be18:	602a      	str	r2, [r5, #0]
 800be1a:	001a      	movs	r2, r3
 800be1c:	0149      	lsls	r1, r1, #5
 800be1e:	400a      	ands	r2, r1
 800be20:	420b      	tst	r3, r1
 800be22:	d034      	beq.n	800be8e <__sflush_r+0x9e>
 800be24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	075b      	lsls	r3, r3, #29
 800be2a:	d506      	bpl.n	800be3a <__sflush_r+0x4a>
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	1ac0      	subs	r0, r0, r3
 800be30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <__sflush_r+0x4a>
 800be36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be38:	1ac0      	subs	r0, r0, r3
 800be3a:	0002      	movs	r2, r0
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	2300      	movs	r3, #0
 800be40:	0028      	movs	r0, r5
 800be42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800be44:	47b8      	blx	r7
 800be46:	89a1      	ldrh	r1, [r4, #12]
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d106      	bne.n	800be5a <__sflush_r+0x6a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	2b1d      	cmp	r3, #29
 800be50:	d831      	bhi.n	800beb6 <__sflush_r+0xc6>
 800be52:	4a2c      	ldr	r2, [pc, #176]	; (800bf04 <__sflush_r+0x114>)
 800be54:	40da      	lsrs	r2, r3
 800be56:	07d3      	lsls	r3, r2, #31
 800be58:	d52d      	bpl.n	800beb6 <__sflush_r+0xc6>
 800be5a:	2300      	movs	r3, #0
 800be5c:	6063      	str	r3, [r4, #4]
 800be5e:	6923      	ldr	r3, [r4, #16]
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	04cb      	lsls	r3, r1, #19
 800be64:	d505      	bpl.n	800be72 <__sflush_r+0x82>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d102      	bne.n	800be70 <__sflush_r+0x80>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d100      	bne.n	800be72 <__sflush_r+0x82>
 800be70:	6560      	str	r0, [r4, #84]	; 0x54
 800be72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be74:	602e      	str	r6, [r5, #0]
 800be76:	2900      	cmp	r1, #0
 800be78:	d0c6      	beq.n	800be08 <__sflush_r+0x18>
 800be7a:	0023      	movs	r3, r4
 800be7c:	3344      	adds	r3, #68	; 0x44
 800be7e:	4299      	cmp	r1, r3
 800be80:	d002      	beq.n	800be88 <__sflush_r+0x98>
 800be82:	0028      	movs	r0, r5
 800be84:	f7fd f954 	bl	8009130 <_free_r>
 800be88:	2000      	movs	r0, #0
 800be8a:	6360      	str	r0, [r4, #52]	; 0x34
 800be8c:	e7bd      	b.n	800be0a <__sflush_r+0x1a>
 800be8e:	2301      	movs	r3, #1
 800be90:	0028      	movs	r0, r5
 800be92:	6a21      	ldr	r1, [r4, #32]
 800be94:	47b8      	blx	r7
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d1c5      	bne.n	800be26 <__sflush_r+0x36>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0c2      	beq.n	800be26 <__sflush_r+0x36>
 800bea0:	2b1d      	cmp	r3, #29
 800bea2:	d001      	beq.n	800bea8 <__sflush_r+0xb8>
 800bea4:	2b16      	cmp	r3, #22
 800bea6:	d101      	bne.n	800beac <__sflush_r+0xbc>
 800bea8:	602e      	str	r6, [r5, #0]
 800beaa:	e7ad      	b.n	800be08 <__sflush_r+0x18>
 800beac:	2340      	movs	r3, #64	; 0x40
 800beae:	89a2      	ldrh	r2, [r4, #12]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	81a3      	strh	r3, [r4, #12]
 800beb4:	e7a9      	b.n	800be0a <__sflush_r+0x1a>
 800beb6:	2340      	movs	r3, #64	; 0x40
 800beb8:	430b      	orrs	r3, r1
 800beba:	e7fa      	b.n	800beb2 <__sflush_r+0xc2>
 800bebc:	690f      	ldr	r7, [r1, #16]
 800bebe:	2f00      	cmp	r7, #0
 800bec0:	d0a2      	beq.n	800be08 <__sflush_r+0x18>
 800bec2:	680a      	ldr	r2, [r1, #0]
 800bec4:	600f      	str	r7, [r1, #0]
 800bec6:	1bd2      	subs	r2, r2, r7
 800bec8:	9201      	str	r2, [sp, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	079b      	lsls	r3, r3, #30
 800bece:	d100      	bne.n	800bed2 <__sflush_r+0xe2>
 800bed0:	694a      	ldr	r2, [r1, #20]
 800bed2:	60a2      	str	r2, [r4, #8]
 800bed4:	9b01      	ldr	r3, [sp, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dc00      	bgt.n	800bedc <__sflush_r+0xec>
 800beda:	e795      	b.n	800be08 <__sflush_r+0x18>
 800bedc:	003a      	movs	r2, r7
 800bede:	0028      	movs	r0, r5
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	6a21      	ldr	r1, [r4, #32]
 800bee4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bee6:	47b0      	blx	r6
 800bee8:	2800      	cmp	r0, #0
 800beea:	dc06      	bgt.n	800befa <__sflush_r+0x10a>
 800beec:	2340      	movs	r3, #64	; 0x40
 800beee:	2001      	movs	r0, #1
 800bef0:	89a2      	ldrh	r2, [r4, #12]
 800bef2:	4240      	negs	r0, r0
 800bef4:	4313      	orrs	r3, r2
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	e787      	b.n	800be0a <__sflush_r+0x1a>
 800befa:	9b01      	ldr	r3, [sp, #4]
 800befc:	183f      	adds	r7, r7, r0
 800befe:	1a1b      	subs	r3, r3, r0
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	e7e7      	b.n	800bed4 <__sflush_r+0xe4>
 800bf04:	20400001 	.word	0x20400001

0800bf08 <_fflush_r>:
 800bf08:	690b      	ldr	r3, [r1, #16]
 800bf0a:	b570      	push	{r4, r5, r6, lr}
 800bf0c:	0005      	movs	r5, r0
 800bf0e:	000c      	movs	r4, r1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d102      	bne.n	800bf1a <_fflush_r+0x12>
 800bf14:	2500      	movs	r5, #0
 800bf16:	0028      	movs	r0, r5
 800bf18:	bd70      	pop	{r4, r5, r6, pc}
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d004      	beq.n	800bf28 <_fflush_r+0x20>
 800bf1e:	6983      	ldr	r3, [r0, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <_fflush_r+0x20>
 800bf24:	f000 f892 	bl	800c04c <__sinit>
 800bf28:	4b14      	ldr	r3, [pc, #80]	; (800bf7c <_fflush_r+0x74>)
 800bf2a:	429c      	cmp	r4, r3
 800bf2c:	d11b      	bne.n	800bf66 <_fflush_r+0x5e>
 800bf2e:	686c      	ldr	r4, [r5, #4]
 800bf30:	220c      	movs	r2, #12
 800bf32:	5ea3      	ldrsh	r3, [r4, r2]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0ed      	beq.n	800bf14 <_fflush_r+0xc>
 800bf38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf3a:	07d2      	lsls	r2, r2, #31
 800bf3c:	d404      	bmi.n	800bf48 <_fflush_r+0x40>
 800bf3e:	059b      	lsls	r3, r3, #22
 800bf40:	d402      	bmi.n	800bf48 <_fflush_r+0x40>
 800bf42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf44:	f000 f923 	bl	800c18e <__retarget_lock_acquire_recursive>
 800bf48:	0028      	movs	r0, r5
 800bf4a:	0021      	movs	r1, r4
 800bf4c:	f7ff ff50 	bl	800bdf0 <__sflush_r>
 800bf50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf52:	0005      	movs	r5, r0
 800bf54:	07db      	lsls	r3, r3, #31
 800bf56:	d4de      	bmi.n	800bf16 <_fflush_r+0xe>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	059b      	lsls	r3, r3, #22
 800bf5c:	d4db      	bmi.n	800bf16 <_fflush_r+0xe>
 800bf5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf60:	f000 f916 	bl	800c190 <__retarget_lock_release_recursive>
 800bf64:	e7d7      	b.n	800bf16 <_fflush_r+0xe>
 800bf66:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <_fflush_r+0x78>)
 800bf68:	429c      	cmp	r4, r3
 800bf6a:	d101      	bne.n	800bf70 <_fflush_r+0x68>
 800bf6c:	68ac      	ldr	r4, [r5, #8]
 800bf6e:	e7df      	b.n	800bf30 <_fflush_r+0x28>
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <_fflush_r+0x7c>)
 800bf72:	429c      	cmp	r4, r3
 800bf74:	d1dc      	bne.n	800bf30 <_fflush_r+0x28>
 800bf76:	68ec      	ldr	r4, [r5, #12]
 800bf78:	e7da      	b.n	800bf30 <_fflush_r+0x28>
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	0800d5c8 	.word	0x0800d5c8
 800bf80:	0800d5e8 	.word	0x0800d5e8
 800bf84:	0800d5a8 	.word	0x0800d5a8

0800bf88 <std>:
 800bf88:	2300      	movs	r3, #0
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	0004      	movs	r4, r0
 800bf8e:	6003      	str	r3, [r0, #0]
 800bf90:	6043      	str	r3, [r0, #4]
 800bf92:	6083      	str	r3, [r0, #8]
 800bf94:	8181      	strh	r1, [r0, #12]
 800bf96:	6643      	str	r3, [r0, #100]	; 0x64
 800bf98:	0019      	movs	r1, r3
 800bf9a:	81c2      	strh	r2, [r0, #14]
 800bf9c:	6103      	str	r3, [r0, #16]
 800bf9e:	6143      	str	r3, [r0, #20]
 800bfa0:	6183      	str	r3, [r0, #24]
 800bfa2:	2208      	movs	r2, #8
 800bfa4:	305c      	adds	r0, #92	; 0x5c
 800bfa6:	f7fd f8ba 	bl	800911e <memset>
 800bfaa:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <std+0x38>)
 800bfac:	6263      	str	r3, [r4, #36]	; 0x24
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <std+0x3c>)
 800bfb0:	6224      	str	r4, [r4, #32]
 800bfb2:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <std+0x40>)
 800bfb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfb8:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <std+0x44>)
 800bfba:	6323      	str	r3, [r4, #48]	; 0x30
 800bfbc:	bd10      	pop	{r4, pc}
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	080093fd 	.word	0x080093fd
 800bfc4:	08009425 	.word	0x08009425
 800bfc8:	0800945d 	.word	0x0800945d
 800bfcc:	08009489 	.word	0x08009489

0800bfd0 <_cleanup_r>:
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	4902      	ldr	r1, [pc, #8]	; (800bfdc <_cleanup_r+0xc>)
 800bfd4:	f000 f8ba 	bl	800c14c <_fwalk_reent>
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	0800bf09 	.word	0x0800bf09

0800bfe0 <__sfmoreglue>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	2568      	movs	r5, #104	; 0x68
 800bfe4:	1e4a      	subs	r2, r1, #1
 800bfe6:	4355      	muls	r5, r2
 800bfe8:	000e      	movs	r6, r1
 800bfea:	0029      	movs	r1, r5
 800bfec:	3174      	adds	r1, #116	; 0x74
 800bfee:	f7fd f8e9 	bl	80091c4 <_malloc_r>
 800bff2:	1e04      	subs	r4, r0, #0
 800bff4:	d008      	beq.n	800c008 <__sfmoreglue+0x28>
 800bff6:	2100      	movs	r1, #0
 800bff8:	002a      	movs	r2, r5
 800bffa:	6001      	str	r1, [r0, #0]
 800bffc:	6046      	str	r6, [r0, #4]
 800bffe:	300c      	adds	r0, #12
 800c000:	60a0      	str	r0, [r4, #8]
 800c002:	3268      	adds	r2, #104	; 0x68
 800c004:	f7fd f88b 	bl	800911e <memset>
 800c008:	0020      	movs	r0, r4
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <__sfp_lock_acquire>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	4802      	ldr	r0, [pc, #8]	; (800c018 <__sfp_lock_acquire+0xc>)
 800c010:	f000 f8bd 	bl	800c18e <__retarget_lock_acquire_recursive>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	20000454 	.word	0x20000454

0800c01c <__sfp_lock_release>:
 800c01c:	b510      	push	{r4, lr}
 800c01e:	4802      	ldr	r0, [pc, #8]	; (800c028 <__sfp_lock_release+0xc>)
 800c020:	f000 f8b6 	bl	800c190 <__retarget_lock_release_recursive>
 800c024:	bd10      	pop	{r4, pc}
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	20000454 	.word	0x20000454

0800c02c <__sinit_lock_acquire>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	4802      	ldr	r0, [pc, #8]	; (800c038 <__sinit_lock_acquire+0xc>)
 800c030:	f000 f8ad 	bl	800c18e <__retarget_lock_acquire_recursive>
 800c034:	bd10      	pop	{r4, pc}
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	2000044f 	.word	0x2000044f

0800c03c <__sinit_lock_release>:
 800c03c:	b510      	push	{r4, lr}
 800c03e:	4802      	ldr	r0, [pc, #8]	; (800c048 <__sinit_lock_release+0xc>)
 800c040:	f000 f8a6 	bl	800c190 <__retarget_lock_release_recursive>
 800c044:	bd10      	pop	{r4, pc}
 800c046:	46c0      	nop			; (mov r8, r8)
 800c048:	2000044f 	.word	0x2000044f

0800c04c <__sinit>:
 800c04c:	b513      	push	{r0, r1, r4, lr}
 800c04e:	0004      	movs	r4, r0
 800c050:	f7ff ffec 	bl	800c02c <__sinit_lock_acquire>
 800c054:	69a3      	ldr	r3, [r4, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <__sinit+0x14>
 800c05a:	f7ff ffef 	bl	800c03c <__sinit_lock_release>
 800c05e:	bd13      	pop	{r0, r1, r4, pc}
 800c060:	64a3      	str	r3, [r4, #72]	; 0x48
 800c062:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c064:	6523      	str	r3, [r4, #80]	; 0x50
 800c066:	4b13      	ldr	r3, [pc, #76]	; (800c0b4 <__sinit+0x68>)
 800c068:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <__sinit+0x6c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c06e:	9301      	str	r3, [sp, #4]
 800c070:	42a3      	cmp	r3, r4
 800c072:	d101      	bne.n	800c078 <__sinit+0x2c>
 800c074:	2301      	movs	r3, #1
 800c076:	61a3      	str	r3, [r4, #24]
 800c078:	0020      	movs	r0, r4
 800c07a:	f000 f81f 	bl	800c0bc <__sfp>
 800c07e:	6060      	str	r0, [r4, #4]
 800c080:	0020      	movs	r0, r4
 800c082:	f000 f81b 	bl	800c0bc <__sfp>
 800c086:	60a0      	str	r0, [r4, #8]
 800c088:	0020      	movs	r0, r4
 800c08a:	f000 f817 	bl	800c0bc <__sfp>
 800c08e:	2200      	movs	r2, #0
 800c090:	2104      	movs	r1, #4
 800c092:	60e0      	str	r0, [r4, #12]
 800c094:	6860      	ldr	r0, [r4, #4]
 800c096:	f7ff ff77 	bl	800bf88 <std>
 800c09a:	2201      	movs	r2, #1
 800c09c:	2109      	movs	r1, #9
 800c09e:	68a0      	ldr	r0, [r4, #8]
 800c0a0:	f7ff ff72 	bl	800bf88 <std>
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	2112      	movs	r1, #18
 800c0a8:	68e0      	ldr	r0, [r4, #12]
 800c0aa:	f7ff ff6d 	bl	800bf88 <std>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	61a3      	str	r3, [r4, #24]
 800c0b2:	e7d2      	b.n	800c05a <__sinit+0xe>
 800c0b4:	0800d270 	.word	0x0800d270
 800c0b8:	0800bfd1 	.word	0x0800bfd1

0800c0bc <__sfp>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	0007      	movs	r7, r0
 800c0c0:	f7ff ffa4 	bl	800c00c <__sfp_lock_acquire>
 800c0c4:	4b1f      	ldr	r3, [pc, #124]	; (800c144 <__sfp+0x88>)
 800c0c6:	681e      	ldr	r6, [r3, #0]
 800c0c8:	69b3      	ldr	r3, [r6, #24]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <__sfp+0x18>
 800c0ce:	0030      	movs	r0, r6
 800c0d0:	f7ff ffbc 	bl	800c04c <__sinit>
 800c0d4:	3648      	adds	r6, #72	; 0x48
 800c0d6:	68b4      	ldr	r4, [r6, #8]
 800c0d8:	6873      	ldr	r3, [r6, #4]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	d504      	bpl.n	800c0e8 <__sfp+0x2c>
 800c0de:	6833      	ldr	r3, [r6, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d022      	beq.n	800c12a <__sfp+0x6e>
 800c0e4:	6836      	ldr	r6, [r6, #0]
 800c0e6:	e7f6      	b.n	800c0d6 <__sfp+0x1a>
 800c0e8:	220c      	movs	r2, #12
 800c0ea:	5ea5      	ldrsh	r5, [r4, r2]
 800c0ec:	2d00      	cmp	r5, #0
 800c0ee:	d11a      	bne.n	800c126 <__sfp+0x6a>
 800c0f0:	0020      	movs	r0, r4
 800c0f2:	4b15      	ldr	r3, [pc, #84]	; (800c148 <__sfp+0x8c>)
 800c0f4:	3058      	adds	r0, #88	; 0x58
 800c0f6:	60e3      	str	r3, [r4, #12]
 800c0f8:	6665      	str	r5, [r4, #100]	; 0x64
 800c0fa:	f000 f847 	bl	800c18c <__retarget_lock_init_recursive>
 800c0fe:	f7ff ff8d 	bl	800c01c <__sfp_lock_release>
 800c102:	0020      	movs	r0, r4
 800c104:	2208      	movs	r2, #8
 800c106:	0029      	movs	r1, r5
 800c108:	6025      	str	r5, [r4, #0]
 800c10a:	60a5      	str	r5, [r4, #8]
 800c10c:	6065      	str	r5, [r4, #4]
 800c10e:	6125      	str	r5, [r4, #16]
 800c110:	6165      	str	r5, [r4, #20]
 800c112:	61a5      	str	r5, [r4, #24]
 800c114:	305c      	adds	r0, #92	; 0x5c
 800c116:	f7fd f802 	bl	800911e <memset>
 800c11a:	6365      	str	r5, [r4, #52]	; 0x34
 800c11c:	63a5      	str	r5, [r4, #56]	; 0x38
 800c11e:	64a5      	str	r5, [r4, #72]	; 0x48
 800c120:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c122:	0020      	movs	r0, r4
 800c124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c126:	3468      	adds	r4, #104	; 0x68
 800c128:	e7d7      	b.n	800c0da <__sfp+0x1e>
 800c12a:	2104      	movs	r1, #4
 800c12c:	0038      	movs	r0, r7
 800c12e:	f7ff ff57 	bl	800bfe0 <__sfmoreglue>
 800c132:	1e04      	subs	r4, r0, #0
 800c134:	6030      	str	r0, [r6, #0]
 800c136:	d1d5      	bne.n	800c0e4 <__sfp+0x28>
 800c138:	f7ff ff70 	bl	800c01c <__sfp_lock_release>
 800c13c:	230c      	movs	r3, #12
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	e7ef      	b.n	800c122 <__sfp+0x66>
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	0800d270 	.word	0x0800d270
 800c148:	ffff0001 	.word	0xffff0001

0800c14c <_fwalk_reent>:
 800c14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c14e:	0004      	movs	r4, r0
 800c150:	0006      	movs	r6, r0
 800c152:	2700      	movs	r7, #0
 800c154:	9101      	str	r1, [sp, #4]
 800c156:	3448      	adds	r4, #72	; 0x48
 800c158:	6863      	ldr	r3, [r4, #4]
 800c15a:	68a5      	ldr	r5, [r4, #8]
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	9b00      	ldr	r3, [sp, #0]
 800c160:	3b01      	subs	r3, #1
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	d504      	bpl.n	800c170 <_fwalk_reent+0x24>
 800c166:	6824      	ldr	r4, [r4, #0]
 800c168:	2c00      	cmp	r4, #0
 800c16a:	d1f5      	bne.n	800c158 <_fwalk_reent+0xc>
 800c16c:	0038      	movs	r0, r7
 800c16e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c170:	89ab      	ldrh	r3, [r5, #12]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d908      	bls.n	800c188 <_fwalk_reent+0x3c>
 800c176:	220e      	movs	r2, #14
 800c178:	5eab      	ldrsh	r3, [r5, r2]
 800c17a:	3301      	adds	r3, #1
 800c17c:	d004      	beq.n	800c188 <_fwalk_reent+0x3c>
 800c17e:	0029      	movs	r1, r5
 800c180:	0030      	movs	r0, r6
 800c182:	9b01      	ldr	r3, [sp, #4]
 800c184:	4798      	blx	r3
 800c186:	4307      	orrs	r7, r0
 800c188:	3568      	adds	r5, #104	; 0x68
 800c18a:	e7e8      	b.n	800c15e <_fwalk_reent+0x12>

0800c18c <__retarget_lock_init_recursive>:
 800c18c:	4770      	bx	lr

0800c18e <__retarget_lock_acquire_recursive>:
 800c18e:	4770      	bx	lr

0800c190 <__retarget_lock_release_recursive>:
 800c190:	4770      	bx	lr
	...

0800c194 <__swhatbuf_r>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	000e      	movs	r6, r1
 800c198:	001d      	movs	r5, r3
 800c19a:	230e      	movs	r3, #14
 800c19c:	5ec9      	ldrsh	r1, [r1, r3]
 800c19e:	0014      	movs	r4, r2
 800c1a0:	b096      	sub	sp, #88	; 0x58
 800c1a2:	2900      	cmp	r1, #0
 800c1a4:	da07      	bge.n	800c1b6 <__swhatbuf_r+0x22>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	89b3      	ldrh	r3, [r6, #12]
 800c1ac:	061b      	lsls	r3, r3, #24
 800c1ae:	d411      	bmi.n	800c1d4 <__swhatbuf_r+0x40>
 800c1b0:	2380      	movs	r3, #128	; 0x80
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	e00f      	b.n	800c1d6 <__swhatbuf_r+0x42>
 800c1b6:	466a      	mov	r2, sp
 800c1b8:	f000 f8c8 	bl	800c34c <_fstat_r>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	dbf2      	blt.n	800c1a6 <__swhatbuf_r+0x12>
 800c1c0:	23f0      	movs	r3, #240	; 0xf0
 800c1c2:	9901      	ldr	r1, [sp, #4]
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	4019      	ands	r1, r3
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <__swhatbuf_r+0x4c>)
 800c1ca:	18c9      	adds	r1, r1, r3
 800c1cc:	424b      	negs	r3, r1
 800c1ce:	4159      	adcs	r1, r3
 800c1d0:	6029      	str	r1, [r5, #0]
 800c1d2:	e7ed      	b.n	800c1b0 <__swhatbuf_r+0x1c>
 800c1d4:	2340      	movs	r3, #64	; 0x40
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	b016      	add	sp, #88	; 0x58
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	46c0      	nop			; (mov r8, r8)
 800c1e0:	ffffe000 	.word	0xffffe000

0800c1e4 <__smakebuf_r>:
 800c1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1e6:	2602      	movs	r6, #2
 800c1e8:	898b      	ldrh	r3, [r1, #12]
 800c1ea:	0005      	movs	r5, r0
 800c1ec:	000c      	movs	r4, r1
 800c1ee:	4233      	tst	r3, r6
 800c1f0:	d006      	beq.n	800c200 <__smakebuf_r+0x1c>
 800c1f2:	0023      	movs	r3, r4
 800c1f4:	3347      	adds	r3, #71	; 0x47
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	6163      	str	r3, [r4, #20]
 800c1fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c200:	466a      	mov	r2, sp
 800c202:	ab01      	add	r3, sp, #4
 800c204:	f7ff ffc6 	bl	800c194 <__swhatbuf_r>
 800c208:	9900      	ldr	r1, [sp, #0]
 800c20a:	0007      	movs	r7, r0
 800c20c:	0028      	movs	r0, r5
 800c20e:	f7fc ffd9 	bl	80091c4 <_malloc_r>
 800c212:	2800      	cmp	r0, #0
 800c214:	d108      	bne.n	800c228 <__smakebuf_r+0x44>
 800c216:	220c      	movs	r2, #12
 800c218:	5ea3      	ldrsh	r3, [r4, r2]
 800c21a:	059a      	lsls	r2, r3, #22
 800c21c:	d4ef      	bmi.n	800c1fe <__smakebuf_r+0x1a>
 800c21e:	2203      	movs	r2, #3
 800c220:	4393      	bics	r3, r2
 800c222:	431e      	orrs	r6, r3
 800c224:	81a6      	strh	r6, [r4, #12]
 800c226:	e7e4      	b.n	800c1f2 <__smakebuf_r+0xe>
 800c228:	4b0f      	ldr	r3, [pc, #60]	; (800c268 <__smakebuf_r+0x84>)
 800c22a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c22c:	2380      	movs	r3, #128	; 0x80
 800c22e:	89a2      	ldrh	r2, [r4, #12]
 800c230:	6020      	str	r0, [r4, #0]
 800c232:	4313      	orrs	r3, r2
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	9b00      	ldr	r3, [sp, #0]
 800c238:	6120      	str	r0, [r4, #16]
 800c23a:	6163      	str	r3, [r4, #20]
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00d      	beq.n	800c25e <__smakebuf_r+0x7a>
 800c242:	0028      	movs	r0, r5
 800c244:	230e      	movs	r3, #14
 800c246:	5ee1      	ldrsh	r1, [r4, r3]
 800c248:	f000 f892 	bl	800c370 <_isatty_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d006      	beq.n	800c25e <__smakebuf_r+0x7a>
 800c250:	2203      	movs	r2, #3
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	4393      	bics	r3, r2
 800c256:	001a      	movs	r2, r3
 800c258:	2301      	movs	r3, #1
 800c25a:	4313      	orrs	r3, r2
 800c25c:	81a3      	strh	r3, [r4, #12]
 800c25e:	89a0      	ldrh	r0, [r4, #12]
 800c260:	4307      	orrs	r7, r0
 800c262:	81a7      	strh	r7, [r4, #12]
 800c264:	e7cb      	b.n	800c1fe <__smakebuf_r+0x1a>
 800c266:	46c0      	nop			; (mov r8, r8)
 800c268:	0800bfd1 	.word	0x0800bfd1

0800c26c <memchr>:
 800c26c:	b2c9      	uxtb	r1, r1
 800c26e:	1882      	adds	r2, r0, r2
 800c270:	4290      	cmp	r0, r2
 800c272:	d101      	bne.n	800c278 <memchr+0xc>
 800c274:	2000      	movs	r0, #0
 800c276:	4770      	bx	lr
 800c278:	7803      	ldrb	r3, [r0, #0]
 800c27a:	428b      	cmp	r3, r1
 800c27c:	d0fb      	beq.n	800c276 <memchr+0xa>
 800c27e:	3001      	adds	r0, #1
 800c280:	e7f6      	b.n	800c270 <memchr+0x4>

0800c282 <memmove>:
 800c282:	b510      	push	{r4, lr}
 800c284:	4288      	cmp	r0, r1
 800c286:	d902      	bls.n	800c28e <memmove+0xc>
 800c288:	188b      	adds	r3, r1, r2
 800c28a:	4298      	cmp	r0, r3
 800c28c:	d303      	bcc.n	800c296 <memmove+0x14>
 800c28e:	2300      	movs	r3, #0
 800c290:	e007      	b.n	800c2a2 <memmove+0x20>
 800c292:	5c8b      	ldrb	r3, [r1, r2]
 800c294:	5483      	strb	r3, [r0, r2]
 800c296:	3a01      	subs	r2, #1
 800c298:	d2fb      	bcs.n	800c292 <memmove+0x10>
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	5ccc      	ldrb	r4, [r1, r3]
 800c29e:	54c4      	strb	r4, [r0, r3]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d1fa      	bne.n	800c29c <memmove+0x1a>
 800c2a6:	e7f8      	b.n	800c29a <memmove+0x18>

0800c2a8 <_malloc_usable_size_r>:
 800c2a8:	1f0b      	subs	r3, r1, #4
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	1f18      	subs	r0, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	da01      	bge.n	800c2b6 <_malloc_usable_size_r+0xe>
 800c2b2:	580b      	ldr	r3, [r1, r0]
 800c2b4:	18c0      	adds	r0, r0, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_raise_r>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	0004      	movs	r4, r0
 800c2bc:	000d      	movs	r5, r1
 800c2be:	291f      	cmp	r1, #31
 800c2c0:	d904      	bls.n	800c2cc <_raise_r+0x14>
 800c2c2:	2316      	movs	r3, #22
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	4240      	negs	r0, r0
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d004      	beq.n	800c2dc <_raise_r+0x24>
 800c2d2:	008a      	lsls	r2, r1, #2
 800c2d4:	189b      	adds	r3, r3, r2
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	2a00      	cmp	r2, #0
 800c2da:	d108      	bne.n	800c2ee <_raise_r+0x36>
 800c2dc:	0020      	movs	r0, r4
 800c2de:	f000 f831 	bl	800c344 <_getpid_r>
 800c2e2:	002a      	movs	r2, r5
 800c2e4:	0001      	movs	r1, r0
 800c2e6:	0020      	movs	r0, r4
 800c2e8:	f000 f81a 	bl	800c320 <_kill_r>
 800c2ec:	e7ed      	b.n	800c2ca <_raise_r+0x12>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	2a01      	cmp	r2, #1
 800c2f2:	d0ea      	beq.n	800c2ca <_raise_r+0x12>
 800c2f4:	1c51      	adds	r1, r2, #1
 800c2f6:	d103      	bne.n	800c300 <_raise_r+0x48>
 800c2f8:	2316      	movs	r3, #22
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	e7e4      	b.n	800c2ca <_raise_r+0x12>
 800c300:	2400      	movs	r4, #0
 800c302:	0028      	movs	r0, r5
 800c304:	601c      	str	r4, [r3, #0]
 800c306:	4790      	blx	r2
 800c308:	0020      	movs	r0, r4
 800c30a:	e7de      	b.n	800c2ca <_raise_r+0x12>

0800c30c <raise>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	4b03      	ldr	r3, [pc, #12]	; (800c31c <raise+0x10>)
 800c310:	0001      	movs	r1, r0
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	f7ff ffd0 	bl	800c2b8 <_raise_r>
 800c318:	bd10      	pop	{r4, pc}
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	20000028 	.word	0x20000028

0800c320 <_kill_r>:
 800c320:	2300      	movs	r3, #0
 800c322:	b570      	push	{r4, r5, r6, lr}
 800c324:	4d06      	ldr	r5, [pc, #24]	; (800c340 <_kill_r+0x20>)
 800c326:	0004      	movs	r4, r0
 800c328:	0008      	movs	r0, r1
 800c32a:	0011      	movs	r1, r2
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f7f9 fa57 	bl	80057e0 <_kill>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d103      	bne.n	800c33e <_kill_r+0x1e>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d000      	beq.n	800c33e <_kill_r+0x1e>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	20000448 	.word	0x20000448

0800c344 <_getpid_r>:
 800c344:	b510      	push	{r4, lr}
 800c346:	f7f9 fa45 	bl	80057d4 <_getpid>
 800c34a:	bd10      	pop	{r4, pc}

0800c34c <_fstat_r>:
 800c34c:	2300      	movs	r3, #0
 800c34e:	b570      	push	{r4, r5, r6, lr}
 800c350:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_fstat_r+0x20>)
 800c352:	0004      	movs	r4, r0
 800c354:	0008      	movs	r0, r1
 800c356:	0011      	movs	r1, r2
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f7f9 faa0 	bl	800589e <_fstat>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d103      	bne.n	800c36a <_fstat_r+0x1e>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d000      	beq.n	800c36a <_fstat_r+0x1e>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	20000448 	.word	0x20000448

0800c370 <_isatty_r>:
 800c370:	2300      	movs	r3, #0
 800c372:	b570      	push	{r4, r5, r6, lr}
 800c374:	4d06      	ldr	r5, [pc, #24]	; (800c390 <_isatty_r+0x20>)
 800c376:	0004      	movs	r4, r0
 800c378:	0008      	movs	r0, r1
 800c37a:	602b      	str	r3, [r5, #0]
 800c37c:	f7f9 fa9d 	bl	80058ba <_isatty>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d103      	bne.n	800c38c <_isatty_r+0x1c>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d000      	beq.n	800c38c <_isatty_r+0x1c>
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	20000448 	.word	0x20000448

0800c394 <_init>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	46c0      	nop			; (mov r8, r8)
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr

0800c3a0 <_fini>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a6:	bc08      	pop	{r3}
 800c3a8:	469e      	mov	lr, r3
 800c3aa:	4770      	bx	lr
